// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flashDispatch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        flashDemux2getPath_V_dout,
        flashDemux2getPath_V_empty_n,
        flashDemux2getPath_V_read,
        flash_Disp2rec_V_V_din,
        flash_Disp2rec_V_V_full_n,
        flash_Disp2rec_V_V_write,
        memRdCmd_V_TREADY,
        memRdCmd_V_TDATA,
        memRdCmd_V_TVALID
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] flashDemux2getPath_V_dout;
input   flashDemux2getPath_V_empty_n;
output   flashDemux2getPath_V_read;
output  [15:0] flash_Disp2rec_V_V_din;
input   flash_Disp2rec_V_V_full_n;
output   flash_Disp2rec_V_V_write;
input   memRdCmd_V_TREADY;
output  [47:0] memRdCmd_V_TDATA;
output   memRdCmd_V_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flashDemux2getPath_V_read;
reg flash_Disp2rec_V_V_write;

reg    ap_done_reg;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state0;
wire   [0:0] tmp_nbreadreq_fu_56_p3;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_reg_144;
reg    ap_block_state2_pp0_stage0_iter1;
wire    memRdCmd_V_1_ack_in;
reg    ap_block_state2_io;
wire    ap_CS_iter1_fsm_state2;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] tmp_reg_144_pp0_iter1_reg;
reg    ap_block_state3_io;
wire    ap_CS_iter2_fsm_state3;
reg   [47:0] memRdCmd_V_1_data_out;
reg    memRdCmd_V_1_vld_in;
wire    memRdCmd_V_1_vld_out;
wire    memRdCmd_V_1_ack_out;
reg   [47:0] memRdCmd_V_1_payload_A;
reg   [47:0] memRdCmd_V_1_payload_B;
reg    memRdCmd_V_1_sel_rd;
reg    memRdCmd_V_1_sel_wr;
wire    memRdCmd_V_1_sel;
wire    memRdCmd_V_1_load_A;
wire    memRdCmd_V_1_load_B;
reg   [1:0] memRdCmd_V_1_state;
wire    memRdCmd_V_1_state_cmp_full;
reg    memRdCmd_V_TDATA_blk_n;
reg    flashDemux2getPath_V_blk_n;
reg    flash_Disp2rec_V_V_blk_n;
wire   [31:0] getCtrlWord_address_s_fu_84_p1;
reg   [31:0] getCtrlWord_address_s_reg_148;
reg   [15:0] tmp_V_reg_153;
reg   [12:0] tmp_s_reg_159;
wire  signed [47:0] tmp_1_cast_fu_139_p1;
wire   [15:0] op2_assign_fu_108_p3;
wire   [0:0] tmp_242_i_fu_115_p2;
wire   [12:0] tmp_80_i_fu_120_p2;
wire   [12:0] getCtrlWord_count_V_fu_125_p3;
wire   [44:0] tmp_1_fu_132_p3;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
#0 tmp_reg_144 = 1'd0;
#0 tmp_reg_144_pp0_iter1_reg = 1'd0;
#0 memRdCmd_V_1_payload_A = 48'd0;
#0 memRdCmd_V_1_payload_B = 48'd0;
#0 memRdCmd_V_1_sel_rd = 1'b0;
#0 memRdCmd_V_1_sel_wr = 1'b0;
#0 memRdCmd_V_1_state = 2'd0;
#0 getCtrlWord_address_s_reg_148 = 32'd0;
#0 tmp_V_reg_153 = 16'd0;
#0 tmp_s_reg_159 = 13'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        getCtrlWord_address_s_reg_148 <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1)))) | ((flashDemux2getPath_V_empty_n == 1'b0) & (tmp_nbreadreq_fu_56_p3 == 1'd1))) & (tmp_nbreadreq_fu_56_p3 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            getCtrlWord_address_s_reg_148 <= getCtrlWord_address_s_fu_84_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        memRdCmd_V_1_payload_A <= 48'd0;
    end else begin
        if ((memRdCmd_V_1_load_A == 1'b1)) begin
            memRdCmd_V_1_payload_A <= tmp_1_cast_fu_139_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        memRdCmd_V_1_payload_B <= 48'd0;
    end else begin
        if ((memRdCmd_V_1_load_B == 1'b1)) begin
            memRdCmd_V_1_payload_B <= tmp_1_cast_fu_139_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        memRdCmd_V_1_sel_rd <= 1'b0;
    end else begin
        if (((memRdCmd_V_1_ack_out == 1'b1) & (memRdCmd_V_1_vld_out == 1'b1))) begin
            memRdCmd_V_1_sel_rd <= ~memRdCmd_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        memRdCmd_V_1_sel_wr <= 1'b0;
    end else begin
        if (((memRdCmd_V_1_vld_in == 1'b1) & (memRdCmd_V_1_ack_in == 1'b1))) begin
            memRdCmd_V_1_sel_wr <= ~memRdCmd_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        memRdCmd_V_1_state <= 2'd0;
    end else begin
        if ((((memRdCmd_V_1_vld_in == 1'b0) & (memRdCmd_V_1_state == 2'd2)) | ((memRdCmd_V_1_vld_in == 1'b0) & (memRdCmd_V_1_ack_out == 1'b1) & (memRdCmd_V_1_state == 2'd3)))) begin
            memRdCmd_V_1_state <= 2'd2;
        end else if ((((memRdCmd_V_1_ack_out == 1'b0) & (memRdCmd_V_1_state == 2'd1)) | ((memRdCmd_V_1_ack_out == 1'b0) & (memRdCmd_V_1_vld_in == 1'b1) & (memRdCmd_V_1_state == 2'd3)))) begin
            memRdCmd_V_1_state <= 2'd1;
        end else if (((~((memRdCmd_V_1_vld_in == 1'b0) & (memRdCmd_V_1_ack_out == 1'b1)) & ~((memRdCmd_V_1_ack_out == 1'b0) & (memRdCmd_V_1_vld_in == 1'b1)) & (memRdCmd_V_1_state == 2'd3)) | ((memRdCmd_V_1_ack_out == 1'b1) & (memRdCmd_V_1_state == 2'd1)) | ((memRdCmd_V_1_vld_in == 1'b1) & (memRdCmd_V_1_state == 2'd2)))) begin
            memRdCmd_V_1_state <= 2'd3;
        end else begin
            memRdCmd_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_V_reg_153 <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1)))) | ((flashDemux2getPath_V_empty_n == 1'b0) & (tmp_nbreadreq_fu_56_p3 == 1'd1))) & (tmp_nbreadreq_fu_56_p3 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            tmp_V_reg_153 <= {{flashDemux2getPath_V_dout[47:32]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_reg_144 <= 1'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1)))) | ((flashDemux2getPath_V_empty_n == 1'b0) & (tmp_nbreadreq_fu_56_p3 == 1'd1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            tmp_reg_144 <= flashDemux2getPath_V_empty_n;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_reg_144_pp0_iter1_reg <= 1'd0;
    end else begin
        if ((~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
            tmp_reg_144_pp0_iter1_reg <= tmp_reg_144;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_s_reg_159 <= 13'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1)))) | ((flashDemux2getPath_V_empty_n == 1'b0) & (tmp_nbreadreq_fu_56_p3 == 1'd1))) & (tmp_nbreadreq_fu_56_p3 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
            tmp_s_reg_159 <= {{flashDemux2getPath_V_dout[47:35]}};
        end
    end
end

always @ (*) begin
    if ((~((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter2_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_iter2_fsm_state0) & (1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1)))) | ((flashDemux2getPath_V_empty_n == 1'b0) & (tmp_nbreadreq_fu_56_p3 == 1'd1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_56_p3 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start == 1'b1))) begin
        flashDemux2getPath_V_blk_n = flashDemux2getPath_V_empty_n;
    end else begin
        flashDemux2getPath_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1)))) | ((flashDemux2getPath_V_empty_n == 1'b0) & (tmp_nbreadreq_fu_56_p3 == 1'd1))) & (tmp_nbreadreq_fu_56_p3 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        flashDemux2getPath_V_read = 1'b1;
    end else begin
        flashDemux2getPath_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_144 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        flash_Disp2rec_V_V_blk_n = flash_Disp2rec_V_V_full_n;
    end else begin
        flash_Disp2rec_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1))) & (tmp_reg_144 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        flash_Disp2rec_V_V_write = 1'b1;
    end else begin
        flash_Disp2rec_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((memRdCmd_V_1_sel == 1'b1)) begin
        memRdCmd_V_1_data_out = memRdCmd_V_1_payload_B;
    end else begin
        memRdCmd_V_1_data_out = memRdCmd_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1))) & (tmp_reg_144 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        memRdCmd_V_1_vld_in = 1'b1;
    end else begin
        memRdCmd_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_144_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_iter2_fsm_state3)) | ((tmp_reg_144 == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
        memRdCmd_V_TDATA_blk_n = memRdCmd_V_1_state[1'd1];
    end else begin
        memRdCmd_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((flashDemux2getPath_V_empty_n == 1'b0) & (tmp_nbreadreq_fu_56_p3 == 1'd1))) & ~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((flashDemux2getPath_V_empty_n == 1'b0) & (tmp_nbreadreq_fu_56_p3 == 1'd1))))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1)))) | ((flashDemux2getPath_V_empty_n == 1'b0) & (tmp_nbreadreq_fu_56_p3 == 1'd1))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1))) & ~((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io) | (ap_done_reg == 1'b1)) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((1'b1 == ap_block_state2_io) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1))))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_io) | (ap_done_reg == 1'b1) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((memRdCmd_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io))) | ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm[32'd0];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((flashDemux2getPath_V_empty_n == 1'b0) & (tmp_nbreadreq_fu_56_p3 == 1'd1)));
end

always @ (*) begin
    ap_block_state2_io = ((memRdCmd_V_1_ack_in == 1'b0) & (tmp_reg_144 == 1'd1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((flash_Disp2rec_V_V_full_n == 1'b0) & (tmp_reg_144 == 1'd1));
end

always @ (*) begin
    ap_block_state3_io = ((memRdCmd_V_1_ack_in == 1'b0) & (tmp_reg_144_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (memRdCmd_V_1_ack_in == 1'b0);
end

assign flash_Disp2rec_V_V_din = tmp_V_reg_153;

assign getCtrlWord_address_s_fu_84_p1 = flashDemux2getPath_V_dout[31:0];

assign getCtrlWord_count_V_fu_125_p3 = ((tmp_242_i_fu_115_p2[0:0] === 1'b1) ? tmp_80_i_fu_120_p2 : tmp_s_reg_159);

assign memRdCmd_V_1_ack_in = memRdCmd_V_1_state[1'd1];

assign memRdCmd_V_1_ack_out = memRdCmd_V_TREADY;

assign memRdCmd_V_1_load_A = (memRdCmd_V_1_state_cmp_full & ~memRdCmd_V_1_sel_wr);

assign memRdCmd_V_1_load_B = (memRdCmd_V_1_state_cmp_full & memRdCmd_V_1_sel_wr);

assign memRdCmd_V_1_sel = memRdCmd_V_1_sel_rd;

assign memRdCmd_V_1_state_cmp_full = ((memRdCmd_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign memRdCmd_V_1_vld_out = memRdCmd_V_1_state[1'd0];

assign memRdCmd_V_TDATA = memRdCmd_V_1_data_out;

assign memRdCmd_V_TVALID = memRdCmd_V_1_state[1'd0];

assign op2_assign_fu_108_p3 = {{tmp_s_reg_159}, {3'd0}};

assign tmp_1_cast_fu_139_p1 = $signed(tmp_1_fu_132_p3);

assign tmp_1_fu_132_p3 = {{getCtrlWord_count_V_fu_125_p3}, {getCtrlWord_address_s_reg_148}};

assign tmp_242_i_fu_115_p2 = ((tmp_V_reg_153 > op2_assign_fu_108_p3) ? 1'b1 : 1'b0);

assign tmp_80_i_fu_120_p2 = (13'd1 + tmp_s_reg_159);

assign tmp_nbreadreq_fu_56_p3 = flashDemux2getPath_V_empty_n;

endmodule //flashDispatch
