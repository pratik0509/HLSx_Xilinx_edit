-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity splitter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hashTable2splitter_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    hashTable2splitter_V_empty_n : IN STD_LOGIC;
    hashTable2splitter_V_read : OUT STD_LOGIC;
    splitter2valueStoreF_1_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    splitter2valueStoreF_1_full_n : IN STD_LOGIC;
    splitter2valueStoreF_1_write : OUT STD_LOGIC;
    splitter2valueStoreD_1_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    splitter2valueStoreD_1_full_n : IN STD_LOGIC;
    splitter2valueStoreD_1_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of splitter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_801 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal tmp_nbreadreq_fu_52_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal tmp_reg_201 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp_reg_201_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal is_validFlag_loc_i_reg_92 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal dramOrFlash_V_1_loc_s_reg_104 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_predicate_op32_write_state3 : BOOLEAN;
    signal ap_predicate_op34_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal is_validFlag : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal dramOrFlash_V_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal hashTable2splitter_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal splitter2valueStoreF_1_blk_n : STD_LOGIC;
    signal splitter2valueStoreD_1_blk_n : STD_LOGIC;
    signal tmp92_reg_205 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal tmp92_reg_205_pp0_iter1_reg : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal tmp_SOP_V_fu_135_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_SOP_V_reg_212 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal not_i_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_i_reg_216 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_is_validFlag_flag_i_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_din_EOP_V_assign_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_Result_i_fu_143_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_174_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_194 : BOOLEAN;
    signal ap_condition_96 : BOOLEAN;
    signal ap_condition_151 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
        elsif (ap_clk'event and ap_clk =  '1') then
            ap_CS_fsm <= ap_NS_fsm;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_done_reg <= ap_const_logic_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_continue = ap_const_logic_1)) then 
                ap_done_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                ap_done_reg <= ap_const_logic_1;
            end if; 
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                ap_enable_reg_pp0_iter1 <= real_start;
            end if; 
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end if; 
        end if;
    end process;


    ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_boolean_1 = ap_condition_96)) then
                if (((tmp_SOP_V_fu_135_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 <= not_i_fu_153_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 <= ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104;
                end if;
            end if; 
        end if;
    end process;


    ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_boolean_1 = ap_condition_96)) then
                if (((tmp_SOP_V_fu_135_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 <= ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80;
                end if;
            end if; 
        end if;
    end process;


    ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_boolean_1 = ap_condition_96)) then
                if (((tmp_SOP_V_fu_135_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 <= ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92;
                end if;
            end if; 
        end if;
    end process;


    dramOrFlash_V_1_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            dramOrFlash_V_1 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_201 = ap_const_lv1_1) and (tmp_SOP_V_reg_212 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dramOrFlash_V_1 <= not_i_reg_216;
            end if; 
        end if;
    end process;


    dramOrFlash_V_1_loc_s_reg_104_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            dramOrFlash_V_1_loc_s_reg_104 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_boolean_1 = ap_condition_151)) then
                if (((tmp_SOP_V_reg_212 = ap_const_lv1_0) and (tmp_reg_201 = ap_const_lv1_1))) then 
                    dramOrFlash_V_1_loc_s_reg_104 <= dramOrFlash_V_1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    dramOrFlash_V_1_loc_s_reg_104 <= ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104;
                end if;
            end if; 
        end if;
    end process;


    is_validFlag_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            is_validFlag <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_201 = ap_const_lv1_1) and (ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                is_validFlag <= ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4;
            end if; 
        end if;
    end process;


    is_validFlag_loc_i_reg_92_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            is_validFlag_loc_i_reg_92 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if ((ap_const_boolean_1 = ap_condition_151)) then
                if (((tmp_SOP_V_reg_212 = ap_const_lv1_0) and (tmp_reg_201 = ap_const_lv1_1))) then 
                    is_validFlag_loc_i_reg_92 <= is_validFlag;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    is_validFlag_loc_i_reg_92 <= ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92;
                end if;
            end if; 
        end if;
    end process;


    not_i_reg_216_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            not_i_reg_216 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_SOP_V_fu_135_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                not_i_reg_216 <= not_i_fu_153_p2;
            end if; 
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            start_once_reg <= ap_const_logic_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                start_once_reg <= ap_const_logic_1;
            elsif ((internal_ap_ready = ap_const_logic_1)) then 
                start_once_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;


    tmp92_reg_205_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            tmp92_reg_205 <= ap_const_lv256_lc_1;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp92_reg_205 <= hashTable2splitter_V_dout;
            end if; 
        end if;
    end process;


    tmp92_reg_205_pp0_iter1_reg_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            tmp92_reg_205_pp0_iter1_reg <= ap_const_lv256_lc_1;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp92_reg_205_pp0_iter1_reg <= tmp92_reg_205;
            end if; 
        end if;
    end process;


    tmp_SOP_V_reg_212_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            tmp_SOP_V_reg_212 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_SOP_V_reg_212 <= hashTable2splitter_V_dout(124 downto 124);
            end if; 
        end if;
    end process;


    tmp_reg_201_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            tmp_reg_201 <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_reg_201 <= (0=>hashTable2splitter_V_empty_n, others=>'-');
            end if; 
        end if;
    end process;


    tmp_reg_201_pp0_iter1_reg_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            tmp_reg_201_pp0_iter1_reg <= ap_const_lv1_0;
        elsif (ap_clk'event and ap_clk =  '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_reg_201_pp0_iter1_reg <= tmp_reg_201;
            end if; 
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter2, hashTable2splitter_V_empty_n, tmp_nbreadreq_fu_52_p3, splitter2valueStoreF_1_full_n, ap_predicate_op32_write_state3, splitter2valueStoreD_1_full_n, ap_predicate_op34_write_state3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((splitter2valueStoreD_1_full_n = ap_const_logic_0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1)) or ((splitter2valueStoreF_1_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state3 = ap_const_boolean_1)))) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (hashTable2splitter_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter2, hashTable2splitter_V_empty_n, tmp_nbreadreq_fu_52_p3, splitter2valueStoreF_1_full_n, ap_predicate_op32_write_state3, splitter2valueStoreD_1_full_n, ap_predicate_op34_write_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((splitter2valueStoreD_1_full_n = ap_const_logic_0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1)) or ((splitter2valueStoreF_1_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state3 = ap_const_boolean_1)))) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (hashTable2splitter_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(real_start, ap_done_reg, ap_enable_reg_pp0_iter2, hashTable2splitter_V_empty_n, tmp_nbreadreq_fu_52_p3, splitter2valueStoreF_1_full_n, ap_predicate_op32_write_state3, splitter2valueStoreD_1_full_n, ap_predicate_op34_write_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((splitter2valueStoreD_1_full_n = ap_const_logic_0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1)) or ((splitter2valueStoreF_1_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state3 = ap_const_boolean_1)))) or ((real_start = ap_const_logic_1) and ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (hashTable2splitter_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(real_start, ap_done_reg, hashTable2splitter_V_empty_n, tmp_nbreadreq_fu_52_p3)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (hashTable2splitter_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(splitter2valueStoreF_1_full_n, ap_predicate_op32_write_state3, splitter2valueStoreD_1_full_n, ap_predicate_op34_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((splitter2valueStoreD_1_full_n = ap_const_logic_0) and (ap_predicate_op34_write_state3 = ap_const_boolean_1)) or ((splitter2valueStoreF_1_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state3 = ap_const_boolean_1)));
    end process;


    ap_condition_151_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_151 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_194_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_201, ap_block_pp0_stage0)
    begin
                ap_condition_194 <= ((tmp_reg_201 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_96_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_96 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4_assign_proc : process(ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4, ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4, p_is_validFlag_flag_i_fu_181_p2, ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114, ap_condition_194)
    begin
        if ((ap_const_boolean_1 = ap_condition_194)) then
            if ((ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 = ap_const_lv1_0)) then 
                ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 <= ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4;
            elsif ((ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 = ap_const_lv1_1)) then 
                ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 <= p_is_validFlag_flag_i_fu_181_p2;
            else 
                ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 <= ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114;
            end if;
        else 
            ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 <= ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114;
        end if; 
    end process;


    ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_201, ap_block_pp0_stage0, tmp_SOP_V_reg_212, ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80)
    begin
        if (((tmp_SOP_V_reg_212 = ap_const_lv1_0) and (tmp_reg_201 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4 <= ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80;
        end if; 
    end process;


    ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_201, is_validFlag, ap_block_pp0_stage0, tmp_SOP_V_reg_212, ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92)
    begin
        if (((tmp_SOP_V_reg_212 = ap_const_lv1_0) and (tmp_reg_201 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 <= is_validFlag;
        else 
            ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 <= ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92;
        end if; 
    end process;


    ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4_assign_proc : process(ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4, not_din_EOP_V_assign_fu_188_p2, ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125, ap_condition_194)
    begin
        if ((ap_const_boolean_1 = ap_condition_194)) then
            if ((ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 = ap_const_lv1_0)) then 
                ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 <= ap_const_lv1_1;
            elsif ((ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 = ap_const_lv1_1)) then 
                ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 <= not_din_EOP_V_assign_fu_188_p2;
            else 
                ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 <= ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125;
            end if;
        else 
            ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 <= ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104 <= "X";
    ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80 <= "X";
    ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92 <= "X";
    ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114 <= "X";
    ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125 <= "X";

    ap_predicate_op32_write_state3_assign_proc : process(tmp_reg_201_pp0_iter1_reg, is_validFlag_loc_i_reg_92, dramOrFlash_V_1_loc_s_reg_104)
    begin
                ap_predicate_op32_write_state3 <= ((dramOrFlash_V_1_loc_s_reg_104 = ap_const_lv1_0) and (is_validFlag_loc_i_reg_92 = ap_const_lv1_1) and (tmp_reg_201_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op34_write_state3_assign_proc : process(tmp_reg_201_pp0_iter1_reg, is_validFlag_loc_i_reg_92, dramOrFlash_V_1_loc_s_reg_104)
    begin
                ap_predicate_op34_write_state3 <= ((dramOrFlash_V_1_loc_s_reg_104 = ap_const_lv1_1) and (is_validFlag_loc_i_reg_92 = ap_const_lv1_1) and (tmp_reg_201_pp0_iter1_reg = ap_const_lv1_1));
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    hashTable2splitter_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_pp0_stage0, hashTable2splitter_V_empty_n, tmp_nbreadreq_fu_52_p3, ap_block_pp0_stage0)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hashTable2splitter_V_blk_n <= hashTable2splitter_V_empty_n;
        else 
            hashTable2splitter_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hashTable2splitter_V_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_52_p3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hashTable2splitter_V_read <= ap_const_logic_1;
        else 
            hashTable2splitter_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    not_din_EOP_V_assign_fu_188_p2 <= (tmp_2_fu_174_p3 xor ap_const_lv1_1);
    not_i_fu_153_p2 <= "1" when (unsigned(p_Result_i_fu_143_p4) < unsigned(ap_const_lv32_801)) else "0";
    p_Result_i_fu_143_p4 <= hashTable2splitter_V_dout(39 downto 8);
    p_is_validFlag_flag_i_fu_181_p2 <= (tmp_2_fu_174_p3 or ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    splitter2valueStoreD_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, splitter2valueStoreD_1_full_n, ap_predicate_op34_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op34_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            splitter2valueStoreD_1_blk_n <= splitter2valueStoreD_1_full_n;
        else 
            splitter2valueStoreD_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    splitter2valueStoreD_1_din <= tmp92_reg_205_pp0_iter1_reg;

    splitter2valueStoreD_1_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op34_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op34_write_state3 = ap_const_boolean_1))) then 
            splitter2valueStoreD_1_write <= ap_const_logic_1;
        else 
            splitter2valueStoreD_1_write <= ap_const_logic_0;
        end if; 
    end process;


    splitter2valueStoreF_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, splitter2valueStoreF_1_full_n, ap_predicate_op32_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op32_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            splitter2valueStoreF_1_blk_n <= splitter2valueStoreF_1_full_n;
        else 
            splitter2valueStoreF_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    splitter2valueStoreF_1_din <= tmp92_reg_205_pp0_iter1_reg;

    splitter2valueStoreF_1_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op32_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op32_write_state3 = ap_const_boolean_1))) then 
            splitter2valueStoreF_1_write <= ap_const_logic_1;
        else 
            splitter2valueStoreF_1_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_174_p3 <= tmp92_reg_205(127 downto 127);
    tmp_SOP_V_fu_135_p3 <= hashTable2splitter_V_dout(124 downto 124);
    tmp_nbreadreq_fu_52_p3 <= (0=>hashTable2splitter_V_empty_n, others=>'-');
end behav;
