// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
    typedef struct extendedAxiWord {
        ap_uint<64> data;
        ap_uint<112> user;
        ap_uint<8> keep;
        ap_uint<1> last;
       } extendedAxiWord;

          typedef struct memCtrlWord {
              ap_uint<32> address;
              ap_uint<8> count;
             } memCtrlWord;

                typedef struct flashMemCtrlWord {
                    ap_uint<32> address;
                    ap_uint<13> count;
                   } flashMemCtrlWord;



// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "inData_V_data_V"
#define AUTOTB_TVIN_inData_V_data_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_inData_V_data_V.dat"
#define WRAPC_STREAM_SIZE_IN_inData_V_data_V  "../tv/stream_size/stream_size_in_inData_V_data_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_inData_V_data_V  "../tv/stream_size/stream_ingress_status_inData_V_data_V.dat"
// wrapc file define: "inData_V_user_V"
#define AUTOTB_TVIN_inData_V_user_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_inData_V_user_V.dat"
#define WRAPC_STREAM_SIZE_IN_inData_V_user_V  "../tv/stream_size/stream_size_in_inData_V_user_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_inData_V_user_V  "../tv/stream_size/stream_ingress_status_inData_V_user_V.dat"
// wrapc file define: "inData_V_keep_V"
#define AUTOTB_TVIN_inData_V_keep_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_inData_V_keep_V.dat"
#define WRAPC_STREAM_SIZE_IN_inData_V_keep_V  "../tv/stream_size/stream_size_in_inData_V_keep_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_inData_V_keep_V  "../tv/stream_size/stream_ingress_status_inData_V_keep_V.dat"
// wrapc file define: "inData_V_last_V"
#define AUTOTB_TVIN_inData_V_last_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_inData_V_last_V.dat"
#define WRAPC_STREAM_SIZE_IN_inData_V_last_V  "../tv/stream_size/stream_size_in_inData_V_last_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_inData_V_last_V  "../tv/stream_size/stream_ingress_status_inData_V_last_V.dat"
// wrapc file define: "outData_V_data_V"
#define AUTOTB_TVOUT_outData_V_data_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_outData_V_data_V.dat"
#define AUTOTB_TVIN_outData_V_data_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_outData_V_data_V.dat"
#define WRAPC_STREAM_SIZE_OUT_outData_V_data_V  "../tv/stream_size/stream_size_out_outData_V_data_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_outData_V_data_V  "../tv/stream_size/stream_egress_status_outData_V_data_V.dat"
// wrapc file define: "outData_V_user_V"
#define AUTOTB_TVOUT_outData_V_user_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_outData_V_user_V.dat"
#define AUTOTB_TVIN_outData_V_user_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_outData_V_user_V.dat"
#define WRAPC_STREAM_SIZE_OUT_outData_V_user_V  "../tv/stream_size/stream_size_out_outData_V_user_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_outData_V_user_V  "../tv/stream_size/stream_egress_status_outData_V_user_V.dat"
// wrapc file define: "outData_V_keep_V"
#define AUTOTB_TVOUT_outData_V_keep_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_outData_V_keep_V.dat"
#define AUTOTB_TVIN_outData_V_keep_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_outData_V_keep_V.dat"
#define WRAPC_STREAM_SIZE_OUT_outData_V_keep_V  "../tv/stream_size/stream_size_out_outData_V_keep_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_outData_V_keep_V  "../tv/stream_size/stream_egress_status_outData_V_keep_V.dat"
// wrapc file define: "outData_V_last_V"
#define AUTOTB_TVOUT_outData_V_last_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_outData_V_last_V.dat"
#define AUTOTB_TVIN_outData_V_last_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_outData_V_last_V.dat"
#define WRAPC_STREAM_SIZE_OUT_outData_V_last_V  "../tv/stream_size/stream_size_out_outData_V_last_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_outData_V_last_V  "../tv/stream_size/stream_egress_status_outData_V_last_V.dat"
// wrapc file define: "dramValueStoreMemRdCmd_V"
#define AUTOTB_TVOUT_dramValueStoreMemRdCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_dramValueStoreMemRdCmd_V.dat"
#define AUTOTB_TVIN_dramValueStoreMemRdCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_dramValueStoreMemRdCmd_V.dat"
#define WRAPC_STREAM_SIZE_OUT_dramValueStoreMemRdCmd_V  "../tv/stream_size/stream_size_out_dramValueStoreMemRdCmd_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_dramValueStoreMemRdCmd_V  "../tv/stream_size/stream_egress_status_dramValueStoreMemRdCmd_V.dat"
// wrapc file define: "dramValueStoreMemRdData_V_V"
#define AUTOTB_TVIN_dramValueStoreMemRdData_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_dramValueStoreMemRdData_V_V.dat"
#define WRAPC_STREAM_SIZE_IN_dramValueStoreMemRdData_V_V  "../tv/stream_size/stream_size_in_dramValueStoreMemRdData_V_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_dramValueStoreMemRdData_V_V  "../tv/stream_size/stream_ingress_status_dramValueStoreMemRdData_V_V.dat"
// wrapc file define: "dramValueStoreMemWrCmd_V"
#define AUTOTB_TVOUT_dramValueStoreMemWrCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_dramValueStoreMemWrCmd_V.dat"
#define AUTOTB_TVIN_dramValueStoreMemWrCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_dramValueStoreMemWrCmd_V.dat"
#define WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrCmd_V  "../tv/stream_size/stream_size_out_dramValueStoreMemWrCmd_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_dramValueStoreMemWrCmd_V  "../tv/stream_size/stream_egress_status_dramValueStoreMemWrCmd_V.dat"
// wrapc file define: "dramValueStoreMemWrData_V_V"
#define AUTOTB_TVOUT_dramValueStoreMemWrData_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_dramValueStoreMemWrData_V_V.dat"
#define AUTOTB_TVIN_dramValueStoreMemWrData_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_dramValueStoreMemWrData_V_V.dat"
#define WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrData_V_V  "../tv/stream_size/stream_size_out_dramValueStoreMemWrData_V_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_dramValueStoreMemWrData_V_V  "../tv/stream_size/stream_egress_status_dramValueStoreMemWrData_V_V.dat"
// wrapc file define: "flashValueStoreMemRdCmd_V"
#define AUTOTB_TVOUT_flashValueStoreMemRdCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_flashValueStoreMemRdCmd_V.dat"
#define AUTOTB_TVIN_flashValueStoreMemRdCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_flashValueStoreMemRdCmd_V.dat"
#define WRAPC_STREAM_SIZE_OUT_flashValueStoreMemRdCmd_V  "../tv/stream_size/stream_size_out_flashValueStoreMemRdCmd_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_flashValueStoreMemRdCmd_V  "../tv/stream_size/stream_egress_status_flashValueStoreMemRdCmd_V.dat"
// wrapc file define: "flashValueStoreMemRdData_V_V"
#define AUTOTB_TVIN_flashValueStoreMemRdData_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_flashValueStoreMemRdData_V_V.dat"
#define WRAPC_STREAM_SIZE_IN_flashValueStoreMemRdData_V_V  "../tv/stream_size/stream_size_in_flashValueStoreMemRdData_V_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_flashValueStoreMemRdData_V_V  "../tv/stream_size/stream_ingress_status_flashValueStoreMemRdData_V_V.dat"
// wrapc file define: "flashValueStoreMemWrCmd_V"
#define AUTOTB_TVOUT_flashValueStoreMemWrCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_flashValueStoreMemWrCmd_V.dat"
#define AUTOTB_TVIN_flashValueStoreMemWrCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_flashValueStoreMemWrCmd_V.dat"
#define WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrCmd_V  "../tv/stream_size/stream_size_out_flashValueStoreMemWrCmd_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_flashValueStoreMemWrCmd_V  "../tv/stream_size/stream_egress_status_flashValueStoreMemWrCmd_V.dat"
// wrapc file define: "flashValueStoreMemWrData_V_V"
#define AUTOTB_TVOUT_flashValueStoreMemWrData_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_flashValueStoreMemWrData_V_V.dat"
#define AUTOTB_TVIN_flashValueStoreMemWrData_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_flashValueStoreMemWrData_V_V.dat"
#define WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrData_V_V  "../tv/stream_size/stream_size_out_flashValueStoreMemWrData_V_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_flashValueStoreMemWrData_V_V  "../tv/stream_size/stream_egress_status_flashValueStoreMemWrData_V_V.dat"
// wrapc file define: "hashTableMemRdData_V_V"
#define AUTOTB_TVIN_hashTableMemRdData_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_hashTableMemRdData_V_V.dat"
#define WRAPC_STREAM_SIZE_IN_hashTableMemRdData_V_V  "../tv/stream_size/stream_size_in_hashTableMemRdData_V_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_hashTableMemRdData_V_V  "../tv/stream_size/stream_ingress_status_hashTableMemRdData_V_V.dat"
// wrapc file define: "hashTableMemRdCmd_V"
#define AUTOTB_TVOUT_hashTableMemRdCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_hashTableMemRdCmd_V.dat"
#define AUTOTB_TVIN_hashTableMemRdCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_hashTableMemRdCmd_V.dat"
#define WRAPC_STREAM_SIZE_OUT_hashTableMemRdCmd_V  "../tv/stream_size/stream_size_out_hashTableMemRdCmd_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_hashTableMemRdCmd_V  "../tv/stream_size/stream_egress_status_hashTableMemRdCmd_V.dat"
// wrapc file define: "hashTableMemWrData_V_V"
#define AUTOTB_TVOUT_hashTableMemWrData_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_hashTableMemWrData_V_V.dat"
#define AUTOTB_TVIN_hashTableMemWrData_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_hashTableMemWrData_V_V.dat"
#define WRAPC_STREAM_SIZE_OUT_hashTableMemWrData_V_V  "../tv/stream_size/stream_size_out_hashTableMemWrData_V_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_hashTableMemWrData_V_V  "../tv/stream_size/stream_egress_status_hashTableMemWrData_V_V.dat"
// wrapc file define: "hashTableMemWrCmd_V"
#define AUTOTB_TVOUT_hashTableMemWrCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_hashTableMemWrCmd_V.dat"
#define AUTOTB_TVIN_hashTableMemWrCmd_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_hashTableMemWrCmd_V.dat"
#define WRAPC_STREAM_SIZE_OUT_hashTableMemWrCmd_V  "../tv/stream_size/stream_size_out_hashTableMemWrCmd_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_hashTableMemWrCmd_V  "../tv/stream_size/stream_egress_status_hashTableMemWrCmd_V.dat"
// wrapc file define: "addressReturnOut_V_V"
#define AUTOTB_TVOUT_addressReturnOut_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_addressReturnOut_V_V.dat"
#define AUTOTB_TVIN_addressReturnOut_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_addressReturnOut_V_V.dat"
#define WRAPC_STREAM_SIZE_OUT_addressReturnOut_V_V  "../tv/stream_size/stream_size_out_addressReturnOut_V_V.dat"
#define WRAPC_STREAM_EGRESS_STATUS_addressReturnOut_V_V  "../tv/stream_size/stream_egress_status_addressReturnOut_V_V.dat"
// wrapc file define: "addressAssignDramIn_V_V"
#define AUTOTB_TVIN_addressAssignDramIn_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_addressAssignDramIn_V_V.dat"
#define WRAPC_STREAM_SIZE_IN_addressAssignDramIn_V_V  "../tv/stream_size/stream_size_in_addressAssignDramIn_V_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_addressAssignDramIn_V_V  "../tv/stream_size/stream_ingress_status_addressAssignDramIn_V_V.dat"
// wrapc file define: "addressAssignFlashIn_V_V"
#define AUTOTB_TVIN_addressAssignFlashIn_V_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_addressAssignFlashIn_V_V.dat"
#define WRAPC_STREAM_SIZE_IN_addressAssignFlashIn_V_V  "../tv/stream_size/stream_size_in_addressAssignFlashIn_V_V.dat"
#define WRAPC_STREAM_INGRESS_STATUS_addressAssignFlashIn_V_V  "../tv/stream_size/stream_ingress_status_addressAssignFlashIn_V_V.dat"
// wrapc file define: "flushReq_V"
#define AUTOTB_TVOUT_flushReq_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_flushReq_V.dat"
// wrapc file define: "flushAck_V"
#define AUTOTB_TVIN_flushAck_V  "../tv/cdatafile/c.memcachedPipeline.autotvin_flushAck_V.dat"
// wrapc file define: "flushDone_V"
#define AUTOTB_TVOUT_flushDone_V  "../tv/cdatafile/c.memcachedPipeline.autotvout_flushDone_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "outData_V_data_V"
#define AUTOTB_TVOUT_PC_outData_V_data_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_outData_V_data_V.dat"
// tvout file define: "outData_V_user_V"
#define AUTOTB_TVOUT_PC_outData_V_user_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_outData_V_user_V.dat"
// tvout file define: "outData_V_keep_V"
#define AUTOTB_TVOUT_PC_outData_V_keep_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_outData_V_keep_V.dat"
// tvout file define: "outData_V_last_V"
#define AUTOTB_TVOUT_PC_outData_V_last_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_outData_V_last_V.dat"
// tvout file define: "dramValueStoreMemRdCmd_V"
#define AUTOTB_TVOUT_PC_dramValueStoreMemRdCmd_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_dramValueStoreMemRdCmd_V.dat"
// tvout file define: "dramValueStoreMemWrCmd_V"
#define AUTOTB_TVOUT_PC_dramValueStoreMemWrCmd_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_dramValueStoreMemWrCmd_V.dat"
// tvout file define: "dramValueStoreMemWrData_V_V"
#define AUTOTB_TVOUT_PC_dramValueStoreMemWrData_V_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_dramValueStoreMemWrData_V_V.dat"
// tvout file define: "flashValueStoreMemRdCmd_V"
#define AUTOTB_TVOUT_PC_flashValueStoreMemRdCmd_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_flashValueStoreMemRdCmd_V.dat"
// tvout file define: "flashValueStoreMemWrCmd_V"
#define AUTOTB_TVOUT_PC_flashValueStoreMemWrCmd_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_flashValueStoreMemWrCmd_V.dat"
// tvout file define: "flashValueStoreMemWrData_V_V"
#define AUTOTB_TVOUT_PC_flashValueStoreMemWrData_V_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_flashValueStoreMemWrData_V_V.dat"
// tvout file define: "hashTableMemRdCmd_V"
#define AUTOTB_TVOUT_PC_hashTableMemRdCmd_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_hashTableMemRdCmd_V.dat"
// tvout file define: "hashTableMemWrData_V_V"
#define AUTOTB_TVOUT_PC_hashTableMemWrData_V_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_hashTableMemWrData_V_V.dat"
// tvout file define: "hashTableMemWrCmd_V"
#define AUTOTB_TVOUT_PC_hashTableMemWrCmd_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_hashTableMemWrCmd_V.dat"
// tvout file define: "addressReturnOut_V_V"
#define AUTOTB_TVOUT_PC_addressReturnOut_V_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_addressReturnOut_V_V.dat"
// tvout file define: "flushReq_V"
#define AUTOTB_TVOUT_PC_flushReq_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_flushReq_V.dat"
// tvout file define: "flushDone_V"
#define AUTOTB_TVOUT_PC_flushDone_V  "../tv/rtldatafile/rtl.memcachedPipeline.autotvout_flushDone_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			inData_V_data_V_depth = 0;
			inData_V_user_V_depth = 0;
			inData_V_keep_V_depth = 0;
			inData_V_last_V_depth = 0;
			outData_V_data_V_depth = 0;
			outData_V_user_V_depth = 0;
			outData_V_keep_V_depth = 0;
			outData_V_last_V_depth = 0;
			dramValueStoreMemRdCmd_V_depth = 0;
			dramValueStoreMemRdData_V_V_depth = 0;
			dramValueStoreMemWrCmd_V_depth = 0;
			dramValueStoreMemWrData_V_V_depth = 0;
			flashValueStoreMemRdCmd_V_depth = 0;
			flashValueStoreMemRdData_V_V_depth = 0;
			flashValueStoreMemWrCmd_V_depth = 0;
			flashValueStoreMemWrData_V_V_depth = 0;
			hashTableMemRdData_V_V_depth = 0;
			hashTableMemRdCmd_V_depth = 0;
			hashTableMemWrData_V_V_depth = 0;
			hashTableMemWrCmd_V_depth = 0;
			addressReturnOut_V_V_depth = 0;
			addressAssignDramIn_V_V_depth = 0;
			addressAssignFlashIn_V_V_depth = 0;
			flushReq_V_depth = 0;
			flushAck_V_depth = 0;
			flushDone_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{inData_V_data_V " << inData_V_data_V_depth << "}\n";
			total_list << "{inData_V_user_V " << inData_V_user_V_depth << "}\n";
			total_list << "{inData_V_keep_V " << inData_V_keep_V_depth << "}\n";
			total_list << "{inData_V_last_V " << inData_V_last_V_depth << "}\n";
			total_list << "{outData_V_data_V " << outData_V_data_V_depth << "}\n";
			total_list << "{outData_V_user_V " << outData_V_user_V_depth << "}\n";
			total_list << "{outData_V_keep_V " << outData_V_keep_V_depth << "}\n";
			total_list << "{outData_V_last_V " << outData_V_last_V_depth << "}\n";
			total_list << "{dramValueStoreMemRdCmd_V " << dramValueStoreMemRdCmd_V_depth << "}\n";
			total_list << "{dramValueStoreMemRdData_V_V " << dramValueStoreMemRdData_V_V_depth << "}\n";
			total_list << "{dramValueStoreMemWrCmd_V " << dramValueStoreMemWrCmd_V_depth << "}\n";
			total_list << "{dramValueStoreMemWrData_V_V " << dramValueStoreMemWrData_V_V_depth << "}\n";
			total_list << "{flashValueStoreMemRdCmd_V " << flashValueStoreMemRdCmd_V_depth << "}\n";
			total_list << "{flashValueStoreMemRdData_V_V " << flashValueStoreMemRdData_V_V_depth << "}\n";
			total_list << "{flashValueStoreMemWrCmd_V " << flashValueStoreMemWrCmd_V_depth << "}\n";
			total_list << "{flashValueStoreMemWrData_V_V " << flashValueStoreMemWrData_V_V_depth << "}\n";
			total_list << "{hashTableMemRdData_V_V " << hashTableMemRdData_V_V_depth << "}\n";
			total_list << "{hashTableMemRdCmd_V " << hashTableMemRdCmd_V_depth << "}\n";
			total_list << "{hashTableMemWrData_V_V " << hashTableMemWrData_V_V_depth << "}\n";
			total_list << "{hashTableMemWrCmd_V " << hashTableMemWrCmd_V_depth << "}\n";
			total_list << "{addressReturnOut_V_V " << addressReturnOut_V_V_depth << "}\n";
			total_list << "{addressAssignDramIn_V_V " << addressAssignDramIn_V_V_depth << "}\n";
			total_list << "{addressAssignFlashIn_V_V " << addressAssignFlashIn_V_V_depth << "}\n";
			total_list << "{flushReq_V " << flushReq_V_depth << "}\n";
			total_list << "{flushAck_V " << flushAck_V_depth << "}\n";
			total_list << "{flushDone_V " << flushDone_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int inData_V_data_V_depth;
		int inData_V_user_V_depth;
		int inData_V_keep_V_depth;
		int inData_V_last_V_depth;
		int outData_V_data_V_depth;
		int outData_V_user_V_depth;
		int outData_V_keep_V_depth;
		int outData_V_last_V_depth;
		int dramValueStoreMemRdCmd_V_depth;
		int dramValueStoreMemRdData_V_V_depth;
		int dramValueStoreMemWrCmd_V_depth;
		int dramValueStoreMemWrData_V_V_depth;
		int flashValueStoreMemRdCmd_V_depth;
		int flashValueStoreMemRdData_V_V_depth;
		int flashValueStoreMemWrCmd_V_depth;
		int flashValueStoreMemWrData_V_V_depth;
		int hashTableMemRdData_V_V_depth;
		int hashTableMemRdCmd_V_depth;
		int hashTableMemWrData_V_V_depth;
		int hashTableMemWrCmd_V_depth;
		int addressReturnOut_V_V_depth;
		int addressAssignDramIn_V_V_depth;
		int addressAssignFlashIn_V_V_depth;
		int flushReq_V_depth;
		int flushAck_V_depth;
		int flushDone_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void memcachedPipeline (
hls::stream<extendedAxiWord > (&inData),
hls::stream<extendedAxiWord > (&outData),
hls::stream<memCtrlWord > (&dramValueStoreMemRdCmd),
hls::stream<ap_uint<512> > (&dramValueStoreMemRdData),
hls::stream<memCtrlWord > (&dramValueStoreMemWrCmd),
hls::stream<ap_uint<512> > (&dramValueStoreMemWrData),
hls::stream<flashMemCtrlWord > (&flashValueStoreMemRdCmd),
hls::stream<ap_uint<64> > (&flashValueStoreMemRdData),
hls::stream<flashMemCtrlWord > (&flashValueStoreMemWrCmd),
hls::stream<ap_uint<64> > (&flashValueStoreMemWrData),
hls::stream<ap_uint<512> > (&hashTableMemRdData),
hls::stream<memCtrlWord > (&hashTableMemRdCmd),
hls::stream<ap_uint<512> > (&hashTableMemWrData),
hls::stream<memCtrlWord > (&hashTableMemWrCmd),
hls::stream<ap_uint<32> > (&addressReturnOut),
hls::stream<ap_uint<32> > (&addressAssignDramIn),
hls::stream<ap_uint<32> > (&addressAssignFlashIn),
ap_uint<1> (&flushReq),
ap_uint<1> flushAck,
ap_uint<1> (&flushDone));

void AESL_WRAP_memcachedPipeline (
hls::stream<extendedAxiWord > (&inData),
hls::stream<extendedAxiWord > (&outData),
hls::stream<memCtrlWord > (&dramValueStoreMemRdCmd),
hls::stream<ap_uint<512> > (&dramValueStoreMemRdData),
hls::stream<memCtrlWord > (&dramValueStoreMemWrCmd),
hls::stream<ap_uint<512> > (&dramValueStoreMemWrData),
hls::stream<flashMemCtrlWord > (&flashValueStoreMemRdCmd),
hls::stream<ap_uint<64> > (&flashValueStoreMemRdData),
hls::stream<flashMemCtrlWord > (&flashValueStoreMemWrCmd),
hls::stream<ap_uint<64> > (&flashValueStoreMemWrData),
hls::stream<ap_uint<512> > (&hashTableMemRdData),
hls::stream<memCtrlWord > (&hashTableMemRdCmd),
hls::stream<ap_uint<512> > (&hashTableMemWrData),
hls::stream<memCtrlWord > (&hashTableMemWrCmd),
hls::stream<ap_uint<32> > (&addressReturnOut),
hls::stream<ap_uint<32> > (&addressAssignDramIn),
hls::stream<ap_uint<32> > (&addressAssignFlashIn),
ap_uint<1> (&flushReq),
ap_uint<1> flushAck,
ap_uint<1> (&flushDone))
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;

		// pop stream input: "inData"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_inData_V_data_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_inData_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_inData_V_data_V, AESL_token); // pop_size
			int aesl_tmp_1 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_1; i++)
			{
				inData.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_inData_V_data_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "outData"
		std::vector<extendedAxiWord > aesl_tmp_3;
		int aesl_tmp_4;
		int aesl_tmp_5 = 0;

		// read output stream size: "outData"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_outData_V_data_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_outData_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_outData_V_data_V, AESL_token); // pop_size
			aesl_tmp_4 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_outData_V_data_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "dramValueStoreMemRdCmd"
		std::vector<memCtrlWord > aesl_tmp_6;
		int aesl_tmp_7;
		int aesl_tmp_8 = 0;

		// read output stream size: "dramValueStoreMemRdCmd"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemRdCmd_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemRdCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemRdCmd_V, AESL_token); // pop_size
			aesl_tmp_7 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemRdCmd_V, AESL_token); // [[/transaction]]
		}

		// pop stream input: "dramValueStoreMemRdData"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_dramValueStoreMemRdData_V_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_dramValueStoreMemRdData_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_dramValueStoreMemRdData_V_V, AESL_token); // pop_size
			int aesl_tmp_10 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_10; i++)
			{
				dramValueStoreMemRdData.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_dramValueStoreMemRdData_V_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "dramValueStoreMemWrCmd"
		std::vector<memCtrlWord > aesl_tmp_12;
		int aesl_tmp_13;
		int aesl_tmp_14 = 0;

		// read output stream size: "dramValueStoreMemWrCmd"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrCmd_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrCmd_V, AESL_token); // pop_size
			aesl_tmp_13 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrCmd_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "dramValueStoreMemWrData"
		std::vector<ap_uint<512> > aesl_tmp_15;
		int aesl_tmp_16;
		int aesl_tmp_17 = 0;

		// read output stream size: "dramValueStoreMemWrData"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrData_V_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrData_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrData_V_V, AESL_token); // pop_size
			aesl_tmp_16 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrData_V_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "flashValueStoreMemRdCmd"
		std::vector<flashMemCtrlWord > aesl_tmp_18;
		int aesl_tmp_19;
		int aesl_tmp_20 = 0;

		// read output stream size: "flashValueStoreMemRdCmd"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemRdCmd_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemRdCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemRdCmd_V, AESL_token); // pop_size
			aesl_tmp_19 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemRdCmd_V, AESL_token); // [[/transaction]]
		}

		// pop stream input: "flashValueStoreMemRdData"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_flashValueStoreMemRdData_V_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_flashValueStoreMemRdData_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_flashValueStoreMemRdData_V_V, AESL_token); // pop_size
			int aesl_tmp_22 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_22; i++)
			{
				flashValueStoreMemRdData.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_flashValueStoreMemRdData_V_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "flashValueStoreMemWrCmd"
		std::vector<flashMemCtrlWord > aesl_tmp_24;
		int aesl_tmp_25;
		int aesl_tmp_26 = 0;

		// read output stream size: "flashValueStoreMemWrCmd"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrCmd_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrCmd_V, AESL_token); // pop_size
			aesl_tmp_25 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrCmd_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "flashValueStoreMemWrData"
		std::vector<ap_uint<64> > aesl_tmp_27;
		int aesl_tmp_28;
		int aesl_tmp_29 = 0;

		// read output stream size: "flashValueStoreMemWrData"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrData_V_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrData_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrData_V_V, AESL_token); // pop_size
			aesl_tmp_28 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrData_V_V, AESL_token); // [[/transaction]]
		}

		// pop stream input: "hashTableMemRdData"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_hashTableMemRdData_V_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_hashTableMemRdData_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_hashTableMemRdData_V_V, AESL_token); // pop_size
			int aesl_tmp_31 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_31; i++)
			{
				hashTableMemRdData.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_hashTableMemRdData_V_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "hashTableMemRdCmd"
		std::vector<memCtrlWord > aesl_tmp_33;
		int aesl_tmp_34;
		int aesl_tmp_35 = 0;

		// read output stream size: "hashTableMemRdCmd"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemRdCmd_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemRdCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemRdCmd_V, AESL_token); // pop_size
			aesl_tmp_34 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemRdCmd_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "hashTableMemWrData"
		std::vector<ap_uint<512> > aesl_tmp_36;
		int aesl_tmp_37;
		int aesl_tmp_38 = 0;

		// read output stream size: "hashTableMemWrData"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemWrData_V_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemWrData_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemWrData_V_V, AESL_token); // pop_size
			aesl_tmp_37 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemWrData_V_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "hashTableMemWrCmd"
		std::vector<memCtrlWord > aesl_tmp_39;
		int aesl_tmp_40;
		int aesl_tmp_41 = 0;

		// read output stream size: "hashTableMemWrCmd"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemWrCmd_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemWrCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemWrCmd_V, AESL_token); // pop_size
			aesl_tmp_40 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_hashTableMemWrCmd_V, AESL_token); // [[/transaction]]
		}

		// define output stream variables: "addressReturnOut"
		std::vector<ap_uint<32> > aesl_tmp_42;
		int aesl_tmp_43;
		int aesl_tmp_44 = 0;

		// read output stream size: "addressReturnOut"
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_addressReturnOut_V_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_OUT_addressReturnOut_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_addressReturnOut_V_V, AESL_token); // pop_size
			aesl_tmp_43 = atoi(AESL_token.c_str());
			aesl_fh.read(WRAPC_STREAM_SIZE_OUT_addressReturnOut_V_V, AESL_token); // [[/transaction]]
		}

		// pop stream input: "addressAssignDramIn"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_addressAssignDramIn_V_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_addressAssignDramIn_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_addressAssignDramIn_V_V, AESL_token); // pop_size
			int aesl_tmp_46 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_46; i++)
			{
				addressAssignDramIn.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_addressAssignDramIn_V_V, AESL_token); // [[/transaction]]
		}

		// pop stream input: "addressAssignFlashIn"
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_addressAssignFlashIn_V_V, AESL_token); // [[transaction]]
		aesl_fh.read(WRAPC_STREAM_SIZE_IN_addressAssignFlashIn_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_addressAssignFlashIn_V_V, AESL_token); // pop_size
			int aesl_tmp_49 = atoi(AESL_token.c_str());
			for (int i = 0; i < aesl_tmp_49; i++)
			{
				addressAssignFlashIn.read();
			}
			aesl_fh.read(WRAPC_STREAM_SIZE_IN_addressAssignFlashIn_V_V, AESL_token); // [[/transaction]]
		}

		// output port post check: "outData_V_data_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_data_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_data_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_data_V, AESL_token); // data

			std::vector<sc_bv<64> > outData_V_data_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'outData_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'outData_V_data_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					outData_V_data_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_data_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_outData_V_data_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_4)
			{
				aesl_tmp_4 = i;
			}

			if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4)
			{
				int aesl_tmp_3_size = aesl_tmp_3.size();

				for (int tmp_aesl_tmp_3 = 0; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size; tmp_aesl_tmp_3++)
				{
					extendedAxiWord tmp;
					aesl_tmp_3.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: outData_V_data_V
				{
					// bitslice(63, 0)
					// {
						// celement: outData.V.data.V(63, 0)
						// {
							sc_lv<64>* outData_V_data_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<64>[aesl_tmp_4 - aesl_tmp_5];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: outData.V.data.V(63, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_3[0].data) != NULL) // check the null address if the c port is array or others
									{
										outData_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(63, 0) = sc_bv<64>(outData_V_data_V_pc_buffer[hls_map_index].range(63, 0));
										hls_map_index++;
									}
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: outData.V.data.V(63, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_3[i_0].data
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_3[0].data
									// output_left_conversion : aesl_tmp_3[i_0].data
									// output_type_conversion : (outData_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_3[0].data) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_3[i_0].data = (outData_V_data_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "outData_V_user_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_user_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_user_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_user_V, AESL_token); // data

			std::vector<sc_bv<112> > outData_V_user_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'outData_V_user_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'outData_V_user_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					outData_V_user_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_user_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_outData_V_user_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_4)
			{
				aesl_tmp_4 = i;
			}

			if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4)
			{
				int aesl_tmp_3_size = aesl_tmp_3.size();

				for (int tmp_aesl_tmp_3 = 0; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size; tmp_aesl_tmp_3++)
				{
					extendedAxiWord tmp;
					aesl_tmp_3.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: outData_V_user_V
				{
					// bitslice(111, 0)
					// {
						// celement: outData.V.user.V(111, 0)
						// {
							sc_lv<112>* outData_V_user_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<112>[aesl_tmp_4 - aesl_tmp_5];
						// }
					// }

					// bitslice(111, 0)
					{
						int hls_map_index = 0;
						// celement: outData.V.user.V(111, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_3[0].user) != NULL) // check the null address if the c port is array or others
									{
										outData_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(111, 0) = sc_bv<112>(outData_V_user_V_pc_buffer[hls_map_index].range(111, 0));
										hls_map_index++;
									}
								}
							}
						}
					}

					// bitslice(111, 0)
					{
						int hls_map_index = 0;
						// celement: outData.V.user.V(111, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_3[i_0].user
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_3[0].user
									// output_left_conversion : aesl_tmp_3[i_0].user
									// output_type_conversion : (outData_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_3[0].user) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_3[i_0].user = (outData_V_user_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "outData_V_keep_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_keep_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_keep_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_keep_V, AESL_token); // data

			std::vector<sc_bv<8> > outData_V_keep_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'outData_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'outData_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					outData_V_keep_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_keep_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_outData_V_keep_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_4)
			{
				aesl_tmp_4 = i;
			}

			if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4)
			{
				int aesl_tmp_3_size = aesl_tmp_3.size();

				for (int tmp_aesl_tmp_3 = 0; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size; tmp_aesl_tmp_3++)
				{
					extendedAxiWord tmp;
					aesl_tmp_3.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: outData_V_keep_V
				{
					// bitslice(7, 0)
					// {
						// celement: outData.V.keep.V(7, 0)
						// {
							sc_lv<8>* outData_V_keep_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<8>[aesl_tmp_4 - aesl_tmp_5];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: outData.V.keep.V(7, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_3[0].keep) != NULL) // check the null address if the c port is array or others
									{
										outData_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(7, 0) = sc_bv<8>(outData_V_keep_V_pc_buffer[hls_map_index].range(7, 0));
										hls_map_index++;
									}
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: outData.V.keep.V(7, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_3[i_0].keep
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_3[0].keep
									// output_left_conversion : aesl_tmp_3[i_0].keep
									// output_type_conversion : (outData_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_3[0].keep) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_3[i_0].keep = (outData_V_keep_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "outData_V_last_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_last_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_last_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_last_V, AESL_token); // data

			std::vector<sc_bv<1> > outData_V_last_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'outData_V_last_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'outData_V_last_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					outData_V_last_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_outData_V_last_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_outData_V_last_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_4)
			{
				aesl_tmp_4 = i;
			}

			if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4)
			{
				int aesl_tmp_3_size = aesl_tmp_3.size();

				for (int tmp_aesl_tmp_3 = 0; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size; tmp_aesl_tmp_3++)
				{
					extendedAxiWord tmp;
					aesl_tmp_3.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: outData_V_last_V
				{
					// bitslice(0, 0)
					// {
						// celement: outData.V.last.V(0, 0)
						// {
							sc_lv<1>* outData_V_last_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<1>[aesl_tmp_4 - aesl_tmp_5];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: outData.V.last.V(0, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_3[0].last) != NULL) // check the null address if the c port is array or others
									{
										outData_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(0, 0) = sc_bv<1>(outData_V_last_V_pc_buffer[hls_map_index].range(0, 0));
										hls_map_index++;
									}
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: outData.V.last.V(0, 0)
						{
							// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
							for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_3[i_0].last
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_3[0].last
									// output_left_conversion : aesl_tmp_3[i_0].last
									// output_type_conversion : (outData_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_3[0].last) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_3[i_0].last = (outData_V_last_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "dramValueStoreMemRdCmd_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemRdCmd_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemRdCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemRdCmd_V, AESL_token); // data

			std::vector<sc_bv<40> > dramValueStoreMemRdCmd_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dramValueStoreMemRdCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dramValueStoreMemRdCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dramValueStoreMemRdCmd_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemRdCmd_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dramValueStoreMemRdCmd_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_7)
			{
				aesl_tmp_7 = i;
			}

			if (aesl_tmp_7 > 0 && aesl_tmp_6.size() < aesl_tmp_7)
			{
				int aesl_tmp_6_size = aesl_tmp_6.size();

				for (int tmp_aesl_tmp_6 = 0; tmp_aesl_tmp_6 < aesl_tmp_7 - aesl_tmp_6_size; tmp_aesl_tmp_6++)
				{
					memCtrlWord tmp;
					aesl_tmp_6.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dramValueStoreMemRdCmd_V
				{
					// bitslice(31, 0)
					// {
						// celement: dramValueStoreMemRdCmd.V.address.V(31, 0)
						// {
							sc_lv<32>* dramValueStoreMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_7 - aesl_tmp_8];
						// }
					// }
					// bitslice(39, 32)
					// {
						// celement: dramValueStoreMemRdCmd.V.count.V(7, 0)
						// {
							sc_lv<8>* dramValueStoreMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<8>[aesl_tmp_7 - aesl_tmp_8];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dramValueStoreMemRdCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_8) => (aesl_tmp_7 - 1) @ (1)
							for (int i_0 = aesl_tmp_8; i_0 <= aesl_tmp_7 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_6[0].address) != NULL) // check the null address if the c port is array or others
									{
										dramValueStoreMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(31, 0) = sc_bv<32>(dramValueStoreMemRdCmd_V_pc_buffer[hls_map_index].range(31, 0));
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(39, 32)
					{
						int hls_map_index = 0;
						// celement: dramValueStoreMemRdCmd.V.count.V(7, 0)
						{
							// carray: (aesl_tmp_8) => (aesl_tmp_7 - 1) @ (1)
							for (int i_0 = aesl_tmp_8; i_0 <= aesl_tmp_7 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_6[0].count) != NULL) // check the null address if the c port is array or others
									{
										dramValueStoreMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(7, 0) = sc_bv<8>(dramValueStoreMemRdCmd_V_pc_buffer[hls_map_index].range(39, 32));
										hls_map_index++;
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dramValueStoreMemRdCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_8) => (aesl_tmp_7 - 1) @ (1)
							for (int i_0 = aesl_tmp_8; i_0 <= aesl_tmp_7 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_6[i_0].address
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_6[0].address
									// output_left_conversion : aesl_tmp_6[i_0].address
									// output_type_conversion : (dramValueStoreMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_6[0].address) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_6[i_0].address = (dramValueStoreMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(39, 32)
					{
						int hls_map_index = 0;
						// celement: dramValueStoreMemRdCmd.V.count.V(7, 0)
						{
							// carray: (aesl_tmp_8) => (aesl_tmp_7 - 1) @ (1)
							for (int i_0 = aesl_tmp_8; i_0 <= aesl_tmp_7 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_6[i_0].count
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_6[0].count
									// output_left_conversion : aesl_tmp_6[i_0].count
									// output_type_conversion : (dramValueStoreMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_6[0].count) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_6[i_0].count = (dramValueStoreMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "dramValueStoreMemWrCmd_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemWrCmd_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemWrCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemWrCmd_V, AESL_token); // data

			std::vector<sc_bv<40> > dramValueStoreMemWrCmd_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dramValueStoreMemWrCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dramValueStoreMemWrCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dramValueStoreMemWrCmd_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemWrCmd_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dramValueStoreMemWrCmd_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_13)
			{
				aesl_tmp_13 = i;
			}

			if (aesl_tmp_13 > 0 && aesl_tmp_12.size() < aesl_tmp_13)
			{
				int aesl_tmp_12_size = aesl_tmp_12.size();

				for (int tmp_aesl_tmp_12 = 0; tmp_aesl_tmp_12 < aesl_tmp_13 - aesl_tmp_12_size; tmp_aesl_tmp_12++)
				{
					memCtrlWord tmp;
					aesl_tmp_12.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dramValueStoreMemWrCmd_V
				{
					// bitslice(31, 0)
					// {
						// celement: dramValueStoreMemWrCmd.V.address.V(31, 0)
						// {
							sc_lv<32>* dramValueStoreMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_13 - aesl_tmp_14];
						// }
					// }
					// bitslice(39, 32)
					// {
						// celement: dramValueStoreMemWrCmd.V.count.V(7, 0)
						// {
							sc_lv<8>* dramValueStoreMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<8>[aesl_tmp_13 - aesl_tmp_14];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dramValueStoreMemWrCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_12[0].address) != NULL) // check the null address if the c port is array or others
									{
										dramValueStoreMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(31, 0) = sc_bv<32>(dramValueStoreMemWrCmd_V_pc_buffer[hls_map_index].range(31, 0));
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(39, 32)
					{
						int hls_map_index = 0;
						// celement: dramValueStoreMemWrCmd.V.count.V(7, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_12[0].count) != NULL) // check the null address if the c port is array or others
									{
										dramValueStoreMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(7, 0) = sc_bv<8>(dramValueStoreMemWrCmd_V_pc_buffer[hls_map_index].range(39, 32));
										hls_map_index++;
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: dramValueStoreMemWrCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_12[i_0].address
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_12[0].address
									// output_left_conversion : aesl_tmp_12[i_0].address
									// output_type_conversion : (dramValueStoreMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_12[0].address) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_12[i_0].address = (dramValueStoreMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(39, 32)
					{
						int hls_map_index = 0;
						// celement: dramValueStoreMemWrCmd.V.count.V(7, 0)
						{
							// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
							for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_12[i_0].count
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_12[0].count
									// output_left_conversion : aesl_tmp_12[i_0].count
									// output_type_conversion : (dramValueStoreMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_12[0].count) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_12[i_0].count = (dramValueStoreMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "dramValueStoreMemWrData_V_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemWrData_V_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemWrData_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemWrData_V_V, AESL_token); // data

			std::vector<sc_bv<512> > dramValueStoreMemWrData_V_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dramValueStoreMemWrData_V_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'dramValueStoreMemWrData_V_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					dramValueStoreMemWrData_V_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_dramValueStoreMemWrData_V_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_dramValueStoreMemWrData_V_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_16)
			{
				aesl_tmp_16 = i;
			}

			if (aesl_tmp_16 > 0 && aesl_tmp_15.size() < aesl_tmp_16)
			{
				int aesl_tmp_15_size = aesl_tmp_15.size();

				for (int tmp_aesl_tmp_15 = 0; tmp_aesl_tmp_15 < aesl_tmp_16 - aesl_tmp_15_size; tmp_aesl_tmp_15++)
				{
					ap_uint<512> tmp;
					aesl_tmp_15.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: dramValueStoreMemWrData_V_V
				{
					// bitslice(511, 0)
					// {
						// celement: dramValueStoreMemWrData.V.V(511, 0)
						// {
							sc_lv<512>* dramValueStoreMemWrData_V_V_lv0_0_0_1 = new sc_lv<512>[aesl_tmp_16 - aesl_tmp_17];
						// }
					// }

					// bitslice(511, 0)
					{
						int hls_map_index = 0;
						// celement: dramValueStoreMemWrData.V.V(511, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								if (&(aesl_tmp_15[0]) != NULL) // check the null address if the c port is array or others
								{
									dramValueStoreMemWrData_V_V_lv0_0_0_1[hls_map_index].range(511, 0) = sc_bv<512>(dramValueStoreMemWrData_V_V_pc_buffer[hls_map_index].range(511, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(511, 0)
					{
						int hls_map_index = 0;
						// celement: dramValueStoreMemWrData.V.V(511, 0)
						{
							// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
							for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : aesl_tmp_15[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : aesl_tmp_15[0]
								// output_left_conversion : aesl_tmp_15[i_0]
								// output_type_conversion : (dramValueStoreMemWrData_V_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(aesl_tmp_15[0]) != NULL) // check the null address if the c port is array or others
								{
									aesl_tmp_15[i_0] = (dramValueStoreMemWrData_V_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "flashValueStoreMemRdCmd_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemRdCmd_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemRdCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemRdCmd_V, AESL_token); // data

			std::vector<sc_bv<48> > flashValueStoreMemRdCmd_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'flashValueStoreMemRdCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'flashValueStoreMemRdCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					flashValueStoreMemRdCmd_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemRdCmd_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_flashValueStoreMemRdCmd_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_19)
			{
				aesl_tmp_19 = i;
			}

			if (aesl_tmp_19 > 0 && aesl_tmp_18.size() < aesl_tmp_19)
			{
				int aesl_tmp_18_size = aesl_tmp_18.size();

				for (int tmp_aesl_tmp_18 = 0; tmp_aesl_tmp_18 < aesl_tmp_19 - aesl_tmp_18_size; tmp_aesl_tmp_18++)
				{
					flashMemCtrlWord tmp;
					aesl_tmp_18.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: flashValueStoreMemRdCmd_V
				{
					// bitslice(31, 0)
					// {
						// celement: flashValueStoreMemRdCmd.V.address.V(31, 0)
						// {
							sc_lv<32>* flashValueStoreMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_19 - aesl_tmp_20];
						// }
					// }
					// bitslice(44, 32)
					// {
						// celement: flashValueStoreMemRdCmd.V.count.V(12, 0)
						// {
							sc_lv<13>* flashValueStoreMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<13>[aesl_tmp_19 - aesl_tmp_20];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: flashValueStoreMemRdCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_20) => (aesl_tmp_19 - 1) @ (1)
							for (int i_0 = aesl_tmp_20; i_0 <= aesl_tmp_19 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_18[0].address) != NULL) // check the null address if the c port is array or others
									{
										flashValueStoreMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(31, 0) = sc_bv<32>(flashValueStoreMemRdCmd_V_pc_buffer[hls_map_index].range(31, 0));
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(44, 32)
					{
						int hls_map_index = 0;
						// celement: flashValueStoreMemRdCmd.V.count.V(12, 0)
						{
							// carray: (aesl_tmp_20) => (aesl_tmp_19 - 1) @ (1)
							for (int i_0 = aesl_tmp_20; i_0 <= aesl_tmp_19 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_18[0].count) != NULL) // check the null address if the c port is array or others
									{
										flashValueStoreMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(12, 0) = sc_bv<13>(flashValueStoreMemRdCmd_V_pc_buffer[hls_map_index].range(44, 32));
										hls_map_index++;
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: flashValueStoreMemRdCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_20) => (aesl_tmp_19 - 1) @ (1)
							for (int i_0 = aesl_tmp_20; i_0 <= aesl_tmp_19 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_18[i_0].address
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_18[0].address
									// output_left_conversion : aesl_tmp_18[i_0].address
									// output_type_conversion : (flashValueStoreMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_18[0].address) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_18[i_0].address = (flashValueStoreMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(44, 32)
					{
						int hls_map_index = 0;
						// celement: flashValueStoreMemRdCmd.V.count.V(12, 0)
						{
							// carray: (aesl_tmp_20) => (aesl_tmp_19 - 1) @ (1)
							for (int i_0 = aesl_tmp_20; i_0 <= aesl_tmp_19 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_18[i_0].count
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_18[0].count
									// output_left_conversion : aesl_tmp_18[i_0].count
									// output_type_conversion : (flashValueStoreMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_18[0].count) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_18[i_0].count = (flashValueStoreMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "flashValueStoreMemWrCmd_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemWrCmd_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemWrCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemWrCmd_V, AESL_token); // data

			std::vector<sc_bv<48> > flashValueStoreMemWrCmd_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'flashValueStoreMemWrCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'flashValueStoreMemWrCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					flashValueStoreMemWrCmd_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemWrCmd_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_flashValueStoreMemWrCmd_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_25)
			{
				aesl_tmp_25 = i;
			}

			if (aesl_tmp_25 > 0 && aesl_tmp_24.size() < aesl_tmp_25)
			{
				int aesl_tmp_24_size = aesl_tmp_24.size();

				for (int tmp_aesl_tmp_24 = 0; tmp_aesl_tmp_24 < aesl_tmp_25 - aesl_tmp_24_size; tmp_aesl_tmp_24++)
				{
					flashMemCtrlWord tmp;
					aesl_tmp_24.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: flashValueStoreMemWrCmd_V
				{
					// bitslice(31, 0)
					// {
						// celement: flashValueStoreMemWrCmd.V.address.V(31, 0)
						// {
							sc_lv<32>* flashValueStoreMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_25 - aesl_tmp_26];
						// }
					// }
					// bitslice(44, 32)
					// {
						// celement: flashValueStoreMemWrCmd.V.count.V(12, 0)
						// {
							sc_lv<13>* flashValueStoreMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<13>[aesl_tmp_25 - aesl_tmp_26];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: flashValueStoreMemWrCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_26) => (aesl_tmp_25 - 1) @ (1)
							for (int i_0 = aesl_tmp_26; i_0 <= aesl_tmp_25 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_24[0].address) != NULL) // check the null address if the c port is array or others
									{
										flashValueStoreMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(31, 0) = sc_bv<32>(flashValueStoreMemWrCmd_V_pc_buffer[hls_map_index].range(31, 0));
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(44, 32)
					{
						int hls_map_index = 0;
						// celement: flashValueStoreMemWrCmd.V.count.V(12, 0)
						{
							// carray: (aesl_tmp_26) => (aesl_tmp_25 - 1) @ (1)
							for (int i_0 = aesl_tmp_26; i_0 <= aesl_tmp_25 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_24[0].count) != NULL) // check the null address if the c port is array or others
									{
										flashValueStoreMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(12, 0) = sc_bv<13>(flashValueStoreMemWrCmd_V_pc_buffer[hls_map_index].range(44, 32));
										hls_map_index++;
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: flashValueStoreMemWrCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_26) => (aesl_tmp_25 - 1) @ (1)
							for (int i_0 = aesl_tmp_26; i_0 <= aesl_tmp_25 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_24[i_0].address
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_24[0].address
									// output_left_conversion : aesl_tmp_24[i_0].address
									// output_type_conversion : (flashValueStoreMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_24[0].address) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_24[i_0].address = (flashValueStoreMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(44, 32)
					{
						int hls_map_index = 0;
						// celement: flashValueStoreMemWrCmd.V.count.V(12, 0)
						{
							// carray: (aesl_tmp_26) => (aesl_tmp_25 - 1) @ (1)
							for (int i_0 = aesl_tmp_26; i_0 <= aesl_tmp_25 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_24[i_0].count
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_24[0].count
									// output_left_conversion : aesl_tmp_24[i_0].count
									// output_type_conversion : (flashValueStoreMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_24[0].count) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_24[i_0].count = (flashValueStoreMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "flashValueStoreMemWrData_V_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemWrData_V_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemWrData_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemWrData_V_V, AESL_token); // data

			std::vector<sc_bv<64> > flashValueStoreMemWrData_V_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'flashValueStoreMemWrData_V_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'flashValueStoreMemWrData_V_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					flashValueStoreMemWrData_V_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_flashValueStoreMemWrData_V_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_flashValueStoreMemWrData_V_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_28)
			{
				aesl_tmp_28 = i;
			}

			if (aesl_tmp_28 > 0 && aesl_tmp_27.size() < aesl_tmp_28)
			{
				int aesl_tmp_27_size = aesl_tmp_27.size();

				for (int tmp_aesl_tmp_27 = 0; tmp_aesl_tmp_27 < aesl_tmp_28 - aesl_tmp_27_size; tmp_aesl_tmp_27++)
				{
					ap_uint<64> tmp;
					aesl_tmp_27.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: flashValueStoreMemWrData_V_V
				{
					// bitslice(63, 0)
					// {
						// celement: flashValueStoreMemWrData.V.V(63, 0)
						// {
							sc_lv<64>* flashValueStoreMemWrData_V_V_lv0_0_0_1 = new sc_lv<64>[aesl_tmp_28 - aesl_tmp_29];
						// }
					// }

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: flashValueStoreMemWrData.V.V(63, 0)
						{
							// carray: (aesl_tmp_29) => (aesl_tmp_28 - 1) @ (1)
							for (int i_0 = aesl_tmp_29; i_0 <= aesl_tmp_28 - 1; i_0 += 1)
							{
								if (&(aesl_tmp_27[0]) != NULL) // check the null address if the c port is array or others
								{
									flashValueStoreMemWrData_V_V_lv0_0_0_1[hls_map_index].range(63, 0) = sc_bv<64>(flashValueStoreMemWrData_V_V_pc_buffer[hls_map_index].range(63, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(63, 0)
					{
						int hls_map_index = 0;
						// celement: flashValueStoreMemWrData.V.V(63, 0)
						{
							// carray: (aesl_tmp_29) => (aesl_tmp_28 - 1) @ (1)
							for (int i_0 = aesl_tmp_29; i_0 <= aesl_tmp_28 - 1; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : aesl_tmp_27[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : aesl_tmp_27[0]
								// output_left_conversion : aesl_tmp_27[i_0]
								// output_type_conversion : (flashValueStoreMemWrData_V_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(aesl_tmp_27[0]) != NULL) // check the null address if the c port is array or others
								{
									aesl_tmp_27[i_0] = (flashValueStoreMemWrData_V_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "hashTableMemRdCmd_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemRdCmd_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemRdCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemRdCmd_V, AESL_token); // data

			std::vector<sc_bv<40> > hashTableMemRdCmd_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'hashTableMemRdCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'hashTableMemRdCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					hashTableMemRdCmd_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemRdCmd_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_hashTableMemRdCmd_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_34)
			{
				aesl_tmp_34 = i;
			}

			if (aesl_tmp_34 > 0 && aesl_tmp_33.size() < aesl_tmp_34)
			{
				int aesl_tmp_33_size = aesl_tmp_33.size();

				for (int tmp_aesl_tmp_33 = 0; tmp_aesl_tmp_33 < aesl_tmp_34 - aesl_tmp_33_size; tmp_aesl_tmp_33++)
				{
					memCtrlWord tmp;
					aesl_tmp_33.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: hashTableMemRdCmd_V
				{
					// bitslice(31, 0)
					// {
						// celement: hashTableMemRdCmd.V.address.V(31, 0)
						// {
							sc_lv<32>* hashTableMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_34 - aesl_tmp_35];
						// }
					// }
					// bitslice(39, 32)
					// {
						// celement: hashTableMemRdCmd.V.count.V(7, 0)
						// {
							sc_lv<8>* hashTableMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<8>[aesl_tmp_34 - aesl_tmp_35];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: hashTableMemRdCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_35) => (aesl_tmp_34 - 1) @ (1)
							for (int i_0 = aesl_tmp_35; i_0 <= aesl_tmp_34 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_33[0].address) != NULL) // check the null address if the c port is array or others
									{
										hashTableMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(31, 0) = sc_bv<32>(hashTableMemRdCmd_V_pc_buffer[hls_map_index].range(31, 0));
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(39, 32)
					{
						int hls_map_index = 0;
						// celement: hashTableMemRdCmd.V.count.V(7, 0)
						{
							// carray: (aesl_tmp_35) => (aesl_tmp_34 - 1) @ (1)
							for (int i_0 = aesl_tmp_35; i_0 <= aesl_tmp_34 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_33[0].count) != NULL) // check the null address if the c port is array or others
									{
										hashTableMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(7, 0) = sc_bv<8>(hashTableMemRdCmd_V_pc_buffer[hls_map_index].range(39, 32));
										hls_map_index++;
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: hashTableMemRdCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_35) => (aesl_tmp_34 - 1) @ (1)
							for (int i_0 = aesl_tmp_35; i_0 <= aesl_tmp_34 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_33[i_0].address
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_33[0].address
									// output_left_conversion : aesl_tmp_33[i_0].address
									// output_type_conversion : (hashTableMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_33[0].address) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_33[i_0].address = (hashTableMemRdCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(39, 32)
					{
						int hls_map_index = 0;
						// celement: hashTableMemRdCmd.V.count.V(7, 0)
						{
							// carray: (aesl_tmp_35) => (aesl_tmp_34 - 1) @ (1)
							for (int i_0 = aesl_tmp_35; i_0 <= aesl_tmp_34 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_33[i_0].count
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_33[0].count
									// output_left_conversion : aesl_tmp_33[i_0].count
									// output_type_conversion : (hashTableMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_33[0].count) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_33[i_0].count = (hashTableMemRdCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "hashTableMemWrData_V_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemWrData_V_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemWrData_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemWrData_V_V, AESL_token); // data

			std::vector<sc_bv<512> > hashTableMemWrData_V_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'hashTableMemWrData_V_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'hashTableMemWrData_V_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					hashTableMemWrData_V_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemWrData_V_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_hashTableMemWrData_V_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_37)
			{
				aesl_tmp_37 = i;
			}

			if (aesl_tmp_37 > 0 && aesl_tmp_36.size() < aesl_tmp_37)
			{
				int aesl_tmp_36_size = aesl_tmp_36.size();

				for (int tmp_aesl_tmp_36 = 0; tmp_aesl_tmp_36 < aesl_tmp_37 - aesl_tmp_36_size; tmp_aesl_tmp_36++)
				{
					ap_uint<512> tmp;
					aesl_tmp_36.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: hashTableMemWrData_V_V
				{
					// bitslice(511, 0)
					// {
						// celement: hashTableMemWrData.V.V(511, 0)
						// {
							sc_lv<512>* hashTableMemWrData_V_V_lv0_0_0_1 = new sc_lv<512>[aesl_tmp_37 - aesl_tmp_38];
						// }
					// }

					// bitslice(511, 0)
					{
						int hls_map_index = 0;
						// celement: hashTableMemWrData.V.V(511, 0)
						{
							// carray: (aesl_tmp_38) => (aesl_tmp_37 - 1) @ (1)
							for (int i_0 = aesl_tmp_38; i_0 <= aesl_tmp_37 - 1; i_0 += 1)
							{
								if (&(aesl_tmp_36[0]) != NULL) // check the null address if the c port is array or others
								{
									hashTableMemWrData_V_V_lv0_0_0_1[hls_map_index].range(511, 0) = sc_bv<512>(hashTableMemWrData_V_V_pc_buffer[hls_map_index].range(511, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(511, 0)
					{
						int hls_map_index = 0;
						// celement: hashTableMemWrData.V.V(511, 0)
						{
							// carray: (aesl_tmp_38) => (aesl_tmp_37 - 1) @ (1)
							for (int i_0 = aesl_tmp_38; i_0 <= aesl_tmp_37 - 1; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : aesl_tmp_36[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : aesl_tmp_36[0]
								// output_left_conversion : aesl_tmp_36[i_0]
								// output_type_conversion : (hashTableMemWrData_V_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(aesl_tmp_36[0]) != NULL) // check the null address if the c port is array or others
								{
									aesl_tmp_36[i_0] = (hashTableMemWrData_V_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "hashTableMemWrCmd_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemWrCmd_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemWrCmd_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemWrCmd_V, AESL_token); // data

			std::vector<sc_bv<40> > hashTableMemWrCmd_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'hashTableMemWrCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'hashTableMemWrCmd_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					hashTableMemWrCmd_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_hashTableMemWrCmd_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_hashTableMemWrCmd_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_40)
			{
				aesl_tmp_40 = i;
			}

			if (aesl_tmp_40 > 0 && aesl_tmp_39.size() < aesl_tmp_40)
			{
				int aesl_tmp_39_size = aesl_tmp_39.size();

				for (int tmp_aesl_tmp_39 = 0; tmp_aesl_tmp_39 < aesl_tmp_40 - aesl_tmp_39_size; tmp_aesl_tmp_39++)
				{
					memCtrlWord tmp;
					aesl_tmp_39.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: hashTableMemWrCmd_V
				{
					// bitslice(31, 0)
					// {
						// celement: hashTableMemWrCmd.V.address.V(31, 0)
						// {
							sc_lv<32>* hashTableMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_40 - aesl_tmp_41];
						// }
					// }
					// bitslice(39, 32)
					// {
						// celement: hashTableMemWrCmd.V.count.V(7, 0)
						// {
							sc_lv<8>* hashTableMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<8>[aesl_tmp_40 - aesl_tmp_41];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: hashTableMemWrCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_41) => (aesl_tmp_40 - 1) @ (1)
							for (int i_0 = aesl_tmp_41; i_0 <= aesl_tmp_40 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_39[0].address) != NULL) // check the null address if the c port is array or others
									{
										hashTableMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(31, 0) = sc_bv<32>(hashTableMemWrCmd_V_pc_buffer[hls_map_index].range(31, 0));
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(39, 32)
					{
						int hls_map_index = 0;
						// celement: hashTableMemWrCmd.V.count.V(7, 0)
						{
							// carray: (aesl_tmp_41) => (aesl_tmp_40 - 1) @ (1)
							for (int i_0 = aesl_tmp_41; i_0 <= aesl_tmp_40 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									if (&(aesl_tmp_39[0].count) != NULL) // check the null address if the c port is array or others
									{
										hashTableMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index].range(7, 0) = sc_bv<8>(hashTableMemWrCmd_V_pc_buffer[hls_map_index].range(39, 32));
										hls_map_index++;
									}
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: hashTableMemWrCmd.V.address.V(31, 0)
						{
							// carray: (aesl_tmp_41) => (aesl_tmp_40 - 1) @ (1)
							for (int i_0 = aesl_tmp_41; i_0 <= aesl_tmp_40 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_39[i_0].address
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_39[0].address
									// output_left_conversion : aesl_tmp_39[i_0].address
									// output_type_conversion : (hashTableMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_39[0].address) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_39[i_0].address = (hashTableMemWrCmd_V_address_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
					// bitslice(39, 32)
					{
						int hls_map_index = 0;
						// celement: hashTableMemWrCmd.V.count.V(7, 0)
						{
							// carray: (aesl_tmp_41) => (aesl_tmp_40 - 1) @ (1)
							for (int i_0 = aesl_tmp_41; i_0 <= aesl_tmp_40 - 1; i_0 += 1)
							{
								// carray: (0) => (0) @ (1)
								for (int i_1 = 0; i_1 <= 0; i_1 += 1)
								{
									// sub                    : i_0 i_1
									// ori_name               : aesl_tmp_39[i_0].count
									// sub_1st_elem           : 0 0
									// ori_name_1st_elem      : aesl_tmp_39[0].count
									// output_left_conversion : aesl_tmp_39[i_0].count
									// output_type_conversion : (hashTableMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
									if (&(aesl_tmp_39[0].count) != NULL) // check the null address if the c port is array or others
									{
										aesl_tmp_39[i_0].count = (hashTableMemWrCmd_V_count_V_lv0_0_0_1_lv1_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
										hls_map_index++;
									}
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "addressReturnOut_V_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_addressReturnOut_V_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_addressReturnOut_V_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_addressReturnOut_V_V, AESL_token); // data

			std::vector<sc_bv<32> > addressReturnOut_V_V_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'addressReturnOut_V_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'addressReturnOut_V_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					addressReturnOut_V_V_pc_buffer.push_back(AESL_token.c_str());
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_addressReturnOut_V_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_addressReturnOut_V_V))
				{
					exit(1);
				}
			}

			// correct the buffer size the current transaction
			if (i != aesl_tmp_43)
			{
				aesl_tmp_43 = i;
			}

			if (aesl_tmp_43 > 0 && aesl_tmp_42.size() < aesl_tmp_43)
			{
				int aesl_tmp_42_size = aesl_tmp_42.size();

				for (int tmp_aesl_tmp_42 = 0; tmp_aesl_tmp_42 < aesl_tmp_43 - aesl_tmp_42_size; tmp_aesl_tmp_42++)
				{
					ap_uint<32> tmp;
					aesl_tmp_42.push_back(tmp);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: addressReturnOut_V_V
				{
					// bitslice(31, 0)
					// {
						// celement: addressReturnOut.V.V(31, 0)
						// {
							sc_lv<32>* addressReturnOut_V_V_lv0_0_0_1 = new sc_lv<32>[aesl_tmp_43 - aesl_tmp_44];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: addressReturnOut.V.V(31, 0)
						{
							// carray: (aesl_tmp_44) => (aesl_tmp_43 - 1) @ (1)
							for (int i_0 = aesl_tmp_44; i_0 <= aesl_tmp_43 - 1; i_0 += 1)
							{
								if (&(aesl_tmp_42[0]) != NULL) // check the null address if the c port is array or others
								{
									addressReturnOut_V_V_lv0_0_0_1[hls_map_index].range(31, 0) = sc_bv<32>(addressReturnOut_V_V_pc_buffer[hls_map_index].range(31, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: addressReturnOut.V.V(31, 0)
						{
							// carray: (aesl_tmp_44) => (aesl_tmp_43 - 1) @ (1)
							for (int i_0 = aesl_tmp_44; i_0 <= aesl_tmp_43 - 1; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : aesl_tmp_42[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : aesl_tmp_42[0]
								// output_left_conversion : aesl_tmp_42[i_0]
								// output_type_conversion : (addressReturnOut_V_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(aesl_tmp_42[0]) != NULL) // check the null address if the c port is array or others
								{
									aesl_tmp_42[i_0] = (addressReturnOut_V_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}
		}

		// output port post check: "flushReq_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_flushReq_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_flushReq_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_flushReq_V, AESL_token); // data

			sc_bv<1> *flushReq_V_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'flushReq_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'flushReq_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					flushReq_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_flushReq_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_flushReq_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: flushReq_V
				{
					// bitslice(0, 0)
					// {
						// celement: flushReq.V(0, 0)
						// {
							sc_lv<1>* flushReq_V_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: flushReq.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(flushReq) != NULL) // check the null address if the c port is array or others
								{
									flushReq_V_lv0_0_0_1[hls_map_index].range(0, 0) = sc_bv<1>(flushReq_V_pc_buffer[hls_map_index].range(0, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: flushReq.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : flushReq
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : flushReq
								// output_left_conversion : flushReq
								// output_type_conversion : (flushReq_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(flushReq) != NULL) // check the null address if the c port is array or others
								{
									flushReq = (flushReq_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] flushReq_V_pc_buffer;
		}

		// output port post check: "flushDone_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_flushDone_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_flushDone_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_flushDone_V, AESL_token); // data

			sc_bv<1> *flushDone_V_pc_buffer = new sc_bv<1>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'flushDone_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'flushDone_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					flushDone_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_flushDone_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_flushDone_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: flushDone_V
				{
					// bitslice(0, 0)
					// {
						// celement: flushDone.V(0, 0)
						// {
							sc_lv<1>* flushDone_V_lv0_0_0_1 = new sc_lv<1>[1];
						// }
					// }

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: flushDone.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(flushDone) != NULL) // check the null address if the c port is array or others
								{
									flushDone_V_lv0_0_0_1[hls_map_index].range(0, 0) = sc_bv<1>(flushDone_V_pc_buffer[hls_map_index].range(0, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(0, 0)
					{
						int hls_map_index = 0;
						// celement: flushDone.V(0, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : flushDone
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : flushDone
								// output_left_conversion : flushDone
								// output_type_conversion : (flushDone_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(flushDone) != NULL) // check the null address if the c port is array or others
								{
									flushDone = (flushDone_V_lv0_0_0_1[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] flushDone_V_pc_buffer;
		}

		// push back output stream: "outData"
		for (int i = 0; i < aesl_tmp_4; i++)
		{
			outData.write(aesl_tmp_3[i]);
		}

		// push back output stream: "dramValueStoreMemRdCmd"
		for (int i = 0; i < aesl_tmp_7; i++)
		{
			dramValueStoreMemRdCmd.write(aesl_tmp_6[i]);
		}

		// push back output stream: "dramValueStoreMemWrCmd"
		for (int i = 0; i < aesl_tmp_13; i++)
		{
			dramValueStoreMemWrCmd.write(aesl_tmp_12[i]);
		}

		// push back output stream: "dramValueStoreMemWrData"
		for (int i = 0; i < aesl_tmp_16; i++)
		{
			dramValueStoreMemWrData.write(aesl_tmp_15[i]);
		}

		// push back output stream: "flashValueStoreMemRdCmd"
		for (int i = 0; i < aesl_tmp_19; i++)
		{
			flashValueStoreMemRdCmd.write(aesl_tmp_18[i]);
		}

		// push back output stream: "flashValueStoreMemWrCmd"
		for (int i = 0; i < aesl_tmp_25; i++)
		{
			flashValueStoreMemWrCmd.write(aesl_tmp_24[i]);
		}

		// push back output stream: "flashValueStoreMemWrData"
		for (int i = 0; i < aesl_tmp_28; i++)
		{
			flashValueStoreMemWrData.write(aesl_tmp_27[i]);
		}

		// push back output stream: "hashTableMemRdCmd"
		for (int i = 0; i < aesl_tmp_34; i++)
		{
			hashTableMemRdCmd.write(aesl_tmp_33[i]);
		}

		// push back output stream: "hashTableMemWrData"
		for (int i = 0; i < aesl_tmp_37; i++)
		{
			hashTableMemWrData.write(aesl_tmp_36[i]);
		}

		// push back output stream: "hashTableMemWrCmd"
		for (int i = 0; i < aesl_tmp_40; i++)
		{
			hashTableMemWrCmd.write(aesl_tmp_39[i]);
		}

		// push back output stream: "addressReturnOut"
		for (int i = 0; i < aesl_tmp_43; i++)
		{
			addressReturnOut.write(aesl_tmp_42[i]);
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "inData_V_data_V"
		char* tvin_inData_V_data_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_inData_V_data_V);
		char* wrapc_stream_size_in_inData_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_inData_V_data_V);
		char* wrapc_stream_ingress_status_inData_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_inData_V_data_V);

		// "inData_V_user_V"
		char* tvin_inData_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_inData_V_user_V);
		char* wrapc_stream_size_in_inData_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_inData_V_user_V);
		char* wrapc_stream_ingress_status_inData_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_inData_V_user_V);

		// "inData_V_keep_V"
		char* tvin_inData_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_inData_V_keep_V);
		char* wrapc_stream_size_in_inData_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_inData_V_keep_V);
		char* wrapc_stream_ingress_status_inData_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_inData_V_keep_V);

		// "inData_V_last_V"
		char* tvin_inData_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_inData_V_last_V);
		char* wrapc_stream_size_in_inData_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_inData_V_last_V);
		char* wrapc_stream_ingress_status_inData_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_inData_V_last_V);

		// "outData_V_data_V"
		char* tvin_outData_V_data_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_outData_V_data_V);
		char* tvout_outData_V_data_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_outData_V_data_V);
		char* wrapc_stream_size_out_outData_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_outData_V_data_V);
		char* wrapc_stream_egress_status_outData_V_data_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_outData_V_data_V);

		// "outData_V_user_V"
		char* tvin_outData_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_outData_V_user_V);
		char* tvout_outData_V_user_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_outData_V_user_V);
		char* wrapc_stream_size_out_outData_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_outData_V_user_V);
		char* wrapc_stream_egress_status_outData_V_user_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_outData_V_user_V);

		// "outData_V_keep_V"
		char* tvin_outData_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_outData_V_keep_V);
		char* tvout_outData_V_keep_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_outData_V_keep_V);
		char* wrapc_stream_size_out_outData_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_outData_V_keep_V);
		char* wrapc_stream_egress_status_outData_V_keep_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_outData_V_keep_V);

		// "outData_V_last_V"
		char* tvin_outData_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_outData_V_last_V);
		char* tvout_outData_V_last_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_outData_V_last_V);
		char* wrapc_stream_size_out_outData_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_outData_V_last_V);
		char* wrapc_stream_egress_status_outData_V_last_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_outData_V_last_V);

		// "dramValueStoreMemRdCmd_V"
		char* tvin_dramValueStoreMemRdCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dramValueStoreMemRdCmd_V);
		char* tvout_dramValueStoreMemRdCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dramValueStoreMemRdCmd_V);
		char* wrapc_stream_size_out_dramValueStoreMemRdCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemRdCmd_V);
		char* wrapc_stream_egress_status_dramValueStoreMemRdCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_dramValueStoreMemRdCmd_V);

		// "dramValueStoreMemRdData_V_V"
		char* tvin_dramValueStoreMemRdData_V_V = new char[133];
		aesl_fh.touch(AUTOTB_TVIN_dramValueStoreMemRdData_V_V);
		char* wrapc_stream_size_in_dramValueStoreMemRdData_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_dramValueStoreMemRdData_V_V);
		char* wrapc_stream_ingress_status_dramValueStoreMemRdData_V_V = new char[133];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_dramValueStoreMemRdData_V_V);

		// "dramValueStoreMemWrCmd_V"
		char* tvin_dramValueStoreMemWrCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_dramValueStoreMemWrCmd_V);
		char* tvout_dramValueStoreMemWrCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_dramValueStoreMemWrCmd_V);
		char* wrapc_stream_size_out_dramValueStoreMemWrCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrCmd_V);
		char* wrapc_stream_egress_status_dramValueStoreMemWrCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_dramValueStoreMemWrCmd_V);

		// "dramValueStoreMemWrData_V_V"
		char* tvin_dramValueStoreMemWrData_V_V = new char[133];
		aesl_fh.touch(AUTOTB_TVIN_dramValueStoreMemWrData_V_V);
		char* tvout_dramValueStoreMemWrData_V_V = new char[133];
		aesl_fh.touch(AUTOTB_TVOUT_dramValueStoreMemWrData_V_V);
		char* wrapc_stream_size_out_dramValueStoreMemWrData_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrData_V_V);
		char* wrapc_stream_egress_status_dramValueStoreMemWrData_V_V = new char[133];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_dramValueStoreMemWrData_V_V);

		// "flashValueStoreMemRdCmd_V"
		char* tvin_flashValueStoreMemRdCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_flashValueStoreMemRdCmd_V);
		char* tvout_flashValueStoreMemRdCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_flashValueStoreMemRdCmd_V);
		char* wrapc_stream_size_out_flashValueStoreMemRdCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemRdCmd_V);
		char* wrapc_stream_egress_status_flashValueStoreMemRdCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_flashValueStoreMemRdCmd_V);

		// "flashValueStoreMemRdData_V_V"
		char* tvin_flashValueStoreMemRdData_V_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_flashValueStoreMemRdData_V_V);
		char* wrapc_stream_size_in_flashValueStoreMemRdData_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_flashValueStoreMemRdData_V_V);
		char* wrapc_stream_ingress_status_flashValueStoreMemRdData_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_flashValueStoreMemRdData_V_V);

		// "flashValueStoreMemWrCmd_V"
		char* tvin_flashValueStoreMemWrCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_flashValueStoreMemWrCmd_V);
		char* tvout_flashValueStoreMemWrCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_flashValueStoreMemWrCmd_V);
		char* wrapc_stream_size_out_flashValueStoreMemWrCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrCmd_V);
		char* wrapc_stream_egress_status_flashValueStoreMemWrCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_flashValueStoreMemWrCmd_V);

		// "flashValueStoreMemWrData_V_V"
		char* tvin_flashValueStoreMemWrData_V_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_flashValueStoreMemWrData_V_V);
		char* tvout_flashValueStoreMemWrData_V_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_flashValueStoreMemWrData_V_V);
		char* wrapc_stream_size_out_flashValueStoreMemWrData_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrData_V_V);
		char* wrapc_stream_egress_status_flashValueStoreMemWrData_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_flashValueStoreMemWrData_V_V);

		// "hashTableMemRdData_V_V"
		char* tvin_hashTableMemRdData_V_V = new char[133];
		aesl_fh.touch(AUTOTB_TVIN_hashTableMemRdData_V_V);
		char* wrapc_stream_size_in_hashTableMemRdData_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_hashTableMemRdData_V_V);
		char* wrapc_stream_ingress_status_hashTableMemRdData_V_V = new char[133];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_hashTableMemRdData_V_V);

		// "hashTableMemRdCmd_V"
		char* tvin_hashTableMemRdCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_hashTableMemRdCmd_V);
		char* tvout_hashTableMemRdCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_hashTableMemRdCmd_V);
		char* wrapc_stream_size_out_hashTableMemRdCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_hashTableMemRdCmd_V);
		char* wrapc_stream_egress_status_hashTableMemRdCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_hashTableMemRdCmd_V);

		// "hashTableMemWrData_V_V"
		char* tvin_hashTableMemWrData_V_V = new char[133];
		aesl_fh.touch(AUTOTB_TVIN_hashTableMemWrData_V_V);
		char* tvout_hashTableMemWrData_V_V = new char[133];
		aesl_fh.touch(AUTOTB_TVOUT_hashTableMemWrData_V_V);
		char* wrapc_stream_size_out_hashTableMemWrData_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_hashTableMemWrData_V_V);
		char* wrapc_stream_egress_status_hashTableMemWrData_V_V = new char[133];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_hashTableMemWrData_V_V);

		// "hashTableMemWrCmd_V"
		char* tvin_hashTableMemWrCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_hashTableMemWrCmd_V);
		char* tvout_hashTableMemWrCmd_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_hashTableMemWrCmd_V);
		char* wrapc_stream_size_out_hashTableMemWrCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_hashTableMemWrCmd_V);
		char* wrapc_stream_egress_status_hashTableMemWrCmd_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_hashTableMemWrCmd_V);

		// "addressReturnOut_V_V"
		char* tvin_addressReturnOut_V_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_addressReturnOut_V_V);
		char* tvout_addressReturnOut_V_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_addressReturnOut_V_V);
		char* wrapc_stream_size_out_addressReturnOut_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_OUT_addressReturnOut_V_V);
		char* wrapc_stream_egress_status_addressReturnOut_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_EGRESS_STATUS_addressReturnOut_V_V);

		// "addressAssignDramIn_V_V"
		char* tvin_addressAssignDramIn_V_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_addressAssignDramIn_V_V);
		char* wrapc_stream_size_in_addressAssignDramIn_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_addressAssignDramIn_V_V);
		char* wrapc_stream_ingress_status_addressAssignDramIn_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_addressAssignDramIn_V_V);

		// "addressAssignFlashIn_V_V"
		char* tvin_addressAssignFlashIn_V_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_addressAssignFlashIn_V_V);
		char* wrapc_stream_size_in_addressAssignFlashIn_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_SIZE_IN_addressAssignFlashIn_V_V);
		char* wrapc_stream_ingress_status_addressAssignFlashIn_V_V = new char[50];
		aesl_fh.touch(WRAPC_STREAM_INGRESS_STATUS_addressAssignFlashIn_V_V);

		// "flushReq_V"
		char* tvout_flushReq_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_flushReq_V);

		// "flushAck_V"
		char* tvin_flushAck_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_flushAck_V);

		// "flushDone_V"
		char* tvout_flushDone_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_flushDone_V);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// dump stream tvin: "inData"
		std::vector<extendedAxiWord > aesl_tmp_0;
		int aesl_tmp_1 = 0;
		while (!inData.empty())
		{
			aesl_tmp_0.push_back(inData.read());
			aesl_tmp_1++;
		}

		// dump stream tvin: "outData"
		std::vector<extendedAxiWord > aesl_tmp_3;
		int aesl_tmp_4 = 0;
		while (!outData.empty())
		{
			aesl_tmp_3.push_back(outData.read());
			aesl_tmp_4++;
		}

		// dump stream tvin: "dramValueStoreMemRdCmd"
		std::vector<memCtrlWord > aesl_tmp_6;
		int aesl_tmp_7 = 0;
		while (!dramValueStoreMemRdCmd.empty())
		{
			aesl_tmp_6.push_back(dramValueStoreMemRdCmd.read());
			aesl_tmp_7++;
		}

		// dump stream tvin: "dramValueStoreMemRdData"
		std::vector<ap_uint<512> > aesl_tmp_9;
		int aesl_tmp_10 = 0;
		while (!dramValueStoreMemRdData.empty())
		{
			aesl_tmp_9.push_back(dramValueStoreMemRdData.read());
			aesl_tmp_10++;
		}

		// dump stream tvin: "dramValueStoreMemWrCmd"
		std::vector<memCtrlWord > aesl_tmp_12;
		int aesl_tmp_13 = 0;
		while (!dramValueStoreMemWrCmd.empty())
		{
			aesl_tmp_12.push_back(dramValueStoreMemWrCmd.read());
			aesl_tmp_13++;
		}

		// dump stream tvin: "dramValueStoreMemWrData"
		std::vector<ap_uint<512> > aesl_tmp_15;
		int aesl_tmp_16 = 0;
		while (!dramValueStoreMemWrData.empty())
		{
			aesl_tmp_15.push_back(dramValueStoreMemWrData.read());
			aesl_tmp_16++;
		}

		// dump stream tvin: "flashValueStoreMemRdCmd"
		std::vector<flashMemCtrlWord > aesl_tmp_18;
		int aesl_tmp_19 = 0;
		while (!flashValueStoreMemRdCmd.empty())
		{
			aesl_tmp_18.push_back(flashValueStoreMemRdCmd.read());
			aesl_tmp_19++;
		}

		// dump stream tvin: "flashValueStoreMemRdData"
		std::vector<ap_uint<64> > aesl_tmp_21;
		int aesl_tmp_22 = 0;
		while (!flashValueStoreMemRdData.empty())
		{
			aesl_tmp_21.push_back(flashValueStoreMemRdData.read());
			aesl_tmp_22++;
		}

		// dump stream tvin: "flashValueStoreMemWrCmd"
		std::vector<flashMemCtrlWord > aesl_tmp_24;
		int aesl_tmp_25 = 0;
		while (!flashValueStoreMemWrCmd.empty())
		{
			aesl_tmp_24.push_back(flashValueStoreMemWrCmd.read());
			aesl_tmp_25++;
		}

		// dump stream tvin: "flashValueStoreMemWrData"
		std::vector<ap_uint<64> > aesl_tmp_27;
		int aesl_tmp_28 = 0;
		while (!flashValueStoreMemWrData.empty())
		{
			aesl_tmp_27.push_back(flashValueStoreMemWrData.read());
			aesl_tmp_28++;
		}

		// dump stream tvin: "hashTableMemRdData"
		std::vector<ap_uint<512> > aesl_tmp_30;
		int aesl_tmp_31 = 0;
		while (!hashTableMemRdData.empty())
		{
			aesl_tmp_30.push_back(hashTableMemRdData.read());
			aesl_tmp_31++;
		}

		// dump stream tvin: "hashTableMemRdCmd"
		std::vector<memCtrlWord > aesl_tmp_33;
		int aesl_tmp_34 = 0;
		while (!hashTableMemRdCmd.empty())
		{
			aesl_tmp_33.push_back(hashTableMemRdCmd.read());
			aesl_tmp_34++;
		}

		// dump stream tvin: "hashTableMemWrData"
		std::vector<ap_uint<512> > aesl_tmp_36;
		int aesl_tmp_37 = 0;
		while (!hashTableMemWrData.empty())
		{
			aesl_tmp_36.push_back(hashTableMemWrData.read());
			aesl_tmp_37++;
		}

		// dump stream tvin: "hashTableMemWrCmd"
		std::vector<memCtrlWord > aesl_tmp_39;
		int aesl_tmp_40 = 0;
		while (!hashTableMemWrCmd.empty())
		{
			aesl_tmp_39.push_back(hashTableMemWrCmd.read());
			aesl_tmp_40++;
		}

		// dump stream tvin: "addressReturnOut"
		std::vector<ap_uint<32> > aesl_tmp_42;
		int aesl_tmp_43 = 0;
		while (!addressReturnOut.empty())
		{
			aesl_tmp_42.push_back(addressReturnOut.read());
			aesl_tmp_43++;
		}

		// dump stream tvin: "addressAssignDramIn"
		std::vector<ap_uint<32> > aesl_tmp_45;
		int aesl_tmp_46 = 0;
		while (!addressAssignDramIn.empty())
		{
			aesl_tmp_45.push_back(addressAssignDramIn.read());
			aesl_tmp_46++;
		}

		// dump stream tvin: "addressAssignFlashIn"
		std::vector<ap_uint<32> > aesl_tmp_48;
		int aesl_tmp_49 = 0;
		while (!addressAssignFlashIn.empty())
		{
			aesl_tmp_48.push_back(addressAssignFlashIn.read());
			aesl_tmp_49++;
		}

		// [[transaction]]
		sprintf(tvin_flushAck_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_flushAck_V, tvin_flushAck_V);

		sc_bv<1> flushAck_V_tvin_wrapc_buffer;

		// RTL Name: flushAck_V
		{
			// bitslice(0, 0)
			{
				// celement: flushAck.V(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : flushAck
						// sub_1st_elem          : 
						// ori_name_1st_elem     : flushAck
						// regulate_c_name       : flushAck_V
						// input_type_conversion : (flushAck).to_string(2).c_str()
						if (&(flushAck) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> flushAck_V_tmp_mem;
							flushAck_V_tmp_mem = (flushAck).to_string(2).c_str();
							flushAck_V_tvin_wrapc_buffer.range(0, 0) = flushAck_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_flushAck_V, "%s\n", (flushAck_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_flushAck_V, tvin_flushAck_V);
		}

		tcl_file.set_num(1, &tcl_file.flushAck_V_depth);
		sprintf(tvin_flushAck_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_flushAck_V, tvin_flushAck_V);

		// push back input stream: "inData"
		for (int i = 0; i < aesl_tmp_1; i++)
		{
			inData.write(aesl_tmp_0[i]);
		}

		// push back input stream: "outData"
		for (int i = 0; i < aesl_tmp_4; i++)
		{
			outData.write(aesl_tmp_3[i]);
		}

		// push back input stream: "dramValueStoreMemRdCmd"
		for (int i = 0; i < aesl_tmp_7; i++)
		{
			dramValueStoreMemRdCmd.write(aesl_tmp_6[i]);
		}

		// push back input stream: "dramValueStoreMemRdData"
		for (int i = 0; i < aesl_tmp_10; i++)
		{
			dramValueStoreMemRdData.write(aesl_tmp_9[i]);
		}

		// push back input stream: "dramValueStoreMemWrCmd"
		for (int i = 0; i < aesl_tmp_13; i++)
		{
			dramValueStoreMemWrCmd.write(aesl_tmp_12[i]);
		}

		// push back input stream: "dramValueStoreMemWrData"
		for (int i = 0; i < aesl_tmp_16; i++)
		{
			dramValueStoreMemWrData.write(aesl_tmp_15[i]);
		}

		// push back input stream: "flashValueStoreMemRdCmd"
		for (int i = 0; i < aesl_tmp_19; i++)
		{
			flashValueStoreMemRdCmd.write(aesl_tmp_18[i]);
		}

		// push back input stream: "flashValueStoreMemRdData"
		for (int i = 0; i < aesl_tmp_22; i++)
		{
			flashValueStoreMemRdData.write(aesl_tmp_21[i]);
		}

		// push back input stream: "flashValueStoreMemWrCmd"
		for (int i = 0; i < aesl_tmp_25; i++)
		{
			flashValueStoreMemWrCmd.write(aesl_tmp_24[i]);
		}

		// push back input stream: "flashValueStoreMemWrData"
		for (int i = 0; i < aesl_tmp_28; i++)
		{
			flashValueStoreMemWrData.write(aesl_tmp_27[i]);
		}

		// push back input stream: "hashTableMemRdData"
		for (int i = 0; i < aesl_tmp_31; i++)
		{
			hashTableMemRdData.write(aesl_tmp_30[i]);
		}

		// push back input stream: "hashTableMemRdCmd"
		for (int i = 0; i < aesl_tmp_34; i++)
		{
			hashTableMemRdCmd.write(aesl_tmp_33[i]);
		}

		// push back input stream: "hashTableMemWrData"
		for (int i = 0; i < aesl_tmp_37; i++)
		{
			hashTableMemWrData.write(aesl_tmp_36[i]);
		}

		// push back input stream: "hashTableMemWrCmd"
		for (int i = 0; i < aesl_tmp_40; i++)
		{
			hashTableMemWrCmd.write(aesl_tmp_39[i]);
		}

		// push back input stream: "addressReturnOut"
		for (int i = 0; i < aesl_tmp_43; i++)
		{
			addressReturnOut.write(aesl_tmp_42[i]);
		}

		// push back input stream: "addressAssignDramIn"
		for (int i = 0; i < aesl_tmp_46; i++)
		{
			addressAssignDramIn.write(aesl_tmp_45[i]);
		}

		// push back input stream: "addressAssignFlashIn"
		for (int i = 0; i < aesl_tmp_49; i++)
		{
			addressAssignFlashIn.write(aesl_tmp_48[i]);
		}

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		memcachedPipeline(inData, outData, dramValueStoreMemRdCmd, dramValueStoreMemRdData, dramValueStoreMemWrCmd, dramValueStoreMemWrData, flashValueStoreMemRdCmd, flashValueStoreMemRdData, flashValueStoreMemWrCmd, flashValueStoreMemWrData, hashTableMemRdData, hashTableMemRdCmd, hashTableMemWrData, hashTableMemWrCmd, addressReturnOut, addressAssignDramIn, addressAssignFlashIn, flushReq, flushAck, flushDone);

		CodeState = DUMP_OUTPUTS;
		// record input size to tv3: "inData"
		int aesl_tmp_2 = inData.size();

		// pop output stream: "outData"
		int aesl_tmp_5 = aesl_tmp_4;
		aesl_tmp_4 = 0;
     aesl_tmp_3.clear();
		while (!outData.empty())
		{
			aesl_tmp_3.push_back(outData.read());
			aesl_tmp_4++;
		}

		// pop output stream: "dramValueStoreMemRdCmd"
		int aesl_tmp_8 = aesl_tmp_7;
		aesl_tmp_7 = 0;
     aesl_tmp_6.clear();
		while (!dramValueStoreMemRdCmd.empty())
		{
			aesl_tmp_6.push_back(dramValueStoreMemRdCmd.read());
			aesl_tmp_7++;
		}

		// record input size to tv3: "dramValueStoreMemRdData"
		int aesl_tmp_11 = dramValueStoreMemRdData.size();

		// pop output stream: "dramValueStoreMemWrCmd"
		int aesl_tmp_14 = aesl_tmp_13;
		aesl_tmp_13 = 0;
     aesl_tmp_12.clear();
		while (!dramValueStoreMemWrCmd.empty())
		{
			aesl_tmp_12.push_back(dramValueStoreMemWrCmd.read());
			aesl_tmp_13++;
		}

		// pop output stream: "dramValueStoreMemWrData"
		int aesl_tmp_17 = aesl_tmp_16;
		aesl_tmp_16 = 0;
     aesl_tmp_15.clear();
		while (!dramValueStoreMemWrData.empty())
		{
			aesl_tmp_15.push_back(dramValueStoreMemWrData.read());
			aesl_tmp_16++;
		}

		// pop output stream: "flashValueStoreMemRdCmd"
		int aesl_tmp_20 = aesl_tmp_19;
		aesl_tmp_19 = 0;
     aesl_tmp_18.clear();
		while (!flashValueStoreMemRdCmd.empty())
		{
			aesl_tmp_18.push_back(flashValueStoreMemRdCmd.read());
			aesl_tmp_19++;
		}

		// record input size to tv3: "flashValueStoreMemRdData"
		int aesl_tmp_23 = flashValueStoreMemRdData.size();

		// pop output stream: "flashValueStoreMemWrCmd"
		int aesl_tmp_26 = aesl_tmp_25;
		aesl_tmp_25 = 0;
     aesl_tmp_24.clear();
		while (!flashValueStoreMemWrCmd.empty())
		{
			aesl_tmp_24.push_back(flashValueStoreMemWrCmd.read());
			aesl_tmp_25++;
		}

		// pop output stream: "flashValueStoreMemWrData"
		int aesl_tmp_29 = aesl_tmp_28;
		aesl_tmp_28 = 0;
     aesl_tmp_27.clear();
		while (!flashValueStoreMemWrData.empty())
		{
			aesl_tmp_27.push_back(flashValueStoreMemWrData.read());
			aesl_tmp_28++;
		}

		// record input size to tv3: "hashTableMemRdData"
		int aesl_tmp_32 = hashTableMemRdData.size();

		// pop output stream: "hashTableMemRdCmd"
		int aesl_tmp_35 = aesl_tmp_34;
		aesl_tmp_34 = 0;
     aesl_tmp_33.clear();
		while (!hashTableMemRdCmd.empty())
		{
			aesl_tmp_33.push_back(hashTableMemRdCmd.read());
			aesl_tmp_34++;
		}

		// pop output stream: "hashTableMemWrData"
		int aesl_tmp_38 = aesl_tmp_37;
		aesl_tmp_37 = 0;
     aesl_tmp_36.clear();
		while (!hashTableMemWrData.empty())
		{
			aesl_tmp_36.push_back(hashTableMemWrData.read());
			aesl_tmp_37++;
		}

		// pop output stream: "hashTableMemWrCmd"
		int aesl_tmp_41 = aesl_tmp_40;
		aesl_tmp_40 = 0;
     aesl_tmp_39.clear();
		while (!hashTableMemWrCmd.empty())
		{
			aesl_tmp_39.push_back(hashTableMemWrCmd.read());
			aesl_tmp_40++;
		}

		// pop output stream: "addressReturnOut"
		int aesl_tmp_44 = aesl_tmp_43;
		aesl_tmp_43 = 0;
     aesl_tmp_42.clear();
		while (!addressReturnOut.empty())
		{
			aesl_tmp_42.push_back(addressReturnOut.read());
			aesl_tmp_43++;
		}

		// record input size to tv3: "addressAssignDramIn"
		int aesl_tmp_47 = addressAssignDramIn.size();

		// record input size to tv3: "addressAssignFlashIn"
		int aesl_tmp_50 = addressAssignFlashIn.size();

		// [[transaction]]
		sprintf(tvin_inData_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_inData_V_data_V, tvin_inData_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_data_V, tvin_inData_V_data_V);

		sc_bv<64>* inData_V_data_V_tvin_wrapc_buffer = new sc_bv<64>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: inData_V_data_V
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: inData.V.data.V(63, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].data
							// regulate_c_name       : inData_V_data_V
							// input_type_conversion : (aesl_tmp_0[i_0].data).to_string(2).c_str()
							if (&(aesl_tmp_0[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<64> inData_V_data_V_tmp_mem;
								inData_V_data_V_tmp_mem = (aesl_tmp_0[i_0].data).to_string(2).c_str();
								inData_V_data_V_tvin_wrapc_buffer[hls_map_index].range(63, 0) = inData_V_data_V_tmp_mem.range(63, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_inData_V_data_V, "%s\n", (inData_V_data_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_inData_V_data_V, tvin_inData_V_data_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_inData_V_data_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_data_V, stream_ingress_size_inData_V_data_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_data_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_inData_V_data_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_data_V, stream_ingress_size_inData_V_data_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_data_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.inData_V_data_V_depth);
		sprintf(tvin_inData_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_inData_V_data_V, tvin_inData_V_data_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_data_V, tvin_inData_V_data_V);

		// release memory allocation
		delete [] inData_V_data_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_inData_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_data_V, wrapc_stream_size_in_inData_V_data_V);
		sprintf(wrapc_stream_size_in_inData_V_data_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_data_V, wrapc_stream_size_in_inData_V_data_V);
		sprintf(wrapc_stream_size_in_inData_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_data_V, wrapc_stream_size_in_inData_V_data_V);

		// [[transaction]]
		sprintf(tvin_inData_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_inData_V_user_V, tvin_inData_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_user_V, tvin_inData_V_user_V);

		sc_bv<112>* inData_V_user_V_tvin_wrapc_buffer = new sc_bv<112>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: inData_V_user_V
		{
			// bitslice(111, 0)
			{
				int hls_map_index = 0;
				// celement: inData.V.user.V(111, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].user
							// regulate_c_name       : inData_V_user_V
							// input_type_conversion : (aesl_tmp_0[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_0[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<112> inData_V_user_V_tmp_mem;
								inData_V_user_V_tmp_mem = (aesl_tmp_0[i_0].user).to_string(2).c_str();
								inData_V_user_V_tvin_wrapc_buffer[hls_map_index].range(111, 0) = inData_V_user_V_tmp_mem.range(111, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_inData_V_user_V, "%s\n", (inData_V_user_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_inData_V_user_V, tvin_inData_V_user_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_inData_V_user_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_user_V, stream_ingress_size_inData_V_user_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_user_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_inData_V_user_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_user_V, stream_ingress_size_inData_V_user_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_user_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.inData_V_user_V_depth);
		sprintf(tvin_inData_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_inData_V_user_V, tvin_inData_V_user_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_user_V, tvin_inData_V_user_V);

		// release memory allocation
		delete [] inData_V_user_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_inData_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_user_V, wrapc_stream_size_in_inData_V_user_V);
		sprintf(wrapc_stream_size_in_inData_V_user_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_user_V, wrapc_stream_size_in_inData_V_user_V);
		sprintf(wrapc_stream_size_in_inData_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_user_V, wrapc_stream_size_in_inData_V_user_V);

		// [[transaction]]
		sprintf(tvin_inData_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_inData_V_keep_V, tvin_inData_V_keep_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_keep_V, tvin_inData_V_keep_V);

		sc_bv<8>* inData_V_keep_V_tvin_wrapc_buffer = new sc_bv<8>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: inData_V_keep_V
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: inData.V.keep.V(7, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].keep
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].keep
							// regulate_c_name       : inData_V_keep_V
							// input_type_conversion : (aesl_tmp_0[i_0].keep).to_string(2).c_str()
							if (&(aesl_tmp_0[0].keep) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<8> inData_V_keep_V_tmp_mem;
								inData_V_keep_V_tmp_mem = (aesl_tmp_0[i_0].keep).to_string(2).c_str();
								inData_V_keep_V_tvin_wrapc_buffer[hls_map_index].range(7, 0) = inData_V_keep_V_tmp_mem.range(7, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_inData_V_keep_V, "%s\n", (inData_V_keep_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_inData_V_keep_V, tvin_inData_V_keep_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_inData_V_keep_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_keep_V, stream_ingress_size_inData_V_keep_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_keep_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_inData_V_keep_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_keep_V, stream_ingress_size_inData_V_keep_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_keep_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.inData_V_keep_V_depth);
		sprintf(tvin_inData_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_inData_V_keep_V, tvin_inData_V_keep_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_keep_V, tvin_inData_V_keep_V);

		// release memory allocation
		delete [] inData_V_keep_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_inData_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_keep_V, wrapc_stream_size_in_inData_V_keep_V);
		sprintf(wrapc_stream_size_in_inData_V_keep_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_keep_V, wrapc_stream_size_in_inData_V_keep_V);
		sprintf(wrapc_stream_size_in_inData_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_keep_V, wrapc_stream_size_in_inData_V_keep_V);

		// [[transaction]]
		sprintf(tvin_inData_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_inData_V_last_V, tvin_inData_V_last_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_last_V, tvin_inData_V_last_V);

		sc_bv<1>* inData_V_last_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

		// RTL Name: inData_V_last_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: inData.V.last.V(0, 0)
				{
					// carray: (0) => (aesl_tmp_1 - aesl_tmp_2 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_0[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_0[0].last
							// regulate_c_name       : inData_V_last_V
							// input_type_conversion : (aesl_tmp_0[i_0].last).to_string(2).c_str()
							if (&(aesl_tmp_0[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> inData_V_last_V_tmp_mem;
								inData_V_last_V_tmp_mem = (aesl_tmp_0[i_0].last).to_string(2).c_str();
								inData_V_last_V_tvin_wrapc_buffer[hls_map_index].range(0, 0) = inData_V_last_V_tmp_mem.range(0, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			sprintf(tvin_inData_V_last_V, "%s\n", (inData_V_last_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_inData_V_last_V, tvin_inData_V_last_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_inData_V_last_V = aesl_tmp_1;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_last_V, stream_ingress_size_inData_V_last_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_last_V, "\n");

		for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2; i++)
		{
			stream_ingress_size_inData_V_last_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_last_V, stream_ingress_size_inData_V_last_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_last_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2, &tcl_file.inData_V_last_V_depth);
		sprintf(tvin_inData_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_inData_V_last_V, tvin_inData_V_last_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_inData_V_last_V, tvin_inData_V_last_V);

		// release memory allocation
		delete [] inData_V_last_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_inData_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_last_V, wrapc_stream_size_in_inData_V_last_V);
		sprintf(wrapc_stream_size_in_inData_V_last_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_last_V, wrapc_stream_size_in_inData_V_last_V);
		sprintf(wrapc_stream_size_in_inData_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_inData_V_last_V, wrapc_stream_size_in_inData_V_last_V);

		// [[transaction]]
		sprintf(tvout_outData_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_outData_V_data_V, tvout_outData_V_data_V);

		sc_bv<64>* outData_V_data_V_tvout_wrapc_buffer = new sc_bv<64>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: outData_V_data_V
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: outData.V.data.V(63, 0)
				{
					// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
					for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].data
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].data
							// regulate_c_name       : outData_V_data_V
							// input_type_conversion : (aesl_tmp_3[i_0].data).to_string(2).c_str()
							if (&(aesl_tmp_3[0].data) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<64> outData_V_data_V_tmp_mem;
								outData_V_data_V_tmp_mem = (aesl_tmp_3[i_0].data).to_string(2).c_str();
								outData_V_data_V_tvout_wrapc_buffer[hls_map_index].range(63, 0) = outData_V_data_V_tmp_mem.range(63, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvout_outData_V_data_V, "%s\n", (outData_V_data_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_outData_V_data_V, tvout_outData_V_data_V);
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.outData_V_data_V_depth);
		sprintf(tvout_outData_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_outData_V_data_V, tvout_outData_V_data_V);

		// release memory allocation
		delete [] outData_V_data_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_outData_V_data_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_data_V, wrapc_stream_size_out_outData_V_data_V);
		sprintf(wrapc_stream_size_out_outData_V_data_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_data_V, wrapc_stream_size_out_outData_V_data_V);
		sprintf(wrapc_stream_size_out_outData_V_data_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_data_V, wrapc_stream_size_out_outData_V_data_V);

		// [[transaction]]
		sprintf(tvout_outData_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_outData_V_user_V, tvout_outData_V_user_V);

		sc_bv<112>* outData_V_user_V_tvout_wrapc_buffer = new sc_bv<112>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: outData_V_user_V
		{
			// bitslice(111, 0)
			{
				int hls_map_index = 0;
				// celement: outData.V.user.V(111, 0)
				{
					// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
					for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].user
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].user
							// regulate_c_name       : outData_V_user_V
							// input_type_conversion : (aesl_tmp_3[i_0].user).to_string(2).c_str()
							if (&(aesl_tmp_3[0].user) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<112> outData_V_user_V_tmp_mem;
								outData_V_user_V_tmp_mem = (aesl_tmp_3[i_0].user).to_string(2).c_str();
								outData_V_user_V_tvout_wrapc_buffer[hls_map_index].range(111, 0) = outData_V_user_V_tmp_mem.range(111, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvout_outData_V_user_V, "%s\n", (outData_V_user_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_outData_V_user_V, tvout_outData_V_user_V);
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.outData_V_user_V_depth);
		sprintf(tvout_outData_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_outData_V_user_V, tvout_outData_V_user_V);

		// release memory allocation
		delete [] outData_V_user_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_outData_V_user_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_user_V, wrapc_stream_size_out_outData_V_user_V);
		sprintf(wrapc_stream_size_out_outData_V_user_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_user_V, wrapc_stream_size_out_outData_V_user_V);
		sprintf(wrapc_stream_size_out_outData_V_user_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_user_V, wrapc_stream_size_out_outData_V_user_V);

		// [[transaction]]
		sprintf(tvout_outData_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_outData_V_keep_V, tvout_outData_V_keep_V);

		sc_bv<8>* outData_V_keep_V_tvout_wrapc_buffer = new sc_bv<8>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: outData_V_keep_V
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: outData.V.keep.V(7, 0)
				{
					// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
					for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].keep
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].keep
							// regulate_c_name       : outData_V_keep_V
							// input_type_conversion : (aesl_tmp_3[i_0].keep).to_string(2).c_str()
							if (&(aesl_tmp_3[0].keep) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<8> outData_V_keep_V_tmp_mem;
								outData_V_keep_V_tmp_mem = (aesl_tmp_3[i_0].keep).to_string(2).c_str();
								outData_V_keep_V_tvout_wrapc_buffer[hls_map_index].range(7, 0) = outData_V_keep_V_tmp_mem.range(7, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvout_outData_V_keep_V, "%s\n", (outData_V_keep_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_outData_V_keep_V, tvout_outData_V_keep_V);
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.outData_V_keep_V_depth);
		sprintf(tvout_outData_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_outData_V_keep_V, tvout_outData_V_keep_V);

		// release memory allocation
		delete [] outData_V_keep_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_outData_V_keep_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_keep_V, wrapc_stream_size_out_outData_V_keep_V);
		sprintf(wrapc_stream_size_out_outData_V_keep_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_keep_V, wrapc_stream_size_out_outData_V_keep_V);
		sprintf(wrapc_stream_size_out_outData_V_keep_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_keep_V, wrapc_stream_size_out_outData_V_keep_V);

		// [[transaction]]
		sprintf(tvout_outData_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_outData_V_last_V, tvout_outData_V_last_V);

		sc_bv<1>* outData_V_last_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

		// RTL Name: outData_V_last_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: outData.V.last.V(0, 0)
				{
					// carray: (aesl_tmp_5) => (aesl_tmp_4 - 1) @ (1)
					for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_3[i_0].last
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_3[0].last
							// regulate_c_name       : outData_V_last_V
							// input_type_conversion : (aesl_tmp_3[i_0].last).to_string(2).c_str()
							if (&(aesl_tmp_3[0].last) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<1> outData_V_last_V_tmp_mem;
								outData_V_last_V_tmp_mem = (aesl_tmp_3[i_0].last).to_string(2).c_str();
								outData_V_last_V_tvout_wrapc_buffer[hls_map_index].range(0, 0) = outData_V_last_V_tmp_mem.range(0, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5; i++)
		{
			sprintf(tvout_outData_V_last_V, "%s\n", (outData_V_last_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_outData_V_last_V, tvout_outData_V_last_V);
		}

		tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5, &tcl_file.outData_V_last_V_depth);
		sprintf(tvout_outData_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_outData_V_last_V, tvout_outData_V_last_V);

		// release memory allocation
		delete [] outData_V_last_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_outData_V_last_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_last_V, wrapc_stream_size_out_outData_V_last_V);
		sprintf(wrapc_stream_size_out_outData_V_last_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_last_V, wrapc_stream_size_out_outData_V_last_V);
		sprintf(wrapc_stream_size_out_outData_V_last_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_outData_V_last_V, wrapc_stream_size_out_outData_V_last_V);

		// [[transaction]]
		sprintf(tvout_dramValueStoreMemRdCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dramValueStoreMemRdCmd_V, tvout_dramValueStoreMemRdCmd_V);

		sc_bv<40>* dramValueStoreMemRdCmd_V_tvout_wrapc_buffer = new sc_bv<40>[aesl_tmp_7 - aesl_tmp_8];

		// RTL Name: dramValueStoreMemRdCmd_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dramValueStoreMemRdCmd.V.address.V(31, 0)
				{
					// carray: (aesl_tmp_8) => (aesl_tmp_7 - 1) @ (1)
					for (int i_0 = aesl_tmp_8; i_0 <= aesl_tmp_7 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_6[i_0].address
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_6[0].address
							// regulate_c_name       : dramValueStoreMemRdCmd_V_address_V
							// input_type_conversion : (aesl_tmp_6[i_0].address).to_string(2).c_str()
							if (&(aesl_tmp_6[0].address) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> dramValueStoreMemRdCmd_V_address_V_tmp_mem;
								dramValueStoreMemRdCmd_V_address_V_tmp_mem = (aesl_tmp_6[i_0].address).to_string(2).c_str();
								dramValueStoreMemRdCmd_V_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dramValueStoreMemRdCmd_V_address_V_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
			// bitslice(39, 32)
			{
				int hls_map_index = 0;
				// celement: dramValueStoreMemRdCmd.V.count.V(7, 0)
				{
					// carray: (aesl_tmp_8) => (aesl_tmp_7 - 1) @ (1)
					for (int i_0 = aesl_tmp_8; i_0 <= aesl_tmp_7 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_6[i_0].count
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_6[0].count
							// regulate_c_name       : dramValueStoreMemRdCmd_V_count_V
							// input_type_conversion : (aesl_tmp_6[i_0].count).to_string(2).c_str()
							if (&(aesl_tmp_6[0].count) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<8> dramValueStoreMemRdCmd_V_count_V_tmp_mem;
								dramValueStoreMemRdCmd_V_count_V_tmp_mem = (aesl_tmp_6[i_0].count).to_string(2).c_str();
								dramValueStoreMemRdCmd_V_tvout_wrapc_buffer[hls_map_index].range(39, 32) = dramValueStoreMemRdCmd_V_count_V_tmp_mem.range(7, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_7 - aesl_tmp_8; i++)
		{
			sprintf(tvout_dramValueStoreMemRdCmd_V, "%s\n", (dramValueStoreMemRdCmd_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dramValueStoreMemRdCmd_V, tvout_dramValueStoreMemRdCmd_V);
		}

		tcl_file.set_num(aesl_tmp_7 - aesl_tmp_8, &tcl_file.dramValueStoreMemRdCmd_V_depth);
		sprintf(tvout_dramValueStoreMemRdCmd_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dramValueStoreMemRdCmd_V, tvout_dramValueStoreMemRdCmd_V);

		// release memory allocation
		delete [] dramValueStoreMemRdCmd_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_dramValueStoreMemRdCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemRdCmd_V, wrapc_stream_size_out_dramValueStoreMemRdCmd_V);
		sprintf(wrapc_stream_size_out_dramValueStoreMemRdCmd_V, "%d\n", aesl_tmp_7 - aesl_tmp_8);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemRdCmd_V, wrapc_stream_size_out_dramValueStoreMemRdCmd_V);
		sprintf(wrapc_stream_size_out_dramValueStoreMemRdCmd_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemRdCmd_V, wrapc_stream_size_out_dramValueStoreMemRdCmd_V);

		// [[transaction]]
		sprintf(tvin_dramValueStoreMemRdData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_dramValueStoreMemRdData_V_V, tvin_dramValueStoreMemRdData_V_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_dramValueStoreMemRdData_V_V, tvin_dramValueStoreMemRdData_V_V);

		sc_bv<512>* dramValueStoreMemRdData_V_V_tvin_wrapc_buffer = new sc_bv<512>[aesl_tmp_10 - aesl_tmp_11];

		// RTL Name: dramValueStoreMemRdData_V_V
		{
			// bitslice(511, 0)
			{
				int hls_map_index = 0;
				// celement: dramValueStoreMemRdData.V.V(511, 0)
				{
					// carray: (0) => (aesl_tmp_10 - aesl_tmp_11 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_10 - aesl_tmp_11 - 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : aesl_tmp_9[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : aesl_tmp_9[0]
						// regulate_c_name       : dramValueStoreMemRdData_V_V
						// input_type_conversion : (aesl_tmp_9[i_0]).to_string(2).c_str()
						if (&(aesl_tmp_9[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<512> dramValueStoreMemRdData_V_V_tmp_mem;
							dramValueStoreMemRdData_V_V_tmp_mem = (aesl_tmp_9[i_0]).to_string(2).c_str();
							dramValueStoreMemRdData_V_V_tvin_wrapc_buffer[hls_map_index].range(511, 0) = dramValueStoreMemRdData_V_V_tmp_mem.range(511, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_10 - aesl_tmp_11; i++)
		{
			sprintf(tvin_dramValueStoreMemRdData_V_V, "%s\n", (dramValueStoreMemRdData_V_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_dramValueStoreMemRdData_V_V, tvin_dramValueStoreMemRdData_V_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_dramValueStoreMemRdData_V_V = aesl_tmp_10;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_dramValueStoreMemRdData_V_V, stream_ingress_size_dramValueStoreMemRdData_V_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_dramValueStoreMemRdData_V_V, "\n");

		for (int i = 0; i < aesl_tmp_10 - aesl_tmp_11; i++)
		{
			stream_ingress_size_dramValueStoreMemRdData_V_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_dramValueStoreMemRdData_V_V, stream_ingress_size_dramValueStoreMemRdData_V_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_dramValueStoreMemRdData_V_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_10 - aesl_tmp_11, &tcl_file.dramValueStoreMemRdData_V_V_depth);
		sprintf(tvin_dramValueStoreMemRdData_V_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_dramValueStoreMemRdData_V_V, tvin_dramValueStoreMemRdData_V_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_dramValueStoreMemRdData_V_V, tvin_dramValueStoreMemRdData_V_V);

		// release memory allocation
		delete [] dramValueStoreMemRdData_V_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_dramValueStoreMemRdData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_dramValueStoreMemRdData_V_V, wrapc_stream_size_in_dramValueStoreMemRdData_V_V);
		sprintf(wrapc_stream_size_in_dramValueStoreMemRdData_V_V, "%d\n", aesl_tmp_10 - aesl_tmp_11);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_dramValueStoreMemRdData_V_V, wrapc_stream_size_in_dramValueStoreMemRdData_V_V);
		sprintf(wrapc_stream_size_in_dramValueStoreMemRdData_V_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_dramValueStoreMemRdData_V_V, wrapc_stream_size_in_dramValueStoreMemRdData_V_V);

		// [[transaction]]
		sprintf(tvout_dramValueStoreMemWrCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dramValueStoreMemWrCmd_V, tvout_dramValueStoreMemWrCmd_V);

		sc_bv<40>* dramValueStoreMemWrCmd_V_tvout_wrapc_buffer = new sc_bv<40>[aesl_tmp_13 - aesl_tmp_14];

		// RTL Name: dramValueStoreMemWrCmd_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: dramValueStoreMemWrCmd.V.address.V(31, 0)
				{
					// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
					for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_12[i_0].address
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_12[0].address
							// regulate_c_name       : dramValueStoreMemWrCmd_V_address_V
							// input_type_conversion : (aesl_tmp_12[i_0].address).to_string(2).c_str()
							if (&(aesl_tmp_12[0].address) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> dramValueStoreMemWrCmd_V_address_V_tmp_mem;
								dramValueStoreMemWrCmd_V_address_V_tmp_mem = (aesl_tmp_12[i_0].address).to_string(2).c_str();
								dramValueStoreMemWrCmd_V_tvout_wrapc_buffer[hls_map_index].range(31, 0) = dramValueStoreMemWrCmd_V_address_V_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
			// bitslice(39, 32)
			{
				int hls_map_index = 0;
				// celement: dramValueStoreMemWrCmd.V.count.V(7, 0)
				{
					// carray: (aesl_tmp_14) => (aesl_tmp_13 - 1) @ (1)
					for (int i_0 = aesl_tmp_14; i_0 <= aesl_tmp_13 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_12[i_0].count
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_12[0].count
							// regulate_c_name       : dramValueStoreMemWrCmd_V_count_V
							// input_type_conversion : (aesl_tmp_12[i_0].count).to_string(2).c_str()
							if (&(aesl_tmp_12[0].count) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<8> dramValueStoreMemWrCmd_V_count_V_tmp_mem;
								dramValueStoreMemWrCmd_V_count_V_tmp_mem = (aesl_tmp_12[i_0].count).to_string(2).c_str();
								dramValueStoreMemWrCmd_V_tvout_wrapc_buffer[hls_map_index].range(39, 32) = dramValueStoreMemWrCmd_V_count_V_tmp_mem.range(7, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_13 - aesl_tmp_14; i++)
		{
			sprintf(tvout_dramValueStoreMemWrCmd_V, "%s\n", (dramValueStoreMemWrCmd_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dramValueStoreMemWrCmd_V, tvout_dramValueStoreMemWrCmd_V);
		}

		tcl_file.set_num(aesl_tmp_13 - aesl_tmp_14, &tcl_file.dramValueStoreMemWrCmd_V_depth);
		sprintf(tvout_dramValueStoreMemWrCmd_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dramValueStoreMemWrCmd_V, tvout_dramValueStoreMemWrCmd_V);

		// release memory allocation
		delete [] dramValueStoreMemWrCmd_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_dramValueStoreMemWrCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrCmd_V, wrapc_stream_size_out_dramValueStoreMemWrCmd_V);
		sprintf(wrapc_stream_size_out_dramValueStoreMemWrCmd_V, "%d\n", aesl_tmp_13 - aesl_tmp_14);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrCmd_V, wrapc_stream_size_out_dramValueStoreMemWrCmd_V);
		sprintf(wrapc_stream_size_out_dramValueStoreMemWrCmd_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrCmd_V, wrapc_stream_size_out_dramValueStoreMemWrCmd_V);

		// [[transaction]]
		sprintf(tvout_dramValueStoreMemWrData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_dramValueStoreMemWrData_V_V, tvout_dramValueStoreMemWrData_V_V);

		sc_bv<512>* dramValueStoreMemWrData_V_V_tvout_wrapc_buffer = new sc_bv<512>[aesl_tmp_16 - aesl_tmp_17];

		// RTL Name: dramValueStoreMemWrData_V_V
		{
			// bitslice(511, 0)
			{
				int hls_map_index = 0;
				// celement: dramValueStoreMemWrData.V.V(511, 0)
				{
					// carray: (aesl_tmp_17) => (aesl_tmp_16 - 1) @ (1)
					for (int i_0 = aesl_tmp_17; i_0 <= aesl_tmp_16 - 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : aesl_tmp_15[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : aesl_tmp_15[0]
						// regulate_c_name       : dramValueStoreMemWrData_V_V
						// input_type_conversion : (aesl_tmp_15[i_0]).to_string(2).c_str()
						if (&(aesl_tmp_15[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<512> dramValueStoreMemWrData_V_V_tmp_mem;
							dramValueStoreMemWrData_V_V_tmp_mem = (aesl_tmp_15[i_0]).to_string(2).c_str();
							dramValueStoreMemWrData_V_V_tvout_wrapc_buffer[hls_map_index].range(511, 0) = dramValueStoreMemWrData_V_V_tmp_mem.range(511, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_16 - aesl_tmp_17; i++)
		{
			sprintf(tvout_dramValueStoreMemWrData_V_V, "%s\n", (dramValueStoreMemWrData_V_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_dramValueStoreMemWrData_V_V, tvout_dramValueStoreMemWrData_V_V);
		}

		tcl_file.set_num(aesl_tmp_16 - aesl_tmp_17, &tcl_file.dramValueStoreMemWrData_V_V_depth);
		sprintf(tvout_dramValueStoreMemWrData_V_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_dramValueStoreMemWrData_V_V, tvout_dramValueStoreMemWrData_V_V);

		// release memory allocation
		delete [] dramValueStoreMemWrData_V_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_dramValueStoreMemWrData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrData_V_V, wrapc_stream_size_out_dramValueStoreMemWrData_V_V);
		sprintf(wrapc_stream_size_out_dramValueStoreMemWrData_V_V, "%d\n", aesl_tmp_16 - aesl_tmp_17);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrData_V_V, wrapc_stream_size_out_dramValueStoreMemWrData_V_V);
		sprintf(wrapc_stream_size_out_dramValueStoreMemWrData_V_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_dramValueStoreMemWrData_V_V, wrapc_stream_size_out_dramValueStoreMemWrData_V_V);

		// [[transaction]]
		sprintf(tvout_flashValueStoreMemRdCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_flashValueStoreMemRdCmd_V, tvout_flashValueStoreMemRdCmd_V);

		sc_bv<48>* flashValueStoreMemRdCmd_V_tvout_wrapc_buffer = new sc_bv<48>[aesl_tmp_19 - aesl_tmp_20];

		// RTL Name: flashValueStoreMemRdCmd_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: flashValueStoreMemRdCmd.V.address.V(31, 0)
				{
					// carray: (aesl_tmp_20) => (aesl_tmp_19 - 1) @ (1)
					for (int i_0 = aesl_tmp_20; i_0 <= aesl_tmp_19 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_18[i_0].address
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_18[0].address
							// regulate_c_name       : flashValueStoreMemRdCmd_V_address_V
							// input_type_conversion : (aesl_tmp_18[i_0].address).to_string(2).c_str()
							if (&(aesl_tmp_18[0].address) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> flashValueStoreMemRdCmd_V_address_V_tmp_mem;
								flashValueStoreMemRdCmd_V_address_V_tmp_mem = (aesl_tmp_18[i_0].address).to_string(2).c_str();
								flashValueStoreMemRdCmd_V_tvout_wrapc_buffer[hls_map_index].range(31, 0) = flashValueStoreMemRdCmd_V_address_V_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
			// bitslice(44, 32)
			{
				int hls_map_index = 0;
				// celement: flashValueStoreMemRdCmd.V.count.V(12, 0)
				{
					// carray: (aesl_tmp_20) => (aesl_tmp_19 - 1) @ (1)
					for (int i_0 = aesl_tmp_20; i_0 <= aesl_tmp_19 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_18[i_0].count
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_18[0].count
							// regulate_c_name       : flashValueStoreMemRdCmd_V_count_V
							// input_type_conversion : (aesl_tmp_18[i_0].count).to_string(2).c_str()
							if (&(aesl_tmp_18[0].count) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<13> flashValueStoreMemRdCmd_V_count_V_tmp_mem;
								flashValueStoreMemRdCmd_V_count_V_tmp_mem = (aesl_tmp_18[i_0].count).to_string(2).c_str();
								flashValueStoreMemRdCmd_V_tvout_wrapc_buffer[hls_map_index].range(44, 32) = flashValueStoreMemRdCmd_V_count_V_tmp_mem.range(12, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_19 - aesl_tmp_20; i++)
		{
			sprintf(tvout_flashValueStoreMemRdCmd_V, "%s\n", (flashValueStoreMemRdCmd_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_flashValueStoreMemRdCmd_V, tvout_flashValueStoreMemRdCmd_V);
		}

		tcl_file.set_num(aesl_tmp_19 - aesl_tmp_20, &tcl_file.flashValueStoreMemRdCmd_V_depth);
		sprintf(tvout_flashValueStoreMemRdCmd_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_flashValueStoreMemRdCmd_V, tvout_flashValueStoreMemRdCmd_V);

		// release memory allocation
		delete [] flashValueStoreMemRdCmd_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_flashValueStoreMemRdCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemRdCmd_V, wrapc_stream_size_out_flashValueStoreMemRdCmd_V);
		sprintf(wrapc_stream_size_out_flashValueStoreMemRdCmd_V, "%d\n", aesl_tmp_19 - aesl_tmp_20);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemRdCmd_V, wrapc_stream_size_out_flashValueStoreMemRdCmd_V);
		sprintf(wrapc_stream_size_out_flashValueStoreMemRdCmd_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemRdCmd_V, wrapc_stream_size_out_flashValueStoreMemRdCmd_V);

		// [[transaction]]
		sprintf(tvin_flashValueStoreMemRdData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_flashValueStoreMemRdData_V_V, tvin_flashValueStoreMemRdData_V_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_flashValueStoreMemRdData_V_V, tvin_flashValueStoreMemRdData_V_V);

		sc_bv<64>* flashValueStoreMemRdData_V_V_tvin_wrapc_buffer = new sc_bv<64>[aesl_tmp_22 - aesl_tmp_23];

		// RTL Name: flashValueStoreMemRdData_V_V
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: flashValueStoreMemRdData.V.V(63, 0)
				{
					// carray: (0) => (aesl_tmp_22 - aesl_tmp_23 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_22 - aesl_tmp_23 - 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : aesl_tmp_21[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : aesl_tmp_21[0]
						// regulate_c_name       : flashValueStoreMemRdData_V_V
						// input_type_conversion : (aesl_tmp_21[i_0]).to_string(2).c_str()
						if (&(aesl_tmp_21[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> flashValueStoreMemRdData_V_V_tmp_mem;
							flashValueStoreMemRdData_V_V_tmp_mem = (aesl_tmp_21[i_0]).to_string(2).c_str();
							flashValueStoreMemRdData_V_V_tvin_wrapc_buffer[hls_map_index].range(63, 0) = flashValueStoreMemRdData_V_V_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_22 - aesl_tmp_23; i++)
		{
			sprintf(tvin_flashValueStoreMemRdData_V_V, "%s\n", (flashValueStoreMemRdData_V_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_flashValueStoreMemRdData_V_V, tvin_flashValueStoreMemRdData_V_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_flashValueStoreMemRdData_V_V = aesl_tmp_22;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_flashValueStoreMemRdData_V_V, stream_ingress_size_flashValueStoreMemRdData_V_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_flashValueStoreMemRdData_V_V, "\n");

		for (int i = 0; i < aesl_tmp_22 - aesl_tmp_23; i++)
		{
			stream_ingress_size_flashValueStoreMemRdData_V_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_flashValueStoreMemRdData_V_V, stream_ingress_size_flashValueStoreMemRdData_V_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_flashValueStoreMemRdData_V_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_22 - aesl_tmp_23, &tcl_file.flashValueStoreMemRdData_V_V_depth);
		sprintf(tvin_flashValueStoreMemRdData_V_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_flashValueStoreMemRdData_V_V, tvin_flashValueStoreMemRdData_V_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_flashValueStoreMemRdData_V_V, tvin_flashValueStoreMemRdData_V_V);

		// release memory allocation
		delete [] flashValueStoreMemRdData_V_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_flashValueStoreMemRdData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_flashValueStoreMemRdData_V_V, wrapc_stream_size_in_flashValueStoreMemRdData_V_V);
		sprintf(wrapc_stream_size_in_flashValueStoreMemRdData_V_V, "%d\n", aesl_tmp_22 - aesl_tmp_23);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_flashValueStoreMemRdData_V_V, wrapc_stream_size_in_flashValueStoreMemRdData_V_V);
		sprintf(wrapc_stream_size_in_flashValueStoreMemRdData_V_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_flashValueStoreMemRdData_V_V, wrapc_stream_size_in_flashValueStoreMemRdData_V_V);

		// [[transaction]]
		sprintf(tvout_flashValueStoreMemWrCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_flashValueStoreMemWrCmd_V, tvout_flashValueStoreMemWrCmd_V);

		sc_bv<48>* flashValueStoreMemWrCmd_V_tvout_wrapc_buffer = new sc_bv<48>[aesl_tmp_25 - aesl_tmp_26];

		// RTL Name: flashValueStoreMemWrCmd_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: flashValueStoreMemWrCmd.V.address.V(31, 0)
				{
					// carray: (aesl_tmp_26) => (aesl_tmp_25 - 1) @ (1)
					for (int i_0 = aesl_tmp_26; i_0 <= aesl_tmp_25 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_24[i_0].address
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_24[0].address
							// regulate_c_name       : flashValueStoreMemWrCmd_V_address_V
							// input_type_conversion : (aesl_tmp_24[i_0].address).to_string(2).c_str()
							if (&(aesl_tmp_24[0].address) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> flashValueStoreMemWrCmd_V_address_V_tmp_mem;
								flashValueStoreMemWrCmd_V_address_V_tmp_mem = (aesl_tmp_24[i_0].address).to_string(2).c_str();
								flashValueStoreMemWrCmd_V_tvout_wrapc_buffer[hls_map_index].range(31, 0) = flashValueStoreMemWrCmd_V_address_V_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
			// bitslice(44, 32)
			{
				int hls_map_index = 0;
				// celement: flashValueStoreMemWrCmd.V.count.V(12, 0)
				{
					// carray: (aesl_tmp_26) => (aesl_tmp_25 - 1) @ (1)
					for (int i_0 = aesl_tmp_26; i_0 <= aesl_tmp_25 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_24[i_0].count
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_24[0].count
							// regulate_c_name       : flashValueStoreMemWrCmd_V_count_V
							// input_type_conversion : (aesl_tmp_24[i_0].count).to_string(2).c_str()
							if (&(aesl_tmp_24[0].count) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<13> flashValueStoreMemWrCmd_V_count_V_tmp_mem;
								flashValueStoreMemWrCmd_V_count_V_tmp_mem = (aesl_tmp_24[i_0].count).to_string(2).c_str();
								flashValueStoreMemWrCmd_V_tvout_wrapc_buffer[hls_map_index].range(44, 32) = flashValueStoreMemWrCmd_V_count_V_tmp_mem.range(12, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_25 - aesl_tmp_26; i++)
		{
			sprintf(tvout_flashValueStoreMemWrCmd_V, "%s\n", (flashValueStoreMemWrCmd_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_flashValueStoreMemWrCmd_V, tvout_flashValueStoreMemWrCmd_V);
		}

		tcl_file.set_num(aesl_tmp_25 - aesl_tmp_26, &tcl_file.flashValueStoreMemWrCmd_V_depth);
		sprintf(tvout_flashValueStoreMemWrCmd_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_flashValueStoreMemWrCmd_V, tvout_flashValueStoreMemWrCmd_V);

		// release memory allocation
		delete [] flashValueStoreMemWrCmd_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_flashValueStoreMemWrCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrCmd_V, wrapc_stream_size_out_flashValueStoreMemWrCmd_V);
		sprintf(wrapc_stream_size_out_flashValueStoreMemWrCmd_V, "%d\n", aesl_tmp_25 - aesl_tmp_26);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrCmd_V, wrapc_stream_size_out_flashValueStoreMemWrCmd_V);
		sprintf(wrapc_stream_size_out_flashValueStoreMemWrCmd_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrCmd_V, wrapc_stream_size_out_flashValueStoreMemWrCmd_V);

		// [[transaction]]
		sprintf(tvout_flashValueStoreMemWrData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_flashValueStoreMemWrData_V_V, tvout_flashValueStoreMemWrData_V_V);

		sc_bv<64>* flashValueStoreMemWrData_V_V_tvout_wrapc_buffer = new sc_bv<64>[aesl_tmp_28 - aesl_tmp_29];

		// RTL Name: flashValueStoreMemWrData_V_V
		{
			// bitslice(63, 0)
			{
				int hls_map_index = 0;
				// celement: flashValueStoreMemWrData.V.V(63, 0)
				{
					// carray: (aesl_tmp_29) => (aesl_tmp_28 - 1) @ (1)
					for (int i_0 = aesl_tmp_29; i_0 <= aesl_tmp_28 - 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : aesl_tmp_27[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : aesl_tmp_27[0]
						// regulate_c_name       : flashValueStoreMemWrData_V_V
						// input_type_conversion : (aesl_tmp_27[i_0]).to_string(2).c_str()
						if (&(aesl_tmp_27[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<64> flashValueStoreMemWrData_V_V_tmp_mem;
							flashValueStoreMemWrData_V_V_tmp_mem = (aesl_tmp_27[i_0]).to_string(2).c_str();
							flashValueStoreMemWrData_V_V_tvout_wrapc_buffer[hls_map_index].range(63, 0) = flashValueStoreMemWrData_V_V_tmp_mem.range(63, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_28 - aesl_tmp_29; i++)
		{
			sprintf(tvout_flashValueStoreMemWrData_V_V, "%s\n", (flashValueStoreMemWrData_V_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_flashValueStoreMemWrData_V_V, tvout_flashValueStoreMemWrData_V_V);
		}

		tcl_file.set_num(aesl_tmp_28 - aesl_tmp_29, &tcl_file.flashValueStoreMemWrData_V_V_depth);
		sprintf(tvout_flashValueStoreMemWrData_V_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_flashValueStoreMemWrData_V_V, tvout_flashValueStoreMemWrData_V_V);

		// release memory allocation
		delete [] flashValueStoreMemWrData_V_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_flashValueStoreMemWrData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrData_V_V, wrapc_stream_size_out_flashValueStoreMemWrData_V_V);
		sprintf(wrapc_stream_size_out_flashValueStoreMemWrData_V_V, "%d\n", aesl_tmp_28 - aesl_tmp_29);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrData_V_V, wrapc_stream_size_out_flashValueStoreMemWrData_V_V);
		sprintf(wrapc_stream_size_out_flashValueStoreMemWrData_V_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_flashValueStoreMemWrData_V_V, wrapc_stream_size_out_flashValueStoreMemWrData_V_V);

		// [[transaction]]
		sprintf(tvin_hashTableMemRdData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_hashTableMemRdData_V_V, tvin_hashTableMemRdData_V_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_hashTableMemRdData_V_V, tvin_hashTableMemRdData_V_V);

		sc_bv<512>* hashTableMemRdData_V_V_tvin_wrapc_buffer = new sc_bv<512>[aesl_tmp_31 - aesl_tmp_32];

		// RTL Name: hashTableMemRdData_V_V
		{
			// bitslice(511, 0)
			{
				int hls_map_index = 0;
				// celement: hashTableMemRdData.V.V(511, 0)
				{
					// carray: (0) => (aesl_tmp_31 - aesl_tmp_32 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_31 - aesl_tmp_32 - 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : aesl_tmp_30[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : aesl_tmp_30[0]
						// regulate_c_name       : hashTableMemRdData_V_V
						// input_type_conversion : (aesl_tmp_30[i_0]).to_string(2).c_str()
						if (&(aesl_tmp_30[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<512> hashTableMemRdData_V_V_tmp_mem;
							hashTableMemRdData_V_V_tmp_mem = (aesl_tmp_30[i_0]).to_string(2).c_str();
							hashTableMemRdData_V_V_tvin_wrapc_buffer[hls_map_index].range(511, 0) = hashTableMemRdData_V_V_tmp_mem.range(511, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_31 - aesl_tmp_32; i++)
		{
			sprintf(tvin_hashTableMemRdData_V_V, "%s\n", (hashTableMemRdData_V_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_hashTableMemRdData_V_V, tvin_hashTableMemRdData_V_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_hashTableMemRdData_V_V = aesl_tmp_31;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_hashTableMemRdData_V_V, stream_ingress_size_hashTableMemRdData_V_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_hashTableMemRdData_V_V, "\n");

		for (int i = 0; i < aesl_tmp_31 - aesl_tmp_32; i++)
		{
			stream_ingress_size_hashTableMemRdData_V_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_hashTableMemRdData_V_V, stream_ingress_size_hashTableMemRdData_V_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_hashTableMemRdData_V_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_31 - aesl_tmp_32, &tcl_file.hashTableMemRdData_V_V_depth);
		sprintf(tvin_hashTableMemRdData_V_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_hashTableMemRdData_V_V, tvin_hashTableMemRdData_V_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_hashTableMemRdData_V_V, tvin_hashTableMemRdData_V_V);

		// release memory allocation
		delete [] hashTableMemRdData_V_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_hashTableMemRdData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_hashTableMemRdData_V_V, wrapc_stream_size_in_hashTableMemRdData_V_V);
		sprintf(wrapc_stream_size_in_hashTableMemRdData_V_V, "%d\n", aesl_tmp_31 - aesl_tmp_32);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_hashTableMemRdData_V_V, wrapc_stream_size_in_hashTableMemRdData_V_V);
		sprintf(wrapc_stream_size_in_hashTableMemRdData_V_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_hashTableMemRdData_V_V, wrapc_stream_size_in_hashTableMemRdData_V_V);

		// [[transaction]]
		sprintf(tvout_hashTableMemRdCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_hashTableMemRdCmd_V, tvout_hashTableMemRdCmd_V);

		sc_bv<40>* hashTableMemRdCmd_V_tvout_wrapc_buffer = new sc_bv<40>[aesl_tmp_34 - aesl_tmp_35];

		// RTL Name: hashTableMemRdCmd_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: hashTableMemRdCmd.V.address.V(31, 0)
				{
					// carray: (aesl_tmp_35) => (aesl_tmp_34 - 1) @ (1)
					for (int i_0 = aesl_tmp_35; i_0 <= aesl_tmp_34 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_33[i_0].address
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_33[0].address
							// regulate_c_name       : hashTableMemRdCmd_V_address_V
							// input_type_conversion : (aesl_tmp_33[i_0].address).to_string(2).c_str()
							if (&(aesl_tmp_33[0].address) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> hashTableMemRdCmd_V_address_V_tmp_mem;
								hashTableMemRdCmd_V_address_V_tmp_mem = (aesl_tmp_33[i_0].address).to_string(2).c_str();
								hashTableMemRdCmd_V_tvout_wrapc_buffer[hls_map_index].range(31, 0) = hashTableMemRdCmd_V_address_V_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
			// bitslice(39, 32)
			{
				int hls_map_index = 0;
				// celement: hashTableMemRdCmd.V.count.V(7, 0)
				{
					// carray: (aesl_tmp_35) => (aesl_tmp_34 - 1) @ (1)
					for (int i_0 = aesl_tmp_35; i_0 <= aesl_tmp_34 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_33[i_0].count
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_33[0].count
							// regulate_c_name       : hashTableMemRdCmd_V_count_V
							// input_type_conversion : (aesl_tmp_33[i_0].count).to_string(2).c_str()
							if (&(aesl_tmp_33[0].count) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<8> hashTableMemRdCmd_V_count_V_tmp_mem;
								hashTableMemRdCmd_V_count_V_tmp_mem = (aesl_tmp_33[i_0].count).to_string(2).c_str();
								hashTableMemRdCmd_V_tvout_wrapc_buffer[hls_map_index].range(39, 32) = hashTableMemRdCmd_V_count_V_tmp_mem.range(7, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_34 - aesl_tmp_35; i++)
		{
			sprintf(tvout_hashTableMemRdCmd_V, "%s\n", (hashTableMemRdCmd_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_hashTableMemRdCmd_V, tvout_hashTableMemRdCmd_V);
		}

		tcl_file.set_num(aesl_tmp_34 - aesl_tmp_35, &tcl_file.hashTableMemRdCmd_V_depth);
		sprintf(tvout_hashTableMemRdCmd_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_hashTableMemRdCmd_V, tvout_hashTableMemRdCmd_V);

		// release memory allocation
		delete [] hashTableMemRdCmd_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_hashTableMemRdCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_hashTableMemRdCmd_V, wrapc_stream_size_out_hashTableMemRdCmd_V);
		sprintf(wrapc_stream_size_out_hashTableMemRdCmd_V, "%d\n", aesl_tmp_34 - aesl_tmp_35);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_hashTableMemRdCmd_V, wrapc_stream_size_out_hashTableMemRdCmd_V);
		sprintf(wrapc_stream_size_out_hashTableMemRdCmd_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_hashTableMemRdCmd_V, wrapc_stream_size_out_hashTableMemRdCmd_V);

		// [[transaction]]
		sprintf(tvout_hashTableMemWrData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_hashTableMemWrData_V_V, tvout_hashTableMemWrData_V_V);

		sc_bv<512>* hashTableMemWrData_V_V_tvout_wrapc_buffer = new sc_bv<512>[aesl_tmp_37 - aesl_tmp_38];

		// RTL Name: hashTableMemWrData_V_V
		{
			// bitslice(511, 0)
			{
				int hls_map_index = 0;
				// celement: hashTableMemWrData.V.V(511, 0)
				{
					// carray: (aesl_tmp_38) => (aesl_tmp_37 - 1) @ (1)
					for (int i_0 = aesl_tmp_38; i_0 <= aesl_tmp_37 - 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : aesl_tmp_36[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : aesl_tmp_36[0]
						// regulate_c_name       : hashTableMemWrData_V_V
						// input_type_conversion : (aesl_tmp_36[i_0]).to_string(2).c_str()
						if (&(aesl_tmp_36[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<512> hashTableMemWrData_V_V_tmp_mem;
							hashTableMemWrData_V_V_tmp_mem = (aesl_tmp_36[i_0]).to_string(2).c_str();
							hashTableMemWrData_V_V_tvout_wrapc_buffer[hls_map_index].range(511, 0) = hashTableMemWrData_V_V_tmp_mem.range(511, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_37 - aesl_tmp_38; i++)
		{
			sprintf(tvout_hashTableMemWrData_V_V, "%s\n", (hashTableMemWrData_V_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_hashTableMemWrData_V_V, tvout_hashTableMemWrData_V_V);
		}

		tcl_file.set_num(aesl_tmp_37 - aesl_tmp_38, &tcl_file.hashTableMemWrData_V_V_depth);
		sprintf(tvout_hashTableMemWrData_V_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_hashTableMemWrData_V_V, tvout_hashTableMemWrData_V_V);

		// release memory allocation
		delete [] hashTableMemWrData_V_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_hashTableMemWrData_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_hashTableMemWrData_V_V, wrapc_stream_size_out_hashTableMemWrData_V_V);
		sprintf(wrapc_stream_size_out_hashTableMemWrData_V_V, "%d\n", aesl_tmp_37 - aesl_tmp_38);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_hashTableMemWrData_V_V, wrapc_stream_size_out_hashTableMemWrData_V_V);
		sprintf(wrapc_stream_size_out_hashTableMemWrData_V_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_hashTableMemWrData_V_V, wrapc_stream_size_out_hashTableMemWrData_V_V);

		// [[transaction]]
		sprintf(tvout_hashTableMemWrCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_hashTableMemWrCmd_V, tvout_hashTableMemWrCmd_V);

		sc_bv<40>* hashTableMemWrCmd_V_tvout_wrapc_buffer = new sc_bv<40>[aesl_tmp_40 - aesl_tmp_41];

		// RTL Name: hashTableMemWrCmd_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: hashTableMemWrCmd.V.address.V(31, 0)
				{
					// carray: (aesl_tmp_41) => (aesl_tmp_40 - 1) @ (1)
					for (int i_0 = aesl_tmp_41; i_0 <= aesl_tmp_40 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_39[i_0].address
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_39[0].address
							// regulate_c_name       : hashTableMemWrCmd_V_address_V
							// input_type_conversion : (aesl_tmp_39[i_0].address).to_string(2).c_str()
							if (&(aesl_tmp_39[0].address) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<32> hashTableMemWrCmd_V_address_V_tmp_mem;
								hashTableMemWrCmd_V_address_V_tmp_mem = (aesl_tmp_39[i_0].address).to_string(2).c_str();
								hashTableMemWrCmd_V_tvout_wrapc_buffer[hls_map_index].range(31, 0) = hashTableMemWrCmd_V_address_V_tmp_mem.range(31, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
			// bitslice(39, 32)
			{
				int hls_map_index = 0;
				// celement: hashTableMemWrCmd.V.count.V(7, 0)
				{
					// carray: (aesl_tmp_41) => (aesl_tmp_40 - 1) @ (1)
					for (int i_0 = aesl_tmp_41; i_0 <= aesl_tmp_40 - 1; i_0 += 1)
					{
						// carray: (0) => (0) @ (1)
						for (int i_1 = 0; i_1 <= 0; i_1 += 1)
						{
							// sub                   : i_0 i_1
							// ori_name              : aesl_tmp_39[i_0].count
							// sub_1st_elem          : 0 0
							// ori_name_1st_elem     : aesl_tmp_39[0].count
							// regulate_c_name       : hashTableMemWrCmd_V_count_V
							// input_type_conversion : (aesl_tmp_39[i_0].count).to_string(2).c_str()
							if (&(aesl_tmp_39[0].count) != NULL) // check the null address if the c port is array or others
							{
								sc_lv<8> hashTableMemWrCmd_V_count_V_tmp_mem;
								hashTableMemWrCmd_V_count_V_tmp_mem = (aesl_tmp_39[i_0].count).to_string(2).c_str();
								hashTableMemWrCmd_V_tvout_wrapc_buffer[hls_map_index].range(39, 32) = hashTableMemWrCmd_V_count_V_tmp_mem.range(7, 0);
                                 		       hls_map_index++;
							}
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_40 - aesl_tmp_41; i++)
		{
			sprintf(tvout_hashTableMemWrCmd_V, "%s\n", (hashTableMemWrCmd_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_hashTableMemWrCmd_V, tvout_hashTableMemWrCmd_V);
		}

		tcl_file.set_num(aesl_tmp_40 - aesl_tmp_41, &tcl_file.hashTableMemWrCmd_V_depth);
		sprintf(tvout_hashTableMemWrCmd_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_hashTableMemWrCmd_V, tvout_hashTableMemWrCmd_V);

		// release memory allocation
		delete [] hashTableMemWrCmd_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_hashTableMemWrCmd_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_hashTableMemWrCmd_V, wrapc_stream_size_out_hashTableMemWrCmd_V);
		sprintf(wrapc_stream_size_out_hashTableMemWrCmd_V, "%d\n", aesl_tmp_40 - aesl_tmp_41);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_hashTableMemWrCmd_V, wrapc_stream_size_out_hashTableMemWrCmd_V);
		sprintf(wrapc_stream_size_out_hashTableMemWrCmd_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_hashTableMemWrCmd_V, wrapc_stream_size_out_hashTableMemWrCmd_V);

		// [[transaction]]
		sprintf(tvout_addressReturnOut_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_addressReturnOut_V_V, tvout_addressReturnOut_V_V);

		sc_bv<32>* addressReturnOut_V_V_tvout_wrapc_buffer = new sc_bv<32>[aesl_tmp_43 - aesl_tmp_44];

		// RTL Name: addressReturnOut_V_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: addressReturnOut.V.V(31, 0)
				{
					// carray: (aesl_tmp_44) => (aesl_tmp_43 - 1) @ (1)
					for (int i_0 = aesl_tmp_44; i_0 <= aesl_tmp_43 - 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : aesl_tmp_42[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : aesl_tmp_42[0]
						// regulate_c_name       : addressReturnOut_V_V
						// input_type_conversion : (aesl_tmp_42[i_0]).to_string(2).c_str()
						if (&(aesl_tmp_42[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> addressReturnOut_V_V_tmp_mem;
							addressReturnOut_V_V_tmp_mem = (aesl_tmp_42[i_0]).to_string(2).c_str();
							addressReturnOut_V_V_tvout_wrapc_buffer[hls_map_index].range(31, 0) = addressReturnOut_V_V_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_43 - aesl_tmp_44; i++)
		{
			sprintf(tvout_addressReturnOut_V_V, "%s\n", (addressReturnOut_V_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_addressReturnOut_V_V, tvout_addressReturnOut_V_V);
		}

		tcl_file.set_num(aesl_tmp_43 - aesl_tmp_44, &tcl_file.addressReturnOut_V_V_depth);
		sprintf(tvout_addressReturnOut_V_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_addressReturnOut_V_V, tvout_addressReturnOut_V_V);

		// release memory allocation
		delete [] addressReturnOut_V_V_tvout_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_out_addressReturnOut_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_addressReturnOut_V_V, wrapc_stream_size_out_addressReturnOut_V_V);
		sprintf(wrapc_stream_size_out_addressReturnOut_V_V, "%d\n", aesl_tmp_43 - aesl_tmp_44);
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_addressReturnOut_V_V, wrapc_stream_size_out_addressReturnOut_V_V);
		sprintf(wrapc_stream_size_out_addressReturnOut_V_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_OUT_addressReturnOut_V_V, wrapc_stream_size_out_addressReturnOut_V_V);

		// [[transaction]]
		sprintf(tvin_addressAssignDramIn_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_addressAssignDramIn_V_V, tvin_addressAssignDramIn_V_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignDramIn_V_V, tvin_addressAssignDramIn_V_V);

		sc_bv<32>* addressAssignDramIn_V_V_tvin_wrapc_buffer = new sc_bv<32>[aesl_tmp_46 - aesl_tmp_47];

		// RTL Name: addressAssignDramIn_V_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: addressAssignDramIn.V.V(31, 0)
				{
					// carray: (0) => (aesl_tmp_46 - aesl_tmp_47 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_46 - aesl_tmp_47 - 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : aesl_tmp_45[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : aesl_tmp_45[0]
						// regulate_c_name       : addressAssignDramIn_V_V
						// input_type_conversion : (aesl_tmp_45[i_0]).to_string(2).c_str()
						if (&(aesl_tmp_45[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> addressAssignDramIn_V_V_tmp_mem;
							addressAssignDramIn_V_V_tmp_mem = (aesl_tmp_45[i_0]).to_string(2).c_str();
							addressAssignDramIn_V_V_tvin_wrapc_buffer[hls_map_index].range(31, 0) = addressAssignDramIn_V_V_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_46 - aesl_tmp_47; i++)
		{
			sprintf(tvin_addressAssignDramIn_V_V, "%s\n", (addressAssignDramIn_V_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_addressAssignDramIn_V_V, tvin_addressAssignDramIn_V_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_addressAssignDramIn_V_V = aesl_tmp_46;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignDramIn_V_V, stream_ingress_size_addressAssignDramIn_V_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignDramIn_V_V, "\n");

		for (int i = 0; i < aesl_tmp_46 - aesl_tmp_47; i++)
		{
			stream_ingress_size_addressAssignDramIn_V_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignDramIn_V_V, stream_ingress_size_addressAssignDramIn_V_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignDramIn_V_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_46 - aesl_tmp_47, &tcl_file.addressAssignDramIn_V_V_depth);
		sprintf(tvin_addressAssignDramIn_V_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_addressAssignDramIn_V_V, tvin_addressAssignDramIn_V_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignDramIn_V_V, tvin_addressAssignDramIn_V_V);

		// release memory allocation
		delete [] addressAssignDramIn_V_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_addressAssignDramIn_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_addressAssignDramIn_V_V, wrapc_stream_size_in_addressAssignDramIn_V_V);
		sprintf(wrapc_stream_size_in_addressAssignDramIn_V_V, "%d\n", aesl_tmp_46 - aesl_tmp_47);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_addressAssignDramIn_V_V, wrapc_stream_size_in_addressAssignDramIn_V_V);
		sprintf(wrapc_stream_size_in_addressAssignDramIn_V_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_addressAssignDramIn_V_V, wrapc_stream_size_in_addressAssignDramIn_V_V);

		// [[transaction]]
		sprintf(tvin_addressAssignFlashIn_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_addressAssignFlashIn_V_V, tvin_addressAssignFlashIn_V_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignFlashIn_V_V, tvin_addressAssignFlashIn_V_V);

		sc_bv<32>* addressAssignFlashIn_V_V_tvin_wrapc_buffer = new sc_bv<32>[aesl_tmp_49 - aesl_tmp_50];

		// RTL Name: addressAssignFlashIn_V_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: addressAssignFlashIn.V.V(31, 0)
				{
					// carray: (0) => (aesl_tmp_49 - aesl_tmp_50 - 1) @ (1)
					for (int i_0 = 0; i_0 <= aesl_tmp_49 - aesl_tmp_50 - 1; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : aesl_tmp_48[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : aesl_tmp_48[0]
						// regulate_c_name       : addressAssignFlashIn_V_V
						// input_type_conversion : (aesl_tmp_48[i_0]).to_string(2).c_str()
						if (&(aesl_tmp_48[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> addressAssignFlashIn_V_V_tmp_mem;
							addressAssignFlashIn_V_V_tmp_mem = (aesl_tmp_48[i_0]).to_string(2).c_str();
							addressAssignFlashIn_V_V_tvin_wrapc_buffer[hls_map_index].range(31, 0) = addressAssignFlashIn_V_V_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < aesl_tmp_49 - aesl_tmp_50; i++)
		{
			sprintf(tvin_addressAssignFlashIn_V_V, "%s\n", (addressAssignFlashIn_V_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_addressAssignFlashIn_V_V, tvin_addressAssignFlashIn_V_V);
		}

		// dump stream ingress status to file
		sc_int<32> stream_ingress_size_addressAssignFlashIn_V_V = aesl_tmp_49;
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignFlashIn_V_V, stream_ingress_size_addressAssignFlashIn_V_V.to_string().c_str());
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignFlashIn_V_V, "\n");

		for (int i = 0; i < aesl_tmp_49 - aesl_tmp_50; i++)
		{
			stream_ingress_size_addressAssignFlashIn_V_V--;
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignFlashIn_V_V, stream_ingress_size_addressAssignFlashIn_V_V.to_string().c_str());
			aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignFlashIn_V_V, "\n");
		}

		tcl_file.set_num(aesl_tmp_49 - aesl_tmp_50, &tcl_file.addressAssignFlashIn_V_V_depth);
		sprintf(tvin_addressAssignFlashIn_V_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_addressAssignFlashIn_V_V, tvin_addressAssignFlashIn_V_V);
		aesl_fh.write(WRAPC_STREAM_INGRESS_STATUS_addressAssignFlashIn_V_V, tvin_addressAssignFlashIn_V_V);

		// release memory allocation
		delete [] addressAssignFlashIn_V_V_tvin_wrapc_buffer;

		// dump stream size
		sprintf(wrapc_stream_size_in_addressAssignFlashIn_V_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_addressAssignFlashIn_V_V, wrapc_stream_size_in_addressAssignFlashIn_V_V);
		sprintf(wrapc_stream_size_in_addressAssignFlashIn_V_V, "%d\n", aesl_tmp_49 - aesl_tmp_50);
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_addressAssignFlashIn_V_V, wrapc_stream_size_in_addressAssignFlashIn_V_V);
		sprintf(wrapc_stream_size_in_addressAssignFlashIn_V_V, "[[/transaction]] \n");
		aesl_fh.write(WRAPC_STREAM_SIZE_IN_addressAssignFlashIn_V_V, wrapc_stream_size_in_addressAssignFlashIn_V_V);

		// [[transaction]]
		sprintf(tvout_flushReq_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_flushReq_V, tvout_flushReq_V);

		sc_bv<1>* flushReq_V_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: flushReq_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: flushReq.V(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : flushReq
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : flushReq
						// regulate_c_name       : flushReq_V
						// input_type_conversion : (flushReq).to_string(2).c_str()
						if (&(flushReq) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> flushReq_V_tmp_mem;
							flushReq_V_tmp_mem = (flushReq).to_string(2).c_str();
							flushReq_V_tvout_wrapc_buffer[hls_map_index].range(0, 0) = flushReq_V_tmp_mem.range(0, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_flushReq_V, "%s\n", (flushReq_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_flushReq_V, tvout_flushReq_V);
		}

		tcl_file.set_num(1, &tcl_file.flushReq_V_depth);
		sprintf(tvout_flushReq_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_flushReq_V, tvout_flushReq_V);

		// release memory allocation
		delete [] flushReq_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_flushDone_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_flushDone_V, tvout_flushDone_V);

		sc_bv<1>* flushDone_V_tvout_wrapc_buffer = new sc_bv<1>[1];

		// RTL Name: flushDone_V
		{
			// bitslice(0, 0)
			{
				int hls_map_index = 0;
				// celement: flushDone.V(0, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : flushDone
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : flushDone
						// regulate_c_name       : flushDone_V
						// input_type_conversion : (flushDone).to_string(2).c_str()
						if (&(flushDone) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> flushDone_V_tmp_mem;
							flushDone_V_tmp_mem = (flushDone).to_string(2).c_str();
							flushDone_V_tvout_wrapc_buffer[hls_map_index].range(0, 0) = flushDone_V_tmp_mem.range(0, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_flushDone_V, "%s\n", (flushDone_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_flushDone_V, tvout_flushDone_V);
		}

		tcl_file.set_num(1, &tcl_file.flushDone_V_depth);
		sprintf(tvout_flushDone_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_flushDone_V, tvout_flushDone_V);

		// release memory allocation
		delete [] flushDone_V_tvout_wrapc_buffer;

		// push back output stream: "outData"
		for (int i = 0; i < aesl_tmp_4; i++)
		{
			outData.write(aesl_tmp_3[i]);
		}

		// push back output stream: "dramValueStoreMemRdCmd"
		for (int i = 0; i < aesl_tmp_7; i++)
		{
			dramValueStoreMemRdCmd.write(aesl_tmp_6[i]);
		}

		// push back output stream: "dramValueStoreMemWrCmd"
		for (int i = 0; i < aesl_tmp_13; i++)
		{
			dramValueStoreMemWrCmd.write(aesl_tmp_12[i]);
		}

		// push back output stream: "dramValueStoreMemWrData"
		for (int i = 0; i < aesl_tmp_16; i++)
		{
			dramValueStoreMemWrData.write(aesl_tmp_15[i]);
		}

		// push back output stream: "flashValueStoreMemRdCmd"
		for (int i = 0; i < aesl_tmp_19; i++)
		{
			flashValueStoreMemRdCmd.write(aesl_tmp_18[i]);
		}

		// push back output stream: "flashValueStoreMemWrCmd"
		for (int i = 0; i < aesl_tmp_25; i++)
		{
			flashValueStoreMemWrCmd.write(aesl_tmp_24[i]);
		}

		// push back output stream: "flashValueStoreMemWrData"
		for (int i = 0; i < aesl_tmp_28; i++)
		{
			flashValueStoreMemWrData.write(aesl_tmp_27[i]);
		}

		// push back output stream: "hashTableMemRdCmd"
		for (int i = 0; i < aesl_tmp_34; i++)
		{
			hashTableMemRdCmd.write(aesl_tmp_33[i]);
		}

		// push back output stream: "hashTableMemWrData"
		for (int i = 0; i < aesl_tmp_37; i++)
		{
			hashTableMemWrData.write(aesl_tmp_36[i]);
		}

		// push back output stream: "hashTableMemWrCmd"
		for (int i = 0; i < aesl_tmp_40; i++)
		{
			hashTableMemWrCmd.write(aesl_tmp_39[i]);
		}

		// push back output stream: "addressReturnOut"
		for (int i = 0; i < aesl_tmp_43; i++)
		{
			addressReturnOut.write(aesl_tmp_42[i]);
		}

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "inData_V_data_V"
		delete [] tvin_inData_V_data_V;
		delete [] wrapc_stream_size_in_inData_V_data_V;
		// release memory allocation: "inData_V_user_V"
		delete [] tvin_inData_V_user_V;
		delete [] wrapc_stream_size_in_inData_V_user_V;
		// release memory allocation: "inData_V_keep_V"
		delete [] tvin_inData_V_keep_V;
		delete [] wrapc_stream_size_in_inData_V_keep_V;
		// release memory allocation: "inData_V_last_V"
		delete [] tvin_inData_V_last_V;
		delete [] wrapc_stream_size_in_inData_V_last_V;
		// release memory allocation: "outData_V_data_V"
		delete [] tvout_outData_V_data_V;
		delete [] tvin_outData_V_data_V;
		delete [] wrapc_stream_size_out_outData_V_data_V;
		// release memory allocation: "outData_V_user_V"
		delete [] tvout_outData_V_user_V;
		delete [] tvin_outData_V_user_V;
		delete [] wrapc_stream_size_out_outData_V_user_V;
		// release memory allocation: "outData_V_keep_V"
		delete [] tvout_outData_V_keep_V;
		delete [] tvin_outData_V_keep_V;
		delete [] wrapc_stream_size_out_outData_V_keep_V;
		// release memory allocation: "outData_V_last_V"
		delete [] tvout_outData_V_last_V;
		delete [] tvin_outData_V_last_V;
		delete [] wrapc_stream_size_out_outData_V_last_V;
		// release memory allocation: "dramValueStoreMemRdCmd_V"
		delete [] tvout_dramValueStoreMemRdCmd_V;
		delete [] tvin_dramValueStoreMemRdCmd_V;
		delete [] wrapc_stream_size_out_dramValueStoreMemRdCmd_V;
		// release memory allocation: "dramValueStoreMemRdData_V_V"
		delete [] tvin_dramValueStoreMemRdData_V_V;
		delete [] wrapc_stream_size_in_dramValueStoreMemRdData_V_V;
		// release memory allocation: "dramValueStoreMemWrCmd_V"
		delete [] tvout_dramValueStoreMemWrCmd_V;
		delete [] tvin_dramValueStoreMemWrCmd_V;
		delete [] wrapc_stream_size_out_dramValueStoreMemWrCmd_V;
		// release memory allocation: "dramValueStoreMemWrData_V_V"
		delete [] tvout_dramValueStoreMemWrData_V_V;
		delete [] tvin_dramValueStoreMemWrData_V_V;
		delete [] wrapc_stream_size_out_dramValueStoreMemWrData_V_V;
		// release memory allocation: "flashValueStoreMemRdCmd_V"
		delete [] tvout_flashValueStoreMemRdCmd_V;
		delete [] tvin_flashValueStoreMemRdCmd_V;
		delete [] wrapc_stream_size_out_flashValueStoreMemRdCmd_V;
		// release memory allocation: "flashValueStoreMemRdData_V_V"
		delete [] tvin_flashValueStoreMemRdData_V_V;
		delete [] wrapc_stream_size_in_flashValueStoreMemRdData_V_V;
		// release memory allocation: "flashValueStoreMemWrCmd_V"
		delete [] tvout_flashValueStoreMemWrCmd_V;
		delete [] tvin_flashValueStoreMemWrCmd_V;
		delete [] wrapc_stream_size_out_flashValueStoreMemWrCmd_V;
		// release memory allocation: "flashValueStoreMemWrData_V_V"
		delete [] tvout_flashValueStoreMemWrData_V_V;
		delete [] tvin_flashValueStoreMemWrData_V_V;
		delete [] wrapc_stream_size_out_flashValueStoreMemWrData_V_V;
		// release memory allocation: "hashTableMemRdData_V_V"
		delete [] tvin_hashTableMemRdData_V_V;
		delete [] wrapc_stream_size_in_hashTableMemRdData_V_V;
		// release memory allocation: "hashTableMemRdCmd_V"
		delete [] tvout_hashTableMemRdCmd_V;
		delete [] tvin_hashTableMemRdCmd_V;
		delete [] wrapc_stream_size_out_hashTableMemRdCmd_V;
		// release memory allocation: "hashTableMemWrData_V_V"
		delete [] tvout_hashTableMemWrData_V_V;
		delete [] tvin_hashTableMemWrData_V_V;
		delete [] wrapc_stream_size_out_hashTableMemWrData_V_V;
		// release memory allocation: "hashTableMemWrCmd_V"
		delete [] tvout_hashTableMemWrCmd_V;
		delete [] tvin_hashTableMemWrCmd_V;
		delete [] wrapc_stream_size_out_hashTableMemWrCmd_V;
		// release memory allocation: "addressReturnOut_V_V"
		delete [] tvout_addressReturnOut_V_V;
		delete [] tvin_addressReturnOut_V_V;
		delete [] wrapc_stream_size_out_addressReturnOut_V_V;
		// release memory allocation: "addressAssignDramIn_V_V"
		delete [] tvin_addressAssignDramIn_V_V;
		delete [] wrapc_stream_size_in_addressAssignDramIn_V_V;
		// release memory allocation: "addressAssignFlashIn_V_V"
		delete [] tvin_addressAssignFlashIn_V_V;
		delete [] wrapc_stream_size_in_addressAssignFlashIn_V_V;
		// release memory allocation: "flushReq_V"
		delete [] tvout_flushReq_V;
		// release memory allocation: "flushAck_V"
		delete [] tvin_flushAck_V;
		// release memory allocation: "flushDone_V"
		delete [] tvout_flushDone_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

