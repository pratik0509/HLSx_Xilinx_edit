// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module splitter (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        hashTable2splitter_V_dout,
        hashTable2splitter_V_empty_n,
        hashTable2splitter_V_read,
        splitter2valueStoreF_1_din,
        splitter2valueStoreF_1_full_n,
        splitter2valueStoreF_1_write,
        splitter2valueStoreD_1_din,
        splitter2valueStoreD_1_full_n,
        splitter2valueStoreD_1_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [255:0] hashTable2splitter_V_dout;
input   hashTable2splitter_V_empty_n;
output   hashTable2splitter_V_read;
output  [255:0] splitter2valueStoreF_1_din;
input   splitter2valueStoreF_1_full_n;
output   splitter2valueStoreF_1_write;
output  [255:0] splitter2valueStoreD_1_din;
input   splitter2valueStoreD_1_full_n;
output   splitter2valueStoreD_1_write;
output   start_out;
output   start_write;

reg ap_done;
reg ap_idle;
reg hashTable2splitter_V_read;
reg splitter2valueStoreF_1_write;
reg splitter2valueStoreD_1_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    internal_ap_ready;
wire   [0:0] tmp_nbreadreq_fu_52_p3;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] tmp_reg_201;
reg   [0:0] tmp_reg_201_pp0_iter1_reg;
reg   [0:0] is_validFlag_loc_i_reg_92;
reg   [0:0] dramOrFlash_V_1_loc_s_reg_104;
reg    ap_predicate_op32_write_state3;
reg    ap_predicate_op34_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] is_validFlag;
reg   [0:0] dramOrFlash_V_1;
reg    hashTable2splitter_V_blk_n;
wire    ap_block_pp0_stage0;
reg    splitter2valueStoreF_1_blk_n;
reg    splitter2valueStoreD_1_blk_n;
reg   [255:0] tmp92_reg_205;
reg   [255:0] tmp92_reg_205_pp0_iter1_reg;
wire   [0:0] tmp_SOP_V_fu_135_p3;
reg   [0:0] tmp_SOP_V_reg_212;
wire   [0:0] not_i_fu_153_p2;
reg   [0:0] not_i_reg_216;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80;
reg   [0:0] ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80;
reg   [0:0] ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92;
reg   [0:0] ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92;
wire   [0:0] ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104;
reg   [0:0] ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104;
reg   [0:0] ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4;
wire   [0:0] p_is_validFlag_flag_i_fu_181_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114;
reg   [0:0] ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4;
wire   [0:0] not_din_EOP_V_assign_fu_188_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] p_Result_i_fu_143_p4;
wire   [0:0] tmp_2_fu_174_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_194;
reg    ap_condition_96;
reg    ap_condition_151;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 tmp_reg_201 = 1'd0;
#0 tmp_reg_201_pp0_iter1_reg = 1'd0;
#0 is_validFlag_loc_i_reg_92 = 1'd0;
#0 dramOrFlash_V_1_loc_s_reg_104 = 1'd0;
#0 is_validFlag = 1'd0;
#0 dramOrFlash_V_1 = 1'd0;
#0 tmp92_reg_205 = 256'd0;
#0 tmp92_reg_205_pp0_iter1_reg = 256'd0;
#0 tmp_SOP_V_reg_212 = 1'd0;
#0 not_i_reg_216 = 1'd0;
#0 ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 = 1'd0;
#0 ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 = 1'd0;
#0 ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 = 1'd0;
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 <= 1'd0;
    end else begin
        if ((1'b1 == ap_condition_96)) begin
            if (((tmp_SOP_V_fu_135_p3 == 1'd1) & (tmp_nbreadreq_fu_52_p3 == 1'd1))) begin
                ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 <= not_i_fu_153_p2;
            end else if ((1'b1 == 1'b1)) begin
                ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 <= ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104;
            end
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 <= 1'd0;
    end else begin
        if ((1'b1 == ap_condition_96)) begin
            if (((tmp_SOP_V_fu_135_p3 == 1'd1) & (tmp_nbreadreq_fu_52_p3 == 1'd1))) begin
                ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 <= 1'd1;
            end else if ((1'b1 == 1'b1)) begin
                ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 <= ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80;
            end
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 <= 1'd0;
    end else begin
        if ((1'b1 == ap_condition_96)) begin
            if (((tmp_SOP_V_fu_135_p3 == 1'd1) & (tmp_nbreadreq_fu_52_p3 == 1'd1))) begin
                ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 <= 1'd1;
            end else if ((1'b1 == 1'b1)) begin
                ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 <= ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92;
            end
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dramOrFlash_V_1 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_201 == 1'd1) & (tmp_SOP_V_reg_212 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dramOrFlash_V_1 <= not_i_reg_216;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dramOrFlash_V_1_loc_s_reg_104 <= 1'd0;
    end else begin
        if ((1'b1 == ap_condition_151)) begin
            if (((tmp_SOP_V_reg_212 == 1'd0) & (tmp_reg_201 == 1'd1))) begin
                dramOrFlash_V_1_loc_s_reg_104 <= dramOrFlash_V_1;
            end else if ((1'b1 == 1'b1)) begin
                dramOrFlash_V_1_loc_s_reg_104 <= ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104;
            end
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        is_validFlag <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_201 == 1'd1) & (ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            is_validFlag <= ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        is_validFlag_loc_i_reg_92 <= 1'd0;
    end else begin
        if ((1'b1 == ap_condition_151)) begin
            if (((tmp_SOP_V_reg_212 == 1'd0) & (tmp_reg_201 == 1'd1))) begin
                is_validFlag_loc_i_reg_92 <= is_validFlag;
            end else if ((1'b1 == 1'b1)) begin
                is_validFlag_loc_i_reg_92 <= ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92;
            end
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        not_i_reg_216 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_SOP_V_fu_135_p3 == 1'd1) & (tmp_nbreadreq_fu_52_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            not_i_reg_216 <= not_i_fu_153_p2;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp92_reg_205 <= 256'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_52_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tmp92_reg_205 <= hashTable2splitter_V_dout;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp92_reg_205_pp0_iter1_reg <= 256'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tmp92_reg_205_pp0_iter1_reg <= tmp92_reg_205;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_SOP_V_reg_212 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_52_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tmp_SOP_V_reg_212 <= hashTable2splitter_V_dout[32'd124];
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_reg_201 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tmp_reg_201 <= hashTable2splitter_V_empty_n;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_reg_201_pp0_iter1_reg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tmp_reg_201_pp0_iter1_reg <= tmp_reg_201;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_194)) begin
        if ((ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 == 1'd0)) begin
            ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 = ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4;
        end else if ((ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 == 1'd1)) begin
            ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 = p_is_validFlag_flag_i_fu_181_p2;
        end else begin
            ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 = ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114;
        end
    end else begin
        ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 = ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114;
    end
end

always @ (*) begin
    if (((tmp_SOP_V_reg_212 == 1'd0) & (tmp_reg_201 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4 = 1'd0;
    end else begin
        ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4 = ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80;
    end
end

always @ (*) begin
    if (((tmp_SOP_V_reg_212 == 1'd0) & (tmp_reg_201 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 = is_validFlag;
    end else begin
        ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 = ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_194)) begin
        if ((ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 == 1'd0)) begin
            ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 = 1'd1;
        end else if ((ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 == 1'd1)) begin
            ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 = not_din_EOP_V_assign_fu_188_p2;
        end else begin
            ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 = ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125;
        end
    end else begin
        ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 = ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_52_p3 == 1'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        hashTable2splitter_V_blk_n = hashTable2splitter_V_empty_n;
    end else begin
        hashTable2splitter_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_52_p3 == 1'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hashTable2splitter_V_read = 1'b1;
    end else begin
        hashTable2splitter_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op34_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        splitter2valueStoreD_1_blk_n = splitter2valueStoreD_1_full_n;
    end else begin
        splitter2valueStoreD_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op34_write_state3 == 1'b1))) begin
        splitter2valueStoreD_1_write = 1'b1;
    end else begin
        splitter2valueStoreD_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op32_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        splitter2valueStoreF_1_blk_n = splitter2valueStoreF_1_full_n;
    end else begin
        splitter2valueStoreF_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op32_write_state3 == 1'b1))) begin
        splitter2valueStoreF_1_write = 1'b1;
    end else begin
        splitter2valueStoreF_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((splitter2valueStoreD_1_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)) | ((splitter2valueStoreF_1_full_n == 1'b0) & (ap_predicate_op32_write_state3 == 1'b1)))) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_52_p3 == 1'd1) & (hashTable2splitter_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((splitter2valueStoreD_1_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)) | ((splitter2valueStoreF_1_full_n == 1'b0) & (ap_predicate_op32_write_state3 == 1'b1)))) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_52_p3 == 1'd1) & (hashTable2splitter_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((splitter2valueStoreD_1_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)) | ((splitter2valueStoreF_1_full_n == 1'b0) & (ap_predicate_op32_write_state3 == 1'b1)))) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_52_p3 == 1'd1) & (hashTable2splitter_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_52_p3 == 1'd1) & (hashTable2splitter_V_empty_n == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((splitter2valueStoreD_1_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)) | ((splitter2valueStoreF_1_full_n == 1'b0) & (ap_predicate_op32_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_condition_151 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_194 = ((tmp_reg_201 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_96 = ((1'b0 == ap_block_pp0_stage0_11001) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104 = 'bx;

assign ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80 = 'bx;

assign ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92 = 'bx;

assign ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114 = 'bx;

assign ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125 = 'bx;

always @ (*) begin
    ap_predicate_op32_write_state3 = ((dramOrFlash_V_1_loc_s_reg_104 == 1'd0) & (is_validFlag_loc_i_reg_92 == 1'd1) & (tmp_reg_201_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op34_write_state3 = ((dramOrFlash_V_1_loc_s_reg_104 == 1'd1) & (is_validFlag_loc_i_reg_92 == 1'd1) & (tmp_reg_201_pp0_iter1_reg == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign not_din_EOP_V_assign_fu_188_p2 = (tmp_2_fu_174_p3 ^ 1'd1);

assign not_i_fu_153_p2 = ((p_Result_i_fu_143_p4 < 32'd2049) ? 1'b1 : 1'b0);

assign p_Result_i_fu_143_p4 = {{hashTable2splitter_V_dout[39:8]}};

assign p_is_validFlag_flag_i_fu_181_p2 = (tmp_2_fu_174_p3 | ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4);

assign splitter2valueStoreD_1_din = tmp92_reg_205_pp0_iter1_reg;

assign splitter2valueStoreF_1_din = tmp92_reg_205_pp0_iter1_reg;

assign start_out = real_start;

assign tmp_2_fu_174_p3 = tmp92_reg_205[32'd127];

assign tmp_SOP_V_fu_135_p3 = hashTable2splitter_V_dout[32'd124];

assign tmp_nbreadreq_fu_52_p3 = hashTable2splitter_V_empty_n;

endmodule //splitter
