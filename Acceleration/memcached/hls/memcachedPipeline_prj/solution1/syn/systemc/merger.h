// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _merger_HH_
#define _merger_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct merger : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<256> > valueStoreDram2merge_1_dout;
    sc_in< sc_logic > valueStoreDram2merge_1_empty_n;
    sc_out< sc_logic > valueStoreDram2merge_1_read;
    sc_in< sc_lv<256> > valueStoreFlash2merg_1_dout;
    sc_in< sc_logic > valueStoreFlash2merg_1_empty_n;
    sc_out< sc_logic > valueStoreFlash2merg_1_read;
    sc_out< sc_lv<256> > merger2responseForma_1_din;
    sc_in< sc_logic > merger2responseForma_1_full_n;
    sc_out< sc_logic > merger2responseForma_1_write;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;


    // Module declarations
    merger(sc_module_name name);
    SC_HAS_PROCESS(merger);

    ~merger();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<1> > grp_nbreadreq_fu_44_p3;
    sc_signal< sc_lv<1> > grp_nbreadreq_fu_52_p3;
    sc_signal< bool > ap_predicate_op8_read_state1;
    sc_signal< bool > ap_predicate_op11_read_state1;
    sc_signal< bool > ap_predicate_op16_read_state1;
    sc_signal< bool > ap_predicate_op21_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<1> > mergerState_load_reg_137;
    sc_signal< sc_lv<1> > tmp_reg_145;
    sc_signal< sc_lv<1> > tmp_136_reg_149;
    sc_signal< bool > ap_predicate_op32_write_state2;
    sc_signal< bool > ap_predicate_op35_write_state2;
    sc_signal< sc_lv<1> > dramOrFlash_V_load_reg_141;
    sc_signal< sc_lv<1> > tmp_135_reg_153;
    sc_signal< bool > ap_predicate_op39_write_state2;
    sc_signal< sc_lv<1> > tmp_134_reg_161;
    sc_signal< bool > ap_predicate_op43_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > mergerState;
    sc_signal< sc_lv<1> > dramOrFlash_V;
    sc_signal< sc_logic > valueStoreFlash2merg_1_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > merger2responseForma_1_blk_n;
    sc_signal< sc_logic > valueStoreDram2merge_1_blk_n;
    sc_signal< sc_lv<256> > reg_91;
    sc_signal< sc_lv<256> > reg_96;
    sc_signal< sc_lv<1> > tmp_EOP_V_4_fu_121_p3;
    sc_signal< sc_lv<1> > tmp_EOP_V_fu_129_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_141;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<256> ap_const_lv256_lc_1;
    // Thread declarations
    void thread_ap_clk_pos_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_141();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_predicate_op11_read_state1();
    void thread_ap_predicate_op16_read_state1();
    void thread_ap_predicate_op21_read_state1();
    void thread_ap_predicate_op32_write_state2();
    void thread_ap_predicate_op35_write_state2();
    void thread_ap_predicate_op39_write_state2();
    void thread_ap_predicate_op43_write_state2();
    void thread_ap_predicate_op8_read_state1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_grp_nbreadreq_fu_44_p3();
    void thread_grp_nbreadreq_fu_52_p3();
    void thread_internal_ap_ready();
    void thread_merger2responseForma_1_blk_n();
    void thread_merger2responseForma_1_din();
    void thread_merger2responseForma_1_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_EOP_V_4_fu_121_p3();
    void thread_tmp_EOP_V_fu_129_p3();
    void thread_valueStoreDram2merge_1_blk_n();
    void thread_valueStoreDram2merge_1_read();
    void thread_valueStoreFlash2merg_1_blk_n();
    void thread_valueStoreFlash2merg_1_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
