// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "merger.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic merger::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic merger::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> merger::ap_ST_fsm_pp0_stage0 = "1";
const bool merger::ap_const_boolean_1 = true;
const sc_lv<32> merger::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> merger::ap_const_lv1_0 = "0";
const sc_lv<1> merger::ap_const_lv1_1 = "1";
const bool merger::ap_const_boolean_0 = false;
const sc_lv<32> merger::ap_const_lv32_7F = "1111111";
const sc_lv<256> merger::ap_const_lv256_lc_1 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

merger::merger(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_pos_reset_);
    dont_initialize();
    sensitive << ( ap_rst.pos() );
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( valueStoreDram2merge_1_empty_n );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( valueStoreFlash2merg_1_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );
    sensitive << ( merger2responseForma_1_full_n );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op39_write_state2 );
    sensitive << ( ap_predicate_op43_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( valueStoreDram2merge_1_empty_n );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( valueStoreFlash2merg_1_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );
    sensitive << ( merger2responseForma_1_full_n );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op39_write_state2 );
    sensitive << ( ap_predicate_op43_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( valueStoreDram2merge_1_empty_n );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( valueStoreFlash2merg_1_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );
    sensitive << ( merger2responseForma_1_full_n );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op39_write_state2 );
    sensitive << ( ap_predicate_op43_write_state2 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( valueStoreDram2merge_1_empty_n );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( valueStoreFlash2merg_1_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( merger2responseForma_1_full_n );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op39_write_state2 );
    sensitive << ( ap_predicate_op43_write_state2 );

    SC_METHOD(thread_ap_condition_141);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( real_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_predicate_op11_read_state1);
    sensitive << ( grp_nbreadreq_fu_44_p3 );
    sensitive << ( mergerState );

    SC_METHOD(thread_ap_predicate_op16_read_state1);
    sensitive << ( grp_nbreadreq_fu_44_p3 );
    sensitive << ( mergerState );
    sensitive << ( dramOrFlash_V );

    SC_METHOD(thread_ap_predicate_op21_read_state1);
    sensitive << ( grp_nbreadreq_fu_52_p3 );
    sensitive << ( mergerState );
    sensitive << ( dramOrFlash_V );

    SC_METHOD(thread_ap_predicate_op32_write_state2);
    sensitive << ( mergerState_load_reg_137 );
    sensitive << ( tmp_reg_145 );
    sensitive << ( tmp_136_reg_149 );

    SC_METHOD(thread_ap_predicate_op35_write_state2);
    sensitive << ( mergerState_load_reg_137 );
    sensitive << ( tmp_reg_145 );

    SC_METHOD(thread_ap_predicate_op39_write_state2);
    sensitive << ( mergerState_load_reg_137 );
    sensitive << ( dramOrFlash_V_load_reg_141 );
    sensitive << ( tmp_135_reg_153 );

    SC_METHOD(thread_ap_predicate_op43_write_state2);
    sensitive << ( mergerState_load_reg_137 );
    sensitive << ( dramOrFlash_V_load_reg_141 );
    sensitive << ( tmp_134_reg_161 );

    SC_METHOD(thread_ap_predicate_op8_read_state1);
    sensitive << ( grp_nbreadreq_fu_44_p3 );
    sensitive << ( grp_nbreadreq_fu_52_p3 );
    sensitive << ( mergerState );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( real_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_grp_nbreadreq_fu_44_p3);
    sensitive << ( valueStoreFlash2merg_1_empty_n );

    SC_METHOD(thread_grp_nbreadreq_fu_52_p3);
    sensitive << ( valueStoreDram2merge_1_empty_n );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_merger2responseForma_1_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( merger2responseForma_1_full_n );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op39_write_state2 );
    sensitive << ( ap_predicate_op43_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_merger2responseForma_1_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op39_write_state2 );
    sensitive << ( ap_predicate_op43_write_state2 );
    sensitive << ( reg_91 );
    sensitive << ( reg_96 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_merger2responseForma_1_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( ap_predicate_op35_write_state2 );
    sensitive << ( ap_predicate_op39_write_state2 );
    sensitive << ( ap_predicate_op43_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_EOP_V_4_fu_121_p3);
    sensitive << ( valueStoreFlash2merg_1_dout );

    SC_METHOD(thread_tmp_EOP_V_fu_129_p3);
    sensitive << ( valueStoreDram2merge_1_dout );

    SC_METHOD(thread_valueStoreDram2merge_1_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( valueStoreDram2merge_1_empty_n );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_valueStoreDram2merge_1_read);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_valueStoreFlash2merg_1_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( valueStoreFlash2merg_1_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_valueStoreFlash2merg_1_read);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    mergerState_load_reg_137 = "0";
    tmp_reg_145 = "0";
    tmp_136_reg_149 = "0";
    dramOrFlash_V_load_reg_141 = "0";
    tmp_135_reg_153 = "0";
    tmp_134_reg_161 = "0";
    mergerState = "0";
    dramOrFlash_V = "0";
    reg_91 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    reg_96 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "merger_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, valueStoreDram2merge_1_dout, "(port)valueStoreDram2merge_1_dout");
    sc_trace(mVcdFile, valueStoreDram2merge_1_empty_n, "(port)valueStoreDram2merge_1_empty_n");
    sc_trace(mVcdFile, valueStoreDram2merge_1_read, "(port)valueStoreDram2merge_1_read");
    sc_trace(mVcdFile, valueStoreFlash2merg_1_dout, "(port)valueStoreFlash2merg_1_dout");
    sc_trace(mVcdFile, valueStoreFlash2merg_1_empty_n, "(port)valueStoreFlash2merg_1_empty_n");
    sc_trace(mVcdFile, valueStoreFlash2merg_1_read, "(port)valueStoreFlash2merg_1_read");
    sc_trace(mVcdFile, merger2responseForma_1_din, "(port)merger2responseForma_1_din");
    sc_trace(mVcdFile, merger2responseForma_1_full_n, "(port)merger2responseForma_1_full_n");
    sc_trace(mVcdFile, merger2responseForma_1_write, "(port)merger2responseForma_1_write");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, grp_nbreadreq_fu_44_p3, "grp_nbreadreq_fu_44_p3");
    sc_trace(mVcdFile, grp_nbreadreq_fu_52_p3, "grp_nbreadreq_fu_52_p3");
    sc_trace(mVcdFile, ap_predicate_op8_read_state1, "ap_predicate_op8_read_state1");
    sc_trace(mVcdFile, ap_predicate_op11_read_state1, "ap_predicate_op11_read_state1");
    sc_trace(mVcdFile, ap_predicate_op16_read_state1, "ap_predicate_op16_read_state1");
    sc_trace(mVcdFile, ap_predicate_op21_read_state1, "ap_predicate_op21_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, mergerState_load_reg_137, "mergerState_load_reg_137");
    sc_trace(mVcdFile, tmp_reg_145, "tmp_reg_145");
    sc_trace(mVcdFile, tmp_136_reg_149, "tmp_136_reg_149");
    sc_trace(mVcdFile, ap_predicate_op32_write_state2, "ap_predicate_op32_write_state2");
    sc_trace(mVcdFile, ap_predicate_op35_write_state2, "ap_predicate_op35_write_state2");
    sc_trace(mVcdFile, dramOrFlash_V_load_reg_141, "dramOrFlash_V_load_reg_141");
    sc_trace(mVcdFile, tmp_135_reg_153, "tmp_135_reg_153");
    sc_trace(mVcdFile, ap_predicate_op39_write_state2, "ap_predicate_op39_write_state2");
    sc_trace(mVcdFile, tmp_134_reg_161, "tmp_134_reg_161");
    sc_trace(mVcdFile, ap_predicate_op43_write_state2, "ap_predicate_op43_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, mergerState, "mergerState");
    sc_trace(mVcdFile, dramOrFlash_V, "dramOrFlash_V");
    sc_trace(mVcdFile, valueStoreFlash2merg_1_blk_n, "valueStoreFlash2merg_1_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, merger2responseForma_1_blk_n, "merger2responseForma_1_blk_n");
    sc_trace(mVcdFile, valueStoreDram2merge_1_blk_n, "valueStoreDram2merge_1_blk_n");
    sc_trace(mVcdFile, reg_91, "reg_91");
    sc_trace(mVcdFile, reg_96, "reg_96");
    sc_trace(mVcdFile, tmp_EOP_V_4_fu_121_p3, "tmp_EOP_V_4_fu_121_p3");
    sc_trace(mVcdFile, tmp_EOP_V_fu_129_p3, "tmp_EOP_V_fu_129_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_141, "ap_condition_141");
#endif

    }
}

merger::~merger() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void merger::thread_ap_clk_pos_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter1 = real_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dramOrFlash_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_141.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) {
                dramOrFlash_V = ap_const_lv1_0;
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) {
                dramOrFlash_V = ap_const_lv1_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dramOrFlash_V_load_reg_141 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            dramOrFlash_V_load_reg_141 = dramOrFlash_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        mergerState = ap_const_lv1_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
              esl_seteq<1,1,1>(grp_nbreadreq_fu_44_p3.read(), ap_const_lv1_1) && 
              esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_1) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, tmp_EOP_V_4_fu_121_p3.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
              esl_seteq<1,1,1>(grp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1) && 
              esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_1) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, dramOrFlash_V.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, tmp_EOP_V_fu_129_p3.read())))) {
            mergerState = ap_const_lv1_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
                     esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
                     esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
            mergerState = ap_const_lv1_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        mergerState_load_reg_137 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            mergerState_load_reg_137 = mergerState.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        reg_91 = ap_const_lv256_lc_1;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
              esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
              esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
            reg_91 = valueStoreDram2merge_1_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        reg_96 = ap_const_lv256_lc_1;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
              esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
              esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
            reg_96 = valueStoreFlash2merg_1_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_134_reg_161 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, dramOrFlash_V.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            tmp_134_reg_161 =  (sc_lv<1>) (valueStoreDram2merge_1_empty_n.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_135_reg_153 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            tmp_135_reg_153 =  (sc_lv<1>) (valueStoreFlash2merg_1_empty_n.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_136_reg_149 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_44_p3.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            tmp_136_reg_149 =  (sc_lv<1>) (valueStoreDram2merge_1_empty_n.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_reg_145 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            tmp_reg_145 =  (sc_lv<1>) (valueStoreFlash2merg_1_empty_n.read());
        }
    }
}

void merger::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void merger::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void merger::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreDram2merge_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreFlash2merg_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreFlash2merg_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreDram2merge_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op39_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op43_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void merger::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreDram2merge_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreFlash2merg_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreFlash2merg_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreDram2merge_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op39_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op43_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void merger::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreDram2merge_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreFlash2merg_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreFlash2merg_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreDram2merge_1_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op39_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op43_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void merger::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreDram2merge_1_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreFlash2merg_1_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreFlash2merg_1_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, valueStoreDram2merge_1_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void merger::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op39_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, merger2responseForma_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op43_write_state2.read())));
}

void merger::thread_ap_condition_141() {
    ap_condition_141 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void merger::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void merger::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void merger::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = real_start.read();
}

void merger::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void merger::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void merger::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void merger::thread_ap_predicate_op11_read_state1() {
    ap_predicate_op11_read_state1 = (esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(grp_nbreadreq_fu_44_p3.read(), ap_const_lv1_1));
}

void merger::thread_ap_predicate_op16_read_state1() {
    ap_predicate_op16_read_state1 = (esl_seteq<1,1,1>(grp_nbreadreq_fu_44_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V.read()));
}

void merger::thread_ap_predicate_op21_read_state1() {
    ap_predicate_op21_read_state1 = (esl_seteq<1,1,1>(grp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, dramOrFlash_V.read()));
}

void merger::thread_ap_predicate_op32_write_state2() {
    ap_predicate_op32_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_137.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_145.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_136_reg_149.read()));
}

void merger::thread_ap_predicate_op35_write_state2() {
    ap_predicate_op35_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, mergerState_load_reg_137.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_145.read()));
}

void merger::thread_ap_predicate_op39_write_state2() {
    ap_predicate_op39_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, mergerState_load_reg_137.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, dramOrFlash_V_load_reg_141.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_135_reg_153.read()));
}

void merger::thread_ap_predicate_op43_write_state2() {
    ap_predicate_op43_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, mergerState_load_reg_137.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, dramOrFlash_V_load_reg_141.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_134_reg_161.read()));
}

void merger::thread_ap_predicate_op8_read_state1() {
    ap_predicate_op8_read_state1 = (esl_seteq<1,1,1>(mergerState.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, grp_nbreadreq_fu_44_p3.read()) && esl_seteq<1,1,1>(grp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1));
}

void merger::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void merger::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void merger::thread_grp_nbreadreq_fu_44_p3() {
    grp_nbreadreq_fu_44_p3 =  (sc_lv<1>) (valueStoreFlash2merg_1_empty_n.read());
}

void merger::thread_grp_nbreadreq_fu_52_p3() {
    grp_nbreadreq_fu_52_p3 =  (sc_lv<1>) (valueStoreDram2merge_1_empty_n.read());
}

void merger::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void merger::thread_merger2responseForma_1_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op39_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op43_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        merger2responseForma_1_blk_n = merger2responseForma_1_full_n.read();
    } else {
        merger2responseForma_1_blk_n = ap_const_logic_1;
    }
}

void merger::thread_merger2responseForma_1_din() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op39_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)))) {
        merger2responseForma_1_din = reg_96.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op43_write_state2.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)))) {
        merger2responseForma_1_din = reg_91.read();
    } else {
        merger2responseForma_1_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void merger::thread_merger2responseForma_1_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op35_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op39_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op43_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        merger2responseForma_1_write = ap_const_logic_1;
    } else {
        merger2responseForma_1_write = ap_const_logic_0;
    }
}

void merger::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void merger::thread_start_out() {
    start_out = real_start.read();
}

void merger::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void merger::thread_tmp_EOP_V_4_fu_121_p3() {
    tmp_EOP_V_4_fu_121_p3 = valueStoreFlash2merg_1_dout.read().range(127, 127);
}

void merger::thread_tmp_EOP_V_fu_129_p3() {
    tmp_EOP_V_fu_129_p3 = valueStoreDram2merge_1_dout.read().range(127, 127);
}

void merger::thread_valueStoreDram2merge_1_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
          !(esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read()) && 
          !(esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        valueStoreDram2merge_1_blk_n = valueStoreDram2merge_1_empty_n.read();
    } else {
        valueStoreDram2merge_1_blk_n = ap_const_logic_1;
    }
}

void merger::thread_valueStoreDram2merge_1_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        valueStoreDram2merge_1_read = ap_const_logic_1;
    } else {
        valueStoreDram2merge_1_read = ap_const_logic_0;
    }
}

void merger::thread_valueStoreFlash2merg_1_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
          !(esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read()) && 
          !(esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        valueStoreFlash2merg_1_blk_n = valueStoreFlash2merg_1_empty_n.read();
    } else {
        valueStoreFlash2merg_1_blk_n = ap_const_logic_1;
    }
}

void merger::thread_valueStoreFlash2merg_1_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        valueStoreFlash2merg_1_read = ap_const_logic_1;
    } else {
        valueStoreFlash2merg_1_read = ap_const_logic_0;
    }
}

void merger::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

