// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dispatch_HH_
#define _dispatch_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dispatch : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<45> > demux2getPath_V_dout;
    sc_in< sc_logic > demux2getPath_V_empty_n;
    sc_out< sc_logic > demux2getPath_V_read;
    sc_out< sc_lv<12> > disp2rec_V_V_din;
    sc_in< sc_logic > disp2rec_V_V_full_n;
    sc_out< sc_logic > disp2rec_V_V_write;
    sc_in< sc_logic > memRdCmd_V_TREADY;
    sc_out< sc_lv<40> > memRdCmd_V_TDATA;
    sc_out< sc_logic > memRdCmd_V_TVALID;


    // Module declarations
    dispatch(sc_module_name name);
    SC_HAS_PROCESS(dispatch);

    ~dispatch();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_iter0_fsm;
    sc_signal< sc_logic > ap_CS_iter0_fsm_state1;
    sc_signal< sc_lv<2> > ap_CS_iter1_fsm;
    sc_signal< sc_logic > ap_CS_iter1_fsm_state0;
    sc_signal< sc_lv<2> > ap_CS_iter2_fsm;
    sc_signal< sc_logic > ap_CS_iter2_fsm_state0;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_82_p3;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<1> > tmp_reg_182;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< sc_logic > memRdCmd_V_1_ack_in;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_logic > ap_CS_iter1_fsm_state2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< sc_lv<1> > tmp_reg_182_pp0_iter1_reg;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_logic > ap_CS_iter2_fsm_state3;
    sc_signal< sc_lv<40> > memRdCmd_V_1_data_out;
    sc_signal< sc_logic > memRdCmd_V_1_vld_in;
    sc_signal< sc_logic > memRdCmd_V_1_vld_out;
    sc_signal< sc_logic > memRdCmd_V_1_ack_out;
    sc_signal< sc_lv<40> > memRdCmd_V_1_payload_A;
    sc_signal< sc_lv<40> > memRdCmd_V_1_payload_B;
    sc_signal< sc_logic > memRdCmd_V_1_sel_rd;
    sc_signal< sc_logic > memRdCmd_V_1_sel_wr;
    sc_signal< sc_logic > memRdCmd_V_1_sel;
    sc_signal< sc_logic > memRdCmd_V_1_load_A;
    sc_signal< sc_logic > memRdCmd_V_1_load_B;
    sc_signal< sc_lv<2> > memRdCmd_V_1_state;
    sc_signal< sc_logic > memRdCmd_V_1_state_cmp_full;
    sc_signal< sc_logic > memRdCmd_V_TDATA_blk_n;
    sc_signal< sc_logic > demux2getPath_V_blk_n;
    sc_signal< sc_logic > disp2rec_V_V_blk_n;
    sc_signal< sc_lv<32> > getCtrlWord_address_s_fu_110_p1;
    sc_signal< sc_lv<32> > getCtrlWord_address_s_reg_186;
    sc_signal< sc_lv<7> > tmp_s_fu_124_p4;
    sc_signal< sc_lv<7> > tmp_s_reg_191;
    sc_signal< sc_lv<1> > tmp_195_i_fu_142_p2;
    sc_signal< sc_lv<1> > tmp_195_i_reg_196;
    sc_signal< sc_lv<12> > tmp_V_reg_201;
    sc_signal< sc_lv<40> > tmp_1_fu_174_p3;
    sc_signal< sc_lv<13> > tmp_length_V_load_ne_fu_114_p4;
    sc_signal< sc_lv<13> > op2_assign_fu_134_p3;
    sc_signal< sc_lv<8> > tmp_192_i_fu_158_p1;
    sc_signal< sc_lv<8> > tmp_196_i_fu_161_p2;
    sc_signal< sc_lv<8> > tmp_count_V_fu_167_p3;
    sc_signal< sc_lv<1> > ap_NS_iter0_fsm;
    sc_signal< sc_lv<2> > ap_NS_iter1_fsm;
    sc_signal< sc_lv<2> > ap_NS_iter2_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_iter0_fsm_state1;
    static const sc_lv<2> ap_ST_iter1_fsm_state2;
    static const sc_lv<2> ap_ST_iter2_fsm_state3;
    static const sc_lv<2> ap_ST_iter1_fsm_state0;
    static const sc_lv<2> ap_ST_iter2_fsm_state0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_2C;
    static const sc_lv<32> ap_const_lv32_26;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_2B;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<40> ap_const_lv40_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<7> ap_const_lv7_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_iter0_fsm_state1();
    void thread_ap_CS_iter1_fsm_state0();
    void thread_ap_CS_iter1_fsm_state2();
    void thread_ap_CS_iter2_fsm_state0();
    void thread_ap_CS_iter2_fsm_state3();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_io();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_demux2getPath_V_blk_n();
    void thread_demux2getPath_V_read();
    void thread_disp2rec_V_V_blk_n();
    void thread_disp2rec_V_V_din();
    void thread_disp2rec_V_V_write();
    void thread_getCtrlWord_address_s_fu_110_p1();
    void thread_memRdCmd_V_1_ack_in();
    void thread_memRdCmd_V_1_ack_out();
    void thread_memRdCmd_V_1_data_out();
    void thread_memRdCmd_V_1_load_A();
    void thread_memRdCmd_V_1_load_B();
    void thread_memRdCmd_V_1_sel();
    void thread_memRdCmd_V_1_state_cmp_full();
    void thread_memRdCmd_V_1_vld_in();
    void thread_memRdCmd_V_1_vld_out();
    void thread_memRdCmd_V_TDATA();
    void thread_memRdCmd_V_TDATA_blk_n();
    void thread_memRdCmd_V_TVALID();
    void thread_op2_assign_fu_134_p3();
    void thread_tmp_192_i_fu_158_p1();
    void thread_tmp_195_i_fu_142_p2();
    void thread_tmp_196_i_fu_161_p2();
    void thread_tmp_1_fu_174_p3();
    void thread_tmp_count_V_fu_167_p3();
    void thread_tmp_length_V_load_ne_fu_114_p4();
    void thread_tmp_nbreadreq_fu_82_p3();
    void thread_tmp_s_fu_124_p4();
    void thread_ap_NS_iter0_fsm();
    void thread_ap_NS_iter1_fsm();
    void thread_ap_NS_iter2_fsm();
};

}

using namespace ap_rtl;

#endif
