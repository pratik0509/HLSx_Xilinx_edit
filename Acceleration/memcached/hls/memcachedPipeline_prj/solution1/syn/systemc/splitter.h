// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _splitter_HH_
#define _splitter_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct splitter : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<256> > hashTable2splitter_V_dout;
    sc_in< sc_logic > hashTable2splitter_V_empty_n;
    sc_out< sc_logic > hashTable2splitter_V_read;
    sc_out< sc_lv<256> > splitter2valueStoreF_1_din;
    sc_in< sc_logic > splitter2valueStoreF_1_full_n;
    sc_out< sc_logic > splitter2valueStoreF_1_write;
    sc_out< sc_lv<256> > splitter2valueStoreD_1_din;
    sc_in< sc_logic > splitter2valueStoreD_1_full_n;
    sc_out< sc_logic > splitter2valueStoreD_1_write;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;


    // Module declarations
    splitter(sc_module_name name);
    SC_HAS_PROCESS(splitter);

    ~splitter();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_52_p3;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< sc_lv<1> > tmp_reg_201;
    sc_signal< sc_lv<1> > tmp_reg_201_pp0_iter1_reg;
    sc_signal< sc_lv<1> > is_validFlag_loc_i_reg_92;
    sc_signal< sc_lv<1> > dramOrFlash_V_1_loc_s_reg_104;
    sc_signal< bool > ap_predicate_op32_write_state3;
    sc_signal< bool > ap_predicate_op34_write_state3;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > is_validFlag;
    sc_signal< sc_lv<1> > dramOrFlash_V_1;
    sc_signal< sc_logic > hashTable2splitter_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > splitter2valueStoreF_1_blk_n;
    sc_signal< sc_logic > splitter2valueStoreD_1_blk_n;
    sc_signal< sc_lv<256> > tmp92_reg_205;
    sc_signal< sc_lv<256> > tmp92_reg_205_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_SOP_V_fu_135_p3;
    sc_signal< sc_lv<1> > tmp_SOP_V_reg_212;
    sc_signal< sc_lv<1> > not_i_fu_153_p2;
    sc_signal< sc_lv<1> > not_i_reg_216;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<1> > ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80;
    sc_signal< sc_lv<1> > ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104;
    sc_signal< sc_lv<1> > ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4;
    sc_signal< sc_lv<1> > p_is_validFlag_flag_i_fu_181_p2;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114;
    sc_signal< sc_lv<1> > ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4;
    sc_signal< sc_lv<1> > not_din_EOP_V_assign_fu_188_p2;
    sc_signal< sc_lv<1> > ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > p_Result_i_fu_143_p4;
    sc_signal< sc_lv<1> > tmp_2_fu_174_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to1;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_194;
    sc_signal< bool > ap_condition_96;
    sc_signal< bool > ap_condition_151;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_7C;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_27;
    static const sc_lv<32> ap_const_lv32_801;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<256> ap_const_lv256_lc_1;
    // Thread declarations
    void thread_ap_clk_pos_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_condition_151();
    void thread_ap_condition_194();
    void thread_ap_condition_96();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to1();
    void thread_ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4();
    void thread_ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4();
    void thread_ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4();
    void thread_ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4();
    void thread_ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104();
    void thread_ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80();
    void thread_ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92();
    void thread_ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114();
    void thread_ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125();
    void thread_ap_predicate_op32_write_state3();
    void thread_ap_predicate_op34_write_state3();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_hashTable2splitter_V_blk_n();
    void thread_hashTable2splitter_V_read();
    void thread_internal_ap_ready();
    void thread_not_din_EOP_V_assign_fu_188_p2();
    void thread_not_i_fu_153_p2();
    void thread_p_Result_i_fu_143_p4();
    void thread_p_is_validFlag_flag_i_fu_181_p2();
    void thread_real_start();
    void thread_splitter2valueStoreD_1_blk_n();
    void thread_splitter2valueStoreD_1_din();
    void thread_splitter2valueStoreD_1_write();
    void thread_splitter2valueStoreF_1_blk_n();
    void thread_splitter2valueStoreF_1_din();
    void thread_splitter2valueStoreF_1_write();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_2_fu_174_p3();
    void thread_tmp_SOP_V_fu_135_p3();
    void thread_tmp_nbreadreq_fu_52_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
