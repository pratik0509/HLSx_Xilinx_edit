// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _memRead_HH_
#define _memRead_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct memRead : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > cc2memReadMd_V_dout;
    sc_in< sc_logic > cc2memReadMd_V_empty_n;
    sc_out< sc_logic > cc2memReadMd_V_read;
    sc_in< sc_lv<130> > cc2memRead_V_dout;
    sc_in< sc_logic > cc2memRead_V_empty_n;
    sc_out< sc_logic > cc2memRead_V_read;
    sc_out< sc_lv<130> > memRd2comp_V_din;
    sc_in< sc_logic > memRd2comp_V_full_n;
    sc_out< sc_logic > memRd2comp_V_write;
    sc_out< sc_lv<64> > memRd2compMd_V_din;
    sc_in< sc_logic > memRd2compMd_V_full_n;
    sc_out< sc_logic > memRd2compMd_V_write;
    sc_in< sc_logic > memRdCtrl_V_TREADY;
    sc_out< sc_lv<40> > memRdCtrl_V_TDATA;
    sc_out< sc_logic > memRdCtrl_V_TVALID;


    // Module declarations
    memRead(sc_module_name name);
    SC_HAS_PROCESS(memRead);

    ~memRead();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_iter0_fsm;
    sc_signal< sc_logic > ap_CS_iter0_fsm_state1;
    sc_signal< sc_lv<2> > ap_CS_iter1_fsm;
    sc_signal< sc_logic > ap_CS_iter1_fsm_state0;
    sc_signal< sc_lv<2> > ap_CS_iter2_fsm;
    sc_signal< sc_logic > ap_CS_iter2_fsm_state0;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_106_p3;
    sc_signal< sc_lv<1> > tmp_29_nbreadreq_fu_114_p3;
    sc_signal< bool > ap_predicate_op9_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<1> > memRdState_load_reg_362;
    sc_signal< sc_lv<1> > tmp_reg_366;
    sc_signal< sc_lv<1> > tmp_29_reg_370;
    sc_signal< bool > ap_predicate_op48_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< sc_logic > memRdCtrl_V_1_ack_in;
    sc_signal< sc_lv<1> > tmp_i_reg_384;
    sc_signal< bool > ap_predicate_op46_write_state2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_logic > ap_CS_iter1_fsm_state2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< sc_lv<1> > memRdState_load_reg_362_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_reg_366_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_29_reg_370_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_i_reg_384_pp0_iter1_reg;
    sc_signal< bool > ap_predicate_op57_write_state3;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< sc_logic > ap_CS_iter2_fsm_state3;
    sc_signal< sc_lv<40> > memRdCtrl_V_1_data_out;
    sc_signal< sc_logic > memRdCtrl_V_1_vld_in;
    sc_signal< sc_logic > memRdCtrl_V_1_vld_out;
    sc_signal< sc_logic > memRdCtrl_V_1_ack_out;
    sc_signal< sc_lv<40> > memRdCtrl_V_1_payload_A;
    sc_signal< sc_lv<40> > memRdCtrl_V_1_payload_B;
    sc_signal< sc_logic > memRdCtrl_V_1_sel_rd;
    sc_signal< sc_logic > memRdCtrl_V_1_sel_wr;
    sc_signal< sc_logic > memRdCtrl_V_1_sel;
    sc_signal< sc_logic > memRdCtrl_V_1_load_A;
    sc_signal< sc_logic > memRdCtrl_V_1_load_B;
    sc_signal< sc_lv<2> > memRdCtrl_V_1_state;
    sc_signal< sc_logic > memRdCtrl_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > memRdState;
    sc_signal< sc_logic > memRdCtrl_V_TDATA_blk_n;
    sc_signal< sc_logic > cc2memReadMd_V_blk_n;
    sc_signal< sc_logic > cc2memRead_V_blk_n;
    sc_signal< sc_logic > memRd2comp_V_blk_n;
    sc_signal< sc_logic > memRd2compMd_V_blk_n;
    sc_signal< sc_lv<64> > tmp27_reg_374;
    sc_signal< sc_lv<1> > grp_fu_155_p3;
    sc_signal< sc_lv<1> > tmp_i_fu_185_p2;
    sc_signal< sc_lv<4> > tmp_30_fu_191_p4;
    sc_signal< sc_lv<4> > tmp_30_reg_388;
    sc_signal< sc_lv<1> > tmp_128_i_fu_209_p2;
    sc_signal< sc_lv<1> > tmp_128_i_reg_393;
    sc_signal< sc_lv<128> > tmp_data_V_fu_283_p3;
    sc_signal< sc_lv<128> > tmp_data_V_reg_398;
    sc_signal< sc_lv<2> > tmp_46_i_reg_403;
    sc_signal< sc_lv<130> > tmp_5_reg_408;
    sc_signal< sc_lv<40> > tmp_2_fu_350_p1;
    sc_signal< sc_lv<130> > tmp_3_fu_355_p3;
    sc_signal< sc_lv<8> > tmp_operation_V_fu_167_p1;
    sc_signal< sc_lv<8> > tmp_keyLength_V_fu_171_p4;
    sc_signal< sc_lv<8> > r_V_fu_201_p3;
    sc_signal< sc_lv<5> > tmp_31_fu_221_p4;
    sc_signal< sc_lv<8> > tmp_131_i_fu_231_p3;
    sc_signal< sc_lv<8> > tmp_341_fu_239_p2;
    sc_signal< sc_lv<128> > tmp_342_fu_245_p1;
    sc_signal< sc_lv<128> > p_Val2_s_fu_181_p1;
    sc_signal< sc_lv<128> > tmp_343_fu_249_p2;
    sc_signal< sc_lv<8> > tmp_345_fu_261_p2;
    sc_signal< sc_lv<128> > tmp_346_fu_267_p1;
    sc_signal< sc_lv<128> > p_Result_s_fu_255_p2;
    sc_signal< sc_lv<128> > tmp_347_fu_271_p2;
    sc_signal< sc_lv<1> > tmp_129_i_fu_215_p2;
    sc_signal< sc_lv<128> > p_Result_23_fu_277_p2;
    sc_signal< sc_lv<5> > p_0184_1_0_v_cast_i_c_fu_325_p3;
    sc_signal< sc_lv<5> > memData_count_V_cast_fu_322_p1;
    sc_signal< sc_lv<5> > memData_count_V_fu_332_p2;
    sc_signal< sc_lv<7> > p_Result_i_fu_313_p4;
    sc_signal< sc_lv<37> > tmp_s_fu_338_p5;
    sc_signal< sc_lv<1> > ap_NS_iter0_fsm;
    sc_signal< sc_lv<2> > ap_NS_iter1_fsm;
    sc_signal< sc_lv<2> > ap_NS_iter2_fsm;
    sc_signal< bool > ap_condition_295;
    sc_signal< bool > ap_condition_299;
    sc_signal< bool > ap_condition_149;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_iter0_fsm_state1;
    static const sc_lv<2> ap_ST_iter1_fsm_state2;
    static const sc_lv<2> ap_ST_iter2_fsm_state3;
    static const sc_lv<2> ap_ST_iter1_fsm_state0;
    static const sc_lv<2> ap_ST_iter2_fsm_state0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_81;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<8> ap_const_lv8_8;
    static const sc_lv<32> ap_const_lv32_2C;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_11;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<128> ap_const_lv128_lc_2;
    static const sc_lv<32> ap_const_lv32_80;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<22> ap_const_lv22_0;
    static const sc_lv<40> ap_const_lv40_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<130> ap_const_lv130_lc_1;
    static const sc_lv<128> ap_const_lv128_lc_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_iter0_fsm_state1();
    void thread_ap_CS_iter1_fsm_state0();
    void thread_ap_CS_iter1_fsm_state2();
    void thread_ap_CS_iter2_fsm_state0();
    void thread_ap_CS_iter2_fsm_state3();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_io();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_condition_149();
    void thread_ap_condition_295();
    void thread_ap_condition_299();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op46_write_state2();
    void thread_ap_predicate_op48_write_state2();
    void thread_ap_predicate_op57_write_state3();
    void thread_ap_predicate_op9_read_state1();
    void thread_ap_ready();
    void thread_cc2memReadMd_V_blk_n();
    void thread_cc2memReadMd_V_read();
    void thread_cc2memRead_V_blk_n();
    void thread_cc2memRead_V_read();
    void thread_grp_fu_155_p3();
    void thread_memData_count_V_cast_fu_322_p1();
    void thread_memData_count_V_fu_332_p2();
    void thread_memRd2compMd_V_blk_n();
    void thread_memRd2compMd_V_din();
    void thread_memRd2compMd_V_write();
    void thread_memRd2comp_V_blk_n();
    void thread_memRd2comp_V_din();
    void thread_memRd2comp_V_write();
    void thread_memRdCtrl_V_1_ack_in();
    void thread_memRdCtrl_V_1_ack_out();
    void thread_memRdCtrl_V_1_data_out();
    void thread_memRdCtrl_V_1_load_A();
    void thread_memRdCtrl_V_1_load_B();
    void thread_memRdCtrl_V_1_sel();
    void thread_memRdCtrl_V_1_state_cmp_full();
    void thread_memRdCtrl_V_1_vld_in();
    void thread_memRdCtrl_V_1_vld_out();
    void thread_memRdCtrl_V_TDATA();
    void thread_memRdCtrl_V_TDATA_blk_n();
    void thread_memRdCtrl_V_TVALID();
    void thread_p_0184_1_0_v_cast_i_c_fu_325_p3();
    void thread_p_Result_23_fu_277_p2();
    void thread_p_Result_i_fu_313_p4();
    void thread_p_Result_s_fu_255_p2();
    void thread_p_Val2_s_fu_181_p1();
    void thread_r_V_fu_201_p3();
    void thread_tmp_128_i_fu_209_p2();
    void thread_tmp_129_i_fu_215_p2();
    void thread_tmp_131_i_fu_231_p3();
    void thread_tmp_29_nbreadreq_fu_114_p3();
    void thread_tmp_2_fu_350_p1();
    void thread_tmp_30_fu_191_p4();
    void thread_tmp_31_fu_221_p4();
    void thread_tmp_341_fu_239_p2();
    void thread_tmp_342_fu_245_p1();
    void thread_tmp_343_fu_249_p2();
    void thread_tmp_345_fu_261_p2();
    void thread_tmp_346_fu_267_p1();
    void thread_tmp_347_fu_271_p2();
    void thread_tmp_3_fu_355_p3();
    void thread_tmp_data_V_fu_283_p3();
    void thread_tmp_i_fu_185_p2();
    void thread_tmp_keyLength_V_fu_171_p4();
    void thread_tmp_nbreadreq_fu_106_p3();
    void thread_tmp_operation_V_fu_167_p1();
    void thread_tmp_s_fu_338_p5();
    void thread_ap_NS_iter0_fsm();
    void thread_ap_NS_iter1_fsm();
    void thread_ap_NS_iter2_fsm();
};

}

using namespace ap_rtl;

#endif
