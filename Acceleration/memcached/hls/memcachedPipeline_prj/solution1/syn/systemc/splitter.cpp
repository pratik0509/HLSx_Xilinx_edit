// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "splitter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic splitter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic splitter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> splitter::ap_ST_fsm_pp0_stage0 = "1";
const bool splitter::ap_const_boolean_1 = true;
const sc_lv<32> splitter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> splitter::ap_const_lv1_1 = "1";
const sc_lv<1> splitter::ap_const_lv1_0 = "0";
const bool splitter::ap_const_boolean_0 = false;
const sc_lv<32> splitter::ap_const_lv32_7C = "1111100";
const sc_lv<32> splitter::ap_const_lv32_8 = "1000";
const sc_lv<32> splitter::ap_const_lv32_27 = "100111";
const sc_lv<32> splitter::ap_const_lv32_801 = "100000000001";
const sc_lv<32> splitter::ap_const_lv32_7F = "1111111";
const sc_lv<256> splitter::ap_const_lv256_lc_1 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

splitter::splitter(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_pos_reset_);
    dont_initialize();
    sensitive << ( ap_rst.pos() );
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( hashTable2splitter_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_52_p3 );
    sensitive << ( splitter2valueStoreF_1_full_n );
    sensitive << ( ap_predicate_op32_write_state3 );
    sensitive << ( splitter2valueStoreD_1_full_n );
    sensitive << ( ap_predicate_op34_write_state3 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( hashTable2splitter_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_52_p3 );
    sensitive << ( splitter2valueStoreF_1_full_n );
    sensitive << ( ap_predicate_op32_write_state3 );
    sensitive << ( splitter2valueStoreD_1_full_n );
    sensitive << ( ap_predicate_op34_write_state3 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( hashTable2splitter_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_52_p3 );
    sensitive << ( splitter2valueStoreF_1_full_n );
    sensitive << ( ap_predicate_op32_write_state3 );
    sensitive << ( splitter2valueStoreD_1_full_n );
    sensitive << ( ap_predicate_op34_write_state3 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( hashTable2splitter_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_52_p3 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( splitter2valueStoreF_1_full_n );
    sensitive << ( ap_predicate_op32_write_state3 );
    sensitive << ( splitter2valueStoreD_1_full_n );
    sensitive << ( ap_predicate_op34_write_state3 );

    SC_METHOD(thread_ap_condition_151);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_194);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_201 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_condition_96);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( real_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4);
    sensitive << ( ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4 );
    sensitive << ( ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 );
    sensitive << ( p_is_validFlag_flag_i_fu_181_p2 );
    sensitive << ( ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114 );
    sensitive << ( ap_condition_194 );

    SC_METHOD(thread_ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_201 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_SOP_V_reg_212 );
    sensitive << ( ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 );

    SC_METHOD(thread_ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_reg_201 );
    sensitive << ( is_validFlag );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_SOP_V_reg_212 );
    sensitive << ( ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 );

    SC_METHOD(thread_ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4);
    sensitive << ( ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 );
    sensitive << ( not_din_EOP_V_assign_fu_188_p2 );
    sensitive << ( ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125 );
    sensitive << ( ap_condition_194 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92);

    SC_METHOD(thread_ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114);

    SC_METHOD(thread_ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125);

    SC_METHOD(thread_ap_predicate_op32_write_state3);
    sensitive << ( tmp_reg_201_pp0_iter1_reg );
    sensitive << ( is_validFlag_loc_i_reg_92 );
    sensitive << ( dramOrFlash_V_1_loc_s_reg_104 );

    SC_METHOD(thread_ap_predicate_op34_write_state3);
    sensitive << ( tmp_reg_201_pp0_iter1_reg );
    sensitive << ( is_validFlag_loc_i_reg_92 );
    sensitive << ( dramOrFlash_V_1_loc_s_reg_104 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( real_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_hashTable2splitter_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( hashTable2splitter_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_52_p3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_hashTable2splitter_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_52_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_not_din_EOP_V_assign_fu_188_p2);
    sensitive << ( tmp_2_fu_174_p3 );

    SC_METHOD(thread_not_i_fu_153_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_52_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( tmp_SOP_V_fu_135_p3 );
    sensitive << ( p_Result_i_fu_143_p4 );

    SC_METHOD(thread_p_Result_i_fu_143_p4);
    sensitive << ( hashTable2splitter_V_dout );

    SC_METHOD(thread_p_is_validFlag_flag_i_fu_181_p2);
    sensitive << ( ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4 );
    sensitive << ( tmp_2_fu_174_p3 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_splitter2valueStoreD_1_blk_n);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( splitter2valueStoreD_1_full_n );
    sensitive << ( ap_predicate_op34_write_state3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_splitter2valueStoreD_1_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op34_write_state3 );
    sensitive << ( tmp92_reg_205_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_splitter2valueStoreD_1_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op34_write_state3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_splitter2valueStoreF_1_blk_n);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( splitter2valueStoreF_1_full_n );
    sensitive << ( ap_predicate_op32_write_state3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_splitter2valueStoreF_1_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op32_write_state3 );
    sensitive << ( tmp92_reg_205_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_splitter2valueStoreF_1_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op32_write_state3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_2_fu_174_p3);
    sensitive << ( tmp92_reg_205 );

    SC_METHOD(thread_tmp_SOP_V_fu_135_p3);
    sensitive << ( hashTable2splitter_V_dout );

    SC_METHOD(thread_tmp_nbreadreq_fu_52_p3);
    sensitive << ( hashTable2splitter_V_empty_n );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    tmp_reg_201 = "0";
    tmp_reg_201_pp0_iter1_reg = "0";
    is_validFlag_loc_i_reg_92 = "0";
    dramOrFlash_V_1_loc_s_reg_104 = "0";
    is_validFlag = "0";
    dramOrFlash_V_1 = "0";
    tmp92_reg_205 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    tmp92_reg_205_pp0_iter1_reg = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    tmp_SOP_V_reg_212 = "0";
    not_i_reg_216 = "0";
    ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 = "0";
    ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 = "0";
    ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "splitter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, hashTable2splitter_V_dout, "(port)hashTable2splitter_V_dout");
    sc_trace(mVcdFile, hashTable2splitter_V_empty_n, "(port)hashTable2splitter_V_empty_n");
    sc_trace(mVcdFile, hashTable2splitter_V_read, "(port)hashTable2splitter_V_read");
    sc_trace(mVcdFile, splitter2valueStoreF_1_din, "(port)splitter2valueStoreF_1_din");
    sc_trace(mVcdFile, splitter2valueStoreF_1_full_n, "(port)splitter2valueStoreF_1_full_n");
    sc_trace(mVcdFile, splitter2valueStoreF_1_write, "(port)splitter2valueStoreF_1_write");
    sc_trace(mVcdFile, splitter2valueStoreD_1_din, "(port)splitter2valueStoreD_1_din");
    sc_trace(mVcdFile, splitter2valueStoreD_1_full_n, "(port)splitter2valueStoreD_1_full_n");
    sc_trace(mVcdFile, splitter2valueStoreD_1_write, "(port)splitter2valueStoreD_1_write");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_52_p3, "tmp_nbreadreq_fu_52_p3");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, tmp_reg_201, "tmp_reg_201");
    sc_trace(mVcdFile, tmp_reg_201_pp0_iter1_reg, "tmp_reg_201_pp0_iter1_reg");
    sc_trace(mVcdFile, is_validFlag_loc_i_reg_92, "is_validFlag_loc_i_reg_92");
    sc_trace(mVcdFile, dramOrFlash_V_1_loc_s_reg_104, "dramOrFlash_V_1_loc_s_reg_104");
    sc_trace(mVcdFile, ap_predicate_op32_write_state3, "ap_predicate_op32_write_state3");
    sc_trace(mVcdFile, ap_predicate_op34_write_state3, "ap_predicate_op34_write_state3");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, is_validFlag, "is_validFlag");
    sc_trace(mVcdFile, dramOrFlash_V_1, "dramOrFlash_V_1");
    sc_trace(mVcdFile, hashTable2splitter_V_blk_n, "hashTable2splitter_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, splitter2valueStoreF_1_blk_n, "splitter2valueStoreF_1_blk_n");
    sc_trace(mVcdFile, splitter2valueStoreD_1_blk_n, "splitter2valueStoreD_1_blk_n");
    sc_trace(mVcdFile, tmp92_reg_205, "tmp92_reg_205");
    sc_trace(mVcdFile, tmp92_reg_205_pp0_iter1_reg, "tmp92_reg_205_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_SOP_V_fu_135_p3, "tmp_SOP_V_fu_135_p3");
    sc_trace(mVcdFile, tmp_SOP_V_reg_212, "tmp_SOP_V_reg_212");
    sc_trace(mVcdFile, not_i_fu_153_p2, "not_i_fu_153_p2");
    sc_trace(mVcdFile, not_i_reg_216, "not_i_reg_216");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4, "ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80, "ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80, "ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80");
    sc_trace(mVcdFile, ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4, "ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92, "ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92, "ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104, "ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104, "ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104");
    sc_trace(mVcdFile, ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4, "ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4");
    sc_trace(mVcdFile, p_is_validFlag_flag_i_fu_181_p2, "p_is_validFlag_flag_i_fu_181_p2");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114, "ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114");
    sc_trace(mVcdFile, ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4, "ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4");
    sc_trace(mVcdFile, not_din_EOP_V_assign_fu_188_p2, "not_din_EOP_V_assign_fu_188_p2");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125, "ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, p_Result_i_fu_143_p4, "p_Result_i_fu_143_p4");
    sc_trace(mVcdFile, tmp_2_fu_174_p3, "tmp_2_fu_174_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_194, "ap_condition_194");
    sc_trace(mVcdFile, ap_condition_96, "ap_condition_96");
    sc_trace(mVcdFile, ap_condition_151, "ap_condition_151");
#endif

    }
}

splitter::~splitter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void splitter::thread_ap_clk_pos_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter1 = real_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_96.read(), ap_const_boolean_1)) {
            if ((esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_SOP_V_fu_135_p3.read()))) {
                ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 = not_i_fu_153_p2.read();
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104 = ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_96.read(), ap_const_boolean_1)) {
            if ((esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_SOP_V_fu_135_p3.read()))) {
                ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 = ap_const_lv1_1;
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80 = ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_96.read(), ap_const_boolean_1)) {
            if ((esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_SOP_V_fu_135_p3.read()))) {
                ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 = ap_const_lv1_1;
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92 = ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dramOrFlash_V_1 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_201.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_SOP_V_reg_212.read()))) {
            dramOrFlash_V_1 = not_i_reg_216.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dramOrFlash_V_1_loc_s_reg_104 = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_151.read(), ap_const_boolean_1)) {
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_SOP_V_reg_212.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_201.read()))) {
                dramOrFlash_V_1_loc_s_reg_104 = dramOrFlash_V_1.read();
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                dramOrFlash_V_1_loc_s_reg_104 = ap_phi_reg_pp0_iter1_dramOrFlash_V_1_loc_s_reg_104.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        is_validFlag = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_201.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4.read()))) {
            is_validFlag = ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        is_validFlag_loc_i_reg_92 = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_151.read(), ap_const_boolean_1)) {
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_SOP_V_reg_212.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_201.read()))) {
                is_validFlag_loc_i_reg_92 = is_validFlag.read();
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                is_validFlag_loc_i_reg_92 = ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        not_i_reg_216 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_SOP_V_fu_135_p3.read()))) {
            not_i_reg_216 = not_i_fu_153_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp92_reg_205 = ap_const_lv256_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            tmp92_reg_205 = hashTable2splitter_V_dout.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp92_reg_205_pp0_iter1_reg = ap_const_lv256_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            tmp92_reg_205_pp0_iter1_reg = tmp92_reg_205.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_SOP_V_reg_212 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            tmp_SOP_V_reg_212 = hashTable2splitter_V_dout.read().range(124, 124);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_reg_201 = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            tmp_reg_201 =  (sc_lv<1>) (hashTable2splitter_V_empty_n.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_reg_201_pp0_iter1_reg = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            tmp_reg_201_pp0_iter1_reg = tmp_reg_201.read();
        }
    }
}

void splitter::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void splitter::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void splitter::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, hashTable2splitter_V_empty_n.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, splitter2valueStoreF_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state3.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, splitter2valueStoreD_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state3.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void splitter::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, hashTable2splitter_V_empty_n.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, splitter2valueStoreF_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state3.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, splitter2valueStoreD_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state3.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void splitter::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, hashTable2splitter_V_empty_n.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, splitter2valueStoreF_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state3.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, splitter2valueStoreD_1_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state3.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void splitter::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, hashTable2splitter_V_empty_n.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void splitter::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void splitter::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = ((esl_seteq<1,1,1>(ap_const_logic_0, splitter2valueStoreF_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state3.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, splitter2valueStoreD_1_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state3.read())));
}

void splitter::thread_ap_condition_151() {
    ap_condition_151 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()));
}

void splitter::thread_ap_condition_194() {
    ap_condition_194 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_201.read()));
}

void splitter::thread_ap_condition_96() {
    ap_condition_96 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void splitter::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void splitter::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void splitter::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = real_start.read();
}

void splitter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void splitter::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void splitter::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void splitter::thread_ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4() {
    if (esl_seteq<1,1,1>(ap_condition_194.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4.read())) {
            ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 = ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4.read())) {
            ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 = p_is_validFlag_flag_i_fu_181_p2.read();
        } else {
            ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 = ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114.read();
        }
    } else {
        ap_phi_mux_is_validFlag_flag_2_s_phi_fu_117_p4 = ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114.read();
    }
}

void splitter::thread_ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_SOP_V_reg_212.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_201.read()))) {
        ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4 = ap_const_lv1_0;
    } else {
        ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4 = ap_phi_reg_pp0_iter1_is_validFlag_flag_i_reg_80.read();
    }
}

void splitter::thread_ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_SOP_V_reg_212.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_201.read()))) {
        ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 = is_validFlag.read();
    } else {
        ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4 = ap_phi_reg_pp0_iter1_is_validFlag_loc_i_reg_92.read();
    }
}

void splitter::thread_ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4() {
    if (esl_seteq<1,1,1>(ap_condition_194.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4.read())) {
            ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 = ap_const_lv1_1;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_is_validFlag_loc_i_phi_fu_96_p4.read())) {
            ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 = not_din_EOP_V_assign_fu_188_p2.read();
        } else {
            ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 = ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125.read();
        }
    } else {
        ap_phi_mux_is_validFlag_new_2_i_phi_fu_128_p4 = ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125.read();
    }
}

void splitter::thread_ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104() {
    ap_phi_reg_pp0_iter0_dramOrFlash_V_1_loc_s_reg_104 = "X";
}

void splitter::thread_ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80() {
    ap_phi_reg_pp0_iter0_is_validFlag_flag_i_reg_80 = "X";
}

void splitter::thread_ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92() {
    ap_phi_reg_pp0_iter0_is_validFlag_loc_i_reg_92 = "X";
}

void splitter::thread_ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114() {
    ap_phi_reg_pp0_iter1_is_validFlag_flag_2_s_reg_114 = "X";
}

void splitter::thread_ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125() {
    ap_phi_reg_pp0_iter1_is_validFlag_new_2_i_reg_125 = "X";
}

void splitter::thread_ap_predicate_op32_write_state3() {
    ap_predicate_op32_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_201_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, is_validFlag_loc_i_reg_92.read()) && esl_seteq<1,1,1>(dramOrFlash_V_1_loc_s_reg_104.read(), ap_const_lv1_0));
}

void splitter::thread_ap_predicate_op34_write_state3() {
    ap_predicate_op34_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_201_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, is_validFlag_loc_i_reg_92.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, dramOrFlash_V_1_loc_s_reg_104.read()));
}

void splitter::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void splitter::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void splitter::thread_hashTable2splitter_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        hashTable2splitter_V_blk_n = hashTable2splitter_V_empty_n.read();
    } else {
        hashTable2splitter_V_blk_n = ap_const_logic_1;
    }
}

void splitter::thread_hashTable2splitter_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_52_p3.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        hashTable2splitter_V_read = ap_const_logic_1;
    } else {
        hashTable2splitter_V_read = ap_const_logic_0;
    }
}

void splitter::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void splitter::thread_not_din_EOP_V_assign_fu_188_p2() {
    not_din_EOP_V_assign_fu_188_p2 = (tmp_2_fu_174_p3.read() ^ ap_const_lv1_1);
}

void splitter::thread_not_i_fu_153_p2() {
    not_i_fu_153_p2 = (!p_Result_i_fu_143_p4.read().is_01() || !ap_const_lv32_801.is_01())? sc_lv<1>(): (sc_biguint<32>(p_Result_i_fu_143_p4.read()) < sc_biguint<32>(ap_const_lv32_801));
}

void splitter::thread_p_Result_i_fu_143_p4() {
    p_Result_i_fu_143_p4 = hashTable2splitter_V_dout.read().range(39, 8);
}

void splitter::thread_p_is_validFlag_flag_i_fu_181_p2() {
    p_is_validFlag_flag_i_fu_181_p2 = (tmp_2_fu_174_p3.read() | ap_phi_mux_is_validFlag_flag_i_phi_fu_84_p4.read());
}

void splitter::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void splitter::thread_splitter2valueStoreD_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        splitter2valueStoreD_1_blk_n = splitter2valueStoreD_1_full_n.read();
    } else {
        splitter2valueStoreD_1_blk_n = ap_const_logic_1;
    }
}

void splitter::thread_splitter2valueStoreD_1_din() {
    splitter2valueStoreD_1_din = tmp92_reg_205_pp0_iter1_reg.read();
}

void splitter::thread_splitter2valueStoreD_1_write() {
    if ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        splitter2valueStoreD_1_write = ap_const_logic_1;
    } else {
        splitter2valueStoreD_1_write = ap_const_logic_0;
    }
}

void splitter::thread_splitter2valueStoreF_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        splitter2valueStoreF_1_blk_n = splitter2valueStoreF_1_full_n.read();
    } else {
        splitter2valueStoreF_1_blk_n = ap_const_logic_1;
    }
}

void splitter::thread_splitter2valueStoreF_1_din() {
    splitter2valueStoreF_1_din = tmp92_reg_205_pp0_iter1_reg.read();
}

void splitter::thread_splitter2valueStoreF_1_write() {
    if ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        splitter2valueStoreF_1_write = ap_const_logic_1;
    } else {
        splitter2valueStoreF_1_write = ap_const_logic_0;
    }
}

void splitter::thread_start_out() {
    start_out = real_start.read();
}

void splitter::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void splitter::thread_tmp_2_fu_174_p3() {
    tmp_2_fu_174_p3 = tmp92_reg_205.read().range(127, 127);
}

void splitter::thread_tmp_SOP_V_fu_135_p3() {
    tmp_SOP_V_fu_135_p3 = hashTable2splitter_V_dout.read().range(124, 124);
}

void splitter::thread_tmp_nbreadreq_fu_52_p3() {
    tmp_nbreadreq_fu_52_p3 =  (sc_lv<1>) (hashTable2splitter_V_empty_n.read());
}

void splitter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

