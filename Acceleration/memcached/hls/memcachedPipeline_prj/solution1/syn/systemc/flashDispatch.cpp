// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "flashDispatch.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic flashDispatch::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic flashDispatch::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> flashDispatch::ap_ST_iter0_fsm_state1 = "1";
const sc_lv<2> flashDispatch::ap_ST_iter1_fsm_state2 = "10";
const sc_lv<2> flashDispatch::ap_ST_iter2_fsm_state3 = "10";
const sc_lv<2> flashDispatch::ap_ST_iter1_fsm_state0 = "1";
const sc_lv<2> flashDispatch::ap_ST_iter2_fsm_state0 = "1";
const sc_lv<32> flashDispatch::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool flashDispatch::ap_const_boolean_1 = true;
const sc_lv<1> flashDispatch::ap_const_lv1_1 = "1";
const sc_lv<32> flashDispatch::ap_const_lv32_1 = "1";
const sc_lv<1> flashDispatch::ap_const_lv1_0 = "0";
const sc_lv<2> flashDispatch::ap_const_lv2_0 = "00";
const sc_lv<2> flashDispatch::ap_const_lv2_2 = "10";
const sc_lv<2> flashDispatch::ap_const_lv2_3 = "11";
const sc_lv<2> flashDispatch::ap_const_lv2_1 = "1";
const sc_lv<32> flashDispatch::ap_const_lv32_20 = "100000";
const sc_lv<32> flashDispatch::ap_const_lv32_2F = "101111";
const sc_lv<32> flashDispatch::ap_const_lv32_23 = "100011";
const sc_lv<3> flashDispatch::ap_const_lv3_0 = "000";
const sc_lv<13> flashDispatch::ap_const_lv13_1 = "1";
const sc_lv<48> flashDispatch::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_lv<16> flashDispatch::ap_const_lv16_0 = "0000000000000000";
const sc_lv<13> flashDispatch::ap_const_lv13_0 = "0000000000000";

flashDispatch::flashDispatch(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_iter0_fsm_state1);
    sensitive << ( ap_CS_iter0_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state0);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter1_fsm_state2);
    sensitive << ( ap_CS_iter1_fsm );

    SC_METHOD(thread_ap_CS_iter2_fsm_state0);
    sensitive << ( ap_CS_iter2_fsm );

    SC_METHOD(thread_ap_CS_iter2_fsm_state3);
    sensitive << ( ap_CS_iter2_fsm );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( flashDemux2getPath_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_56_p3 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( tmp_reg_144 );
    sensitive << ( memRdCmd_V_1_ack_in );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp_reg_144 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( memRdCmd_V_1_ack_in );
    sensitive << ( tmp_reg_144_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( memRdCmd_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( memRdCmd_V_1_ack_in );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm_state0 );
    sensitive << ( ap_CS_iter2_fsm_state0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( flashDemux2getPath_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_56_p3 );
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp_reg_144 );
    sensitive << ( memRdCmd_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_flashDemux2getPath_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( flashDemux2getPath_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_56_p3 );

    SC_METHOD(thread_flashDemux2getPath_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( flashDemux2getPath_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_56_p3 );
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp_reg_144 );
    sensitive << ( memRdCmd_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_flash_Disp2rec_V_V_blk_n);
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp_reg_144 );
    sensitive << ( ap_CS_iter1_fsm_state2 );

    SC_METHOD(thread_flash_Disp2rec_V_V_din);
    sensitive << ( ap_done_reg );
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp_reg_144 );
    sensitive << ( memRdCmd_V_1_ack_in );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( tmp_V_reg_153 );

    SC_METHOD(thread_flash_Disp2rec_V_V_write);
    sensitive << ( ap_done_reg );
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp_reg_144 );
    sensitive << ( memRdCmd_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_getCtrlWord_address_s_fu_84_p1);
    sensitive << ( flashDemux2getPath_V_dout );

    SC_METHOD(thread_getCtrlWord_count_V_fu_125_p3);
    sensitive << ( tmp_s_reg_159 );
    sensitive << ( tmp_242_i_fu_115_p2 );
    sensitive << ( tmp_80_i_fu_120_p2 );

    SC_METHOD(thread_memRdCmd_V_1_ack_in);
    sensitive << ( memRdCmd_V_1_state );

    SC_METHOD(thread_memRdCmd_V_1_ack_out);
    sensitive << ( memRdCmd_V_TREADY );

    SC_METHOD(thread_memRdCmd_V_1_data_out);
    sensitive << ( memRdCmd_V_1_payload_A );
    sensitive << ( memRdCmd_V_1_payload_B );
    sensitive << ( memRdCmd_V_1_sel );

    SC_METHOD(thread_memRdCmd_V_1_load_A);
    sensitive << ( memRdCmd_V_1_sel_wr );
    sensitive << ( memRdCmd_V_1_state_cmp_full );

    SC_METHOD(thread_memRdCmd_V_1_load_B);
    sensitive << ( memRdCmd_V_1_sel_wr );
    sensitive << ( memRdCmd_V_1_state_cmp_full );

    SC_METHOD(thread_memRdCmd_V_1_sel);
    sensitive << ( memRdCmd_V_1_sel_rd );

    SC_METHOD(thread_memRdCmd_V_1_state_cmp_full);
    sensitive << ( memRdCmd_V_1_state );

    SC_METHOD(thread_memRdCmd_V_1_vld_in);
    sensitive << ( ap_done_reg );
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp_reg_144 );
    sensitive << ( memRdCmd_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_memRdCmd_V_1_vld_out);
    sensitive << ( memRdCmd_V_1_state );

    SC_METHOD(thread_memRdCmd_V_TDATA);
    sensitive << ( memRdCmd_V_1_data_out );

    SC_METHOD(thread_memRdCmd_V_TDATA_blk_n);
    sensitive << ( tmp_reg_144 );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( tmp_reg_144_pp0_iter1_reg );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( memRdCmd_V_1_state );

    SC_METHOD(thread_memRdCmd_V_TVALID);
    sensitive << ( memRdCmd_V_1_state );

    SC_METHOD(thread_op2_assign_fu_108_p3);
    sensitive << ( tmp_s_reg_159 );

    SC_METHOD(thread_tmp_1_cast_fu_139_p1);
    sensitive << ( tmp_1_fu_132_p3 );

    SC_METHOD(thread_tmp_1_fu_132_p3);
    sensitive << ( getCtrlWord_address_s_reg_148 );
    sensitive << ( getCtrlWord_count_V_fu_125_p3 );

    SC_METHOD(thread_tmp_242_i_fu_115_p2);
    sensitive << ( ap_done_reg );
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp_reg_144 );
    sensitive << ( memRdCmd_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );
    sensitive << ( tmp_V_reg_153 );
    sensitive << ( op2_assign_fu_108_p3 );

    SC_METHOD(thread_tmp_80_i_fu_120_p2);
    sensitive << ( tmp_s_reg_159 );

    SC_METHOD(thread_tmp_nbreadreq_fu_56_p3);
    sensitive << ( flashDemux2getPath_V_empty_n );

    SC_METHOD(thread_ap_NS_iter0_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm );
    sensitive << ( flashDemux2getPath_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_56_p3 );
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp_reg_144 );
    sensitive << ( memRdCmd_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_NS_iter1_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter0_fsm_state1 );
    sensitive << ( ap_CS_iter1_fsm );
    sensitive << ( flashDemux2getPath_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_56_p3 );
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp_reg_144 );
    sensitive << ( memRdCmd_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    SC_METHOD(thread_ap_NS_iter2_fsm);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_iter2_fsm );
    sensitive << ( flash_Disp2rec_V_V_full_n );
    sensitive << ( tmp_reg_144 );
    sensitive << ( memRdCmd_V_1_ack_in );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_CS_iter1_fsm_state2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_CS_iter2_fsm_state3 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_iter0_fsm = "1";
    ap_CS_iter1_fsm = "01";
    ap_CS_iter2_fsm = "01";
    tmp_reg_144 = "0";
    tmp_reg_144_pp0_iter1_reg = "0";
    memRdCmd_V_1_payload_A = "000000000000000000000000000000000000000000000000";
    memRdCmd_V_1_payload_B = "000000000000000000000000000000000000000000000000";
    memRdCmd_V_1_sel_rd = SC_LOGIC_0;
    memRdCmd_V_1_sel_wr = SC_LOGIC_0;
    memRdCmd_V_1_state = "00";
    getCtrlWord_address_s_reg_148 = "00000000000000000000000000000000";
    tmp_V_reg_153 = "0000000000000000";
    tmp_s_reg_159 = "0000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "flashDispatch_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, flashDemux2getPath_V_dout, "(port)flashDemux2getPath_V_dout");
    sc_trace(mVcdFile, flashDemux2getPath_V_empty_n, "(port)flashDemux2getPath_V_empty_n");
    sc_trace(mVcdFile, flashDemux2getPath_V_read, "(port)flashDemux2getPath_V_read");
    sc_trace(mVcdFile, flash_Disp2rec_V_V_din, "(port)flash_Disp2rec_V_V_din");
    sc_trace(mVcdFile, flash_Disp2rec_V_V_full_n, "(port)flash_Disp2rec_V_V_full_n");
    sc_trace(mVcdFile, flash_Disp2rec_V_V_write, "(port)flash_Disp2rec_V_V_write");
    sc_trace(mVcdFile, memRdCmd_V_TREADY, "(port)memRdCmd_V_TREADY");
    sc_trace(mVcdFile, memRdCmd_V_TDATA, "(port)memRdCmd_V_TDATA");
    sc_trace(mVcdFile, memRdCmd_V_TVALID, "(port)memRdCmd_V_TVALID");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_iter0_fsm, "ap_CS_iter0_fsm");
    sc_trace(mVcdFile, ap_CS_iter0_fsm_state1, "ap_CS_iter0_fsm_state1");
    sc_trace(mVcdFile, ap_CS_iter1_fsm, "ap_CS_iter1_fsm");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state0, "ap_CS_iter1_fsm_state0");
    sc_trace(mVcdFile, ap_CS_iter2_fsm, "ap_CS_iter2_fsm");
    sc_trace(mVcdFile, ap_CS_iter2_fsm_state0, "ap_CS_iter2_fsm_state0");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_56_p3, "tmp_nbreadreq_fu_56_p3");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, tmp_reg_144, "tmp_reg_144");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, memRdCmd_V_1_ack_in, "memRdCmd_V_1_ack_in");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_CS_iter1_fsm_state2, "ap_CS_iter1_fsm_state2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, tmp_reg_144_pp0_iter1_reg, "tmp_reg_144_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_CS_iter2_fsm_state3, "ap_CS_iter2_fsm_state3");
    sc_trace(mVcdFile, memRdCmd_V_1_data_out, "memRdCmd_V_1_data_out");
    sc_trace(mVcdFile, memRdCmd_V_1_vld_in, "memRdCmd_V_1_vld_in");
    sc_trace(mVcdFile, memRdCmd_V_1_vld_out, "memRdCmd_V_1_vld_out");
    sc_trace(mVcdFile, memRdCmd_V_1_ack_out, "memRdCmd_V_1_ack_out");
    sc_trace(mVcdFile, memRdCmd_V_1_payload_A, "memRdCmd_V_1_payload_A");
    sc_trace(mVcdFile, memRdCmd_V_1_payload_B, "memRdCmd_V_1_payload_B");
    sc_trace(mVcdFile, memRdCmd_V_1_sel_rd, "memRdCmd_V_1_sel_rd");
    sc_trace(mVcdFile, memRdCmd_V_1_sel_wr, "memRdCmd_V_1_sel_wr");
    sc_trace(mVcdFile, memRdCmd_V_1_sel, "memRdCmd_V_1_sel");
    sc_trace(mVcdFile, memRdCmd_V_1_load_A, "memRdCmd_V_1_load_A");
    sc_trace(mVcdFile, memRdCmd_V_1_load_B, "memRdCmd_V_1_load_B");
    sc_trace(mVcdFile, memRdCmd_V_1_state, "memRdCmd_V_1_state");
    sc_trace(mVcdFile, memRdCmd_V_1_state_cmp_full, "memRdCmd_V_1_state_cmp_full");
    sc_trace(mVcdFile, memRdCmd_V_TDATA_blk_n, "memRdCmd_V_TDATA_blk_n");
    sc_trace(mVcdFile, flashDemux2getPath_V_blk_n, "flashDemux2getPath_V_blk_n");
    sc_trace(mVcdFile, flash_Disp2rec_V_V_blk_n, "flash_Disp2rec_V_V_blk_n");
    sc_trace(mVcdFile, getCtrlWord_address_s_fu_84_p1, "getCtrlWord_address_s_fu_84_p1");
    sc_trace(mVcdFile, getCtrlWord_address_s_reg_148, "getCtrlWord_address_s_reg_148");
    sc_trace(mVcdFile, tmp_V_reg_153, "tmp_V_reg_153");
    sc_trace(mVcdFile, tmp_s_reg_159, "tmp_s_reg_159");
    sc_trace(mVcdFile, tmp_1_cast_fu_139_p1, "tmp_1_cast_fu_139_p1");
    sc_trace(mVcdFile, op2_assign_fu_108_p3, "op2_assign_fu_108_p3");
    sc_trace(mVcdFile, tmp_242_i_fu_115_p2, "tmp_242_i_fu_115_p2");
    sc_trace(mVcdFile, tmp_80_i_fu_120_p2, "tmp_80_i_fu_120_p2");
    sc_trace(mVcdFile, getCtrlWord_count_V_fu_125_p3, "getCtrlWord_count_V_fu_125_p3");
    sc_trace(mVcdFile, tmp_1_fu_132_p3, "tmp_1_fu_132_p3");
    sc_trace(mVcdFile, ap_NS_iter0_fsm, "ap_NS_iter0_fsm");
    sc_trace(mVcdFile, ap_NS_iter1_fsm, "ap_NS_iter1_fsm");
    sc_trace(mVcdFile, ap_NS_iter2_fsm, "ap_NS_iter2_fsm");
#endif

    }
}

flashDispatch::~flashDispatch() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void flashDispatch::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter0_fsm = ap_ST_iter0_fsm_state1;
    } else {
        ap_CS_iter0_fsm = ap_NS_iter0_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter1_fsm = ap_ST_iter1_fsm_state0;
    } else {
        ap_CS_iter1_fsm = ap_NS_iter1_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_iter2_fsm = ap_ST_iter2_fsm_state0;
    } else {
        ap_CS_iter2_fsm = ap_NS_iter2_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
                    !(esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        getCtrlWord_address_s_reg_148 = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
             esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1) && 
             !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || 
   (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
    esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1)))) || (esl_seteq<1,1,1>(flashDemux2getPath_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1))))) {
            getCtrlWord_address_s_reg_148 = getCtrlWord_address_s_fu_84_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        memRdCmd_V_1_payload_A = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_load_A.read())) {
            memRdCmd_V_1_payload_A = tmp_1_cast_fu_139_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        memRdCmd_V_1_payload_B = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_load_B.read())) {
            memRdCmd_V_1_payload_B = tmp_1_cast_fu_139_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        memRdCmd_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_vld_out.read()))) {
            memRdCmd_V_1_sel_rd =  (sc_logic) (~memRdCmd_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        memRdCmd_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_ack_in.read()))) {
            memRdCmd_V_1_sel_wr =  (sc_logic) (~memRdCmd_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        memRdCmd_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, memRdCmd_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(memRdCmd_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, memRdCmd_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(memRdCmd_V_1_state.read(), ap_const_lv2_2)))) {
            memRdCmd_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, memRdCmd_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(memRdCmd_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, memRdCmd_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(memRdCmd_V_1_state.read(), ap_const_lv2_1)))) {
            memRdCmd_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(memRdCmd_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(memRdCmd_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(memRdCmd_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, memRdCmd_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, memRdCmd_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_ack_out.read()))))) {
            memRdCmd_V_1_state = ap_const_lv2_3;
        } else {
            memRdCmd_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_V_reg_153 = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
             esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1) && 
             !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || 
   (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
    esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1)))) || (esl_seteq<1,1,1>(flashDemux2getPath_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1))))) {
            tmp_V_reg_153 = flashDemux2getPath_V_dout.read().range(47, 32);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_reg_144 = ap_const_lv1_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || 
   (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
    esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1)))) || (esl_seteq<1,1,1>(flashDemux2getPath_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1))) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()))) {
            tmp_reg_144 =  (sc_lv<1>) (flashDemux2getPath_V_empty_n.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_reg_144_pp0_iter1_reg = ap_const_lv1_0;
    } else {
        if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1))) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))) {
            tmp_reg_144_pp0_iter1_reg = tmp_reg_144.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        tmp_s_reg_159 = ap_const_lv13_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
             esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1) && 
             !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || 
   (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
    esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1)))) || (esl_seteq<1,1,1>(flashDemux2getPath_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1))))) {
            tmp_s_reg_159 = flashDemux2getPath_V_dout.read().range(47, 35);
        }
    }
}

void flashDispatch::thread_ap_CS_iter0_fsm_state1() {
    ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm.read()[0];
}

void flashDispatch::thread_ap_CS_iter1_fsm_state0() {
    ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm.read()[0];
}

void flashDispatch::thread_ap_CS_iter1_fsm_state2() {
    ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm.read()[1];
}

void flashDispatch::thread_ap_CS_iter2_fsm_state0() {
    ap_CS_iter2_fsm_state0 = ap_CS_iter2_fsm.read()[0];
}

void flashDispatch::thread_ap_CS_iter2_fsm_state3() {
    ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm.read()[1];
}

void flashDispatch::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(flashDemux2getPath_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1)));
}

void flashDispatch::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0));
}

void flashDispatch::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1));
}

void flashDispatch::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_144_pp0_iter1_reg.read()));
}

void flashDispatch::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0);
}

void flashDispatch::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void flashDispatch::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void flashDispatch::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || 
   (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
    esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1)))) || (esl_seteq<1,1,1>(flashDemux2getPath_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void flashDispatch::thread_flashDemux2getPath_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        flashDemux2getPath_V_blk_n = flashDemux2getPath_V_empty_n.read();
    } else {
        flashDemux2getPath_V_blk_n = ap_const_logic_1;
    }
}

void flashDispatch::thread_flashDemux2getPath_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || 
   (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
    esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1)))) || (esl_seteq<1,1,1>(flashDemux2getPath_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1))))) {
        flashDemux2getPath_V_read = ap_const_logic_1;
    } else {
        flashDemux2getPath_V_read = ap_const_logic_0;
    }
}

void flashDispatch::thread_flash_Disp2rec_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))) {
        flash_Disp2rec_V_V_blk_n = flash_Disp2rec_V_V_full_n.read();
    } else {
        flash_Disp2rec_V_V_blk_n = ap_const_logic_1;
    }
}

void flashDispatch::thread_flash_Disp2rec_V_V_din() {
    flash_Disp2rec_V_V_din = tmp_V_reg_153.read();
}

void flashDispatch::thread_flash_Disp2rec_V_V_write() {
    if ((esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1))))) {
        flash_Disp2rec_V_V_write = ap_const_logic_1;
    } else {
        flash_Disp2rec_V_V_write = ap_const_logic_0;
    }
}

void flashDispatch::thread_getCtrlWord_address_s_fu_84_p1() {
    getCtrlWord_address_s_fu_84_p1 = flashDemux2getPath_V_dout.read().range(32-1, 0);
}

void flashDispatch::thread_getCtrlWord_count_V_fu_125_p3() {
    getCtrlWord_count_V_fu_125_p3 = (!tmp_242_i_fu_115_p2.read()[0].is_01())? sc_lv<13>(): ((tmp_242_i_fu_115_p2.read()[0].to_bool())? tmp_80_i_fu_120_p2.read(): tmp_s_reg_159.read());
}

void flashDispatch::thread_memRdCmd_V_1_ack_in() {
    memRdCmd_V_1_ack_in = memRdCmd_V_1_state.read()[1];
}

void flashDispatch::thread_memRdCmd_V_1_ack_out() {
    memRdCmd_V_1_ack_out = memRdCmd_V_TREADY.read();
}

void flashDispatch::thread_memRdCmd_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, memRdCmd_V_1_sel.read())) {
        memRdCmd_V_1_data_out = memRdCmd_V_1_payload_B.read();
    } else {
        memRdCmd_V_1_data_out = memRdCmd_V_1_payload_A.read();
    }
}

void flashDispatch::thread_memRdCmd_V_1_load_A() {
    memRdCmd_V_1_load_A = (memRdCmd_V_1_state_cmp_full.read() & ~memRdCmd_V_1_sel_wr.read());
}

void flashDispatch::thread_memRdCmd_V_1_load_B() {
    memRdCmd_V_1_load_B = (memRdCmd_V_1_sel_wr.read() & memRdCmd_V_1_state_cmp_full.read());
}

void flashDispatch::thread_memRdCmd_V_1_sel() {
    memRdCmd_V_1_sel = memRdCmd_V_1_sel_rd.read();
}

void flashDispatch::thread_memRdCmd_V_1_state_cmp_full() {
    memRdCmd_V_1_state_cmp_full =  (sc_logic) ((!memRdCmd_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(memRdCmd_V_1_state.read() != ap_const_lv2_1))[0];
}

void flashDispatch::thread_memRdCmd_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1))))) {
        memRdCmd_V_1_vld_in = ap_const_logic_1;
    } else {
        memRdCmd_V_1_vld_in = ap_const_logic_0;
    }
}

void flashDispatch::thread_memRdCmd_V_1_vld_out() {
    memRdCmd_V_1_vld_out = memRdCmd_V_1_state.read()[0];
}

void flashDispatch::thread_memRdCmd_V_TDATA() {
    memRdCmd_V_TDATA = memRdCmd_V_1_data_out.read();
}

void flashDispatch::thread_memRdCmd_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_144_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read())))) {
        memRdCmd_V_TDATA_blk_n = memRdCmd_V_1_state.read()[1];
    } else {
        memRdCmd_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void flashDispatch::thread_memRdCmd_V_TVALID() {
    memRdCmd_V_TVALID = memRdCmd_V_1_state.read()[0];
}

void flashDispatch::thread_op2_assign_fu_108_p3() {
    op2_assign_fu_108_p3 = esl_concat<13,3>(tmp_s_reg_159.read(), ap_const_lv3_0);
}

void flashDispatch::thread_tmp_1_cast_fu_139_p1() {
    tmp_1_cast_fu_139_p1 = esl_sext<48,45>(tmp_1_fu_132_p3.read());
}

void flashDispatch::thread_tmp_1_fu_132_p3() {
    tmp_1_fu_132_p3 = esl_concat<13,32>(getCtrlWord_count_V_fu_125_p3.read(), getCtrlWord_address_s_reg_148.read());
}

void flashDispatch::thread_tmp_242_i_fu_115_p2() {
    tmp_242_i_fu_115_p2 = (!tmp_V_reg_153.read().is_01() || !op2_assign_fu_108_p3.read().is_01())? sc_lv<1>(): (sc_biguint<16>(tmp_V_reg_153.read()) > sc_biguint<16>(op2_assign_fu_108_p3.read()));
}

void flashDispatch::thread_tmp_80_i_fu_120_p2() {
    tmp_80_i_fu_120_p2 = (!ap_const_lv13_1.is_01() || !tmp_s_reg_159.read().is_01())? sc_lv<13>(): (sc_biguint<13>(ap_const_lv13_1) + sc_biguint<13>(tmp_s_reg_159.read()));
}

void flashDispatch::thread_tmp_nbreadreq_fu_56_p3() {
    tmp_nbreadreq_fu_56_p3 =  (sc_lv<1>) (flashDemux2getPath_V_empty_n.read());
}

void flashDispatch::thread_ap_NS_iter0_fsm() {
    switch (ap_CS_iter0_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
break;
        default : 
            ap_NS_iter0_fsm = "X";
            break;
    }
}

void flashDispatch::thread_ap_NS_iter1_fsm() {
    switch (ap_CS_iter1_fsm.read().to_uint64()) {
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(flashDemux2getPath_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1))) && !(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1))) && (esl_seteq<1,1,1>(ap_const_logic_0, ap_CS_iter0_fsm_state1.read()) || 
  (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()) && 
   (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
    esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || 
    (esl_seteq<1,1,1>(flashDemux2getPath_V_empty_n.read(), ap_const_logic_0) && 
     esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1))))))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            }
            break;
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
  (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || 
   (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
    esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1)))) || (esl_seteq<1,1,1>(flashDemux2getPath_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_56_p3.read(), ap_const_lv1_1))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter0_fsm_state1.read()))) {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            } else {
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter1_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void flashDispatch::thread_ap_NS_iter2_fsm() {
    switch (ap_CS_iter2_fsm.read().to_uint64()) {
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1))) && !(esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else if ((!(esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && (esl_seteq<1,1,1>(ap_const_logic_0, ap_CS_iter1_fsm_state2.read()) || 
  (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()) && 
   (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || 
    (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
     esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1))))))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            }
            break;
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter2_fsm_state3.read()) && 
  (esl_seteq<1,1,1>(memRdCmd_V_1_ack_in.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read()))) || (esl_seteq<1,1,1>(flash_Disp2rec_V_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_reg_144.read(), ap_const_lv1_1))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_iter1_fsm_state2.read()))) {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            } else {
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            }
            break;
        default : 
            ap_NS_iter2_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

}

